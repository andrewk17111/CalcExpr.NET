### YamlMime:ManagedReference
items:
- uid: CalcExpr.Parsing.Parser
  commentId: T:CalcExpr.Parsing.Parser
  id: Parser
  parent: CalcExpr.Parsing
  children:
  - CalcExpr.Parsing.Parser.#ctor
  - CalcExpr.Parsing.Parser.#ctor(CalcExpr.Tokenization.Tokenizer)
  - CalcExpr.Parsing.Parser.#ctor(System.Collections.Generic.IEnumerable{CalcExpr.Parsing.Rules.IParserRule},CalcExpr.Tokenization.Tokenizer)
  - CalcExpr.Parsing.Parser.AddCache(System.Collections.Generic.IEnumerable{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Expressions.IExpression)
  - CalcExpr.Parsing.Parser.AddCache(System.String,CalcExpr.Expressions.IExpression)
  - CalcExpr.Parsing.Parser.AddGrammarRule(CalcExpr.Parsing.Rules.IParserRule,System.Int32)
  - CalcExpr.Parsing.Parser.Cache
  - CalcExpr.Parsing.Parser.ClearCache
  - CalcExpr.Parsing.Parser.ContainsCache(System.Collections.Generic.IEnumerable{CalcExpr.Tokenization.Tokens.IToken})
  - CalcExpr.Parsing.Parser.ContainsCache(System.String)
  - CalcExpr.Parsing.Parser.GetGrammarRule(System.Int32)
  - CalcExpr.Parsing.Parser.GetGrammarRule(System.String)
  - CalcExpr.Parsing.Parser.Grammar
  - CalcExpr.Parsing.Parser.GrammarContains(System.String)
  - CalcExpr.Parsing.Parser.Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken})
  - CalcExpr.Parsing.Parser.Parse(System.String)
  - CalcExpr.Parsing.Parser.RemoveCache(System.Collections.Generic.IEnumerable{CalcExpr.Tokenization.Tokens.IToken})
  - CalcExpr.Parsing.Parser.RemoveCache(System.String)
  - CalcExpr.Parsing.Parser.RemoveGrammarRule(System.String)
  - CalcExpr.Parsing.Parser.RemoveGrammarRuleAt(System.Int32)
  - CalcExpr.Parsing.Parser.ReplaceGrammarRule(CalcExpr.Parsing.Rules.IParserRule)
  langs:
  - csharp
  - vb
  name: Parser
  nameWithType: Parser
  fullName: CalcExpr.Parsing.Parser
  type: Class
  source:
    remote:
      path: src/CalcExpr/Parsing/ParserCache.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: Parser
    path: ../src/CalcExpr/Parsing/ParserCache.cs
    startLine: 7
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing
  summary: Create a <xref href="CalcExpr.Parsing.Parser" data-throw-if-not-resolved="false"></xref> using the specified grammar.
  example: []
  syntax:
    content: public class Parser
    content.vb: Public Class Parser
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: CalcExpr.Parsing.Parser.#ctor(System.Collections.Generic.IEnumerable{CalcExpr.Parsing.Rules.IParserRule},CalcExpr.Tokenization.Tokenizer)
  commentId: M:CalcExpr.Parsing.Parser.#ctor(System.Collections.Generic.IEnumerable{CalcExpr.Parsing.Rules.IParserRule},CalcExpr.Tokenization.Tokenizer)
  id: '#ctor(System.Collections.Generic.IEnumerable{CalcExpr.Parsing.Rules.IParserRule},CalcExpr.Tokenization.Tokenizer)'
  parent: CalcExpr.Parsing.Parser
  langs:
  - csharp
  - vb
  name: Parser(IEnumerable<IParserRule>, Tokenizer?)
  nameWithType: Parser.Parser(IEnumerable<IParserRule>, Tokenizer?)
  fullName: CalcExpr.Parsing.Parser.Parser(System.Collections.Generic.IEnumerable<CalcExpr.Parsing.Rules.IParserRule>, CalcExpr.Tokenization.Tokenizer?)
  type: Constructor
  source:
    remote:
      path: src/CalcExpr/Parsing/Parser.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: .ctor
    path: ../src/CalcExpr/Parsing/Parser.cs
    startLine: 18
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing
  summary: Create a <xref href="CalcExpr.Parsing.Parser" data-throw-if-not-resolved="false"></xref> using the specified grammar.
  example: []
  syntax:
    content: public Parser(IEnumerable<IParserRule> grammar, Tokenizer? tokenizer = null)
    parameters:
    - id: grammar
      type: System.Collections.Generic.IEnumerable{CalcExpr.Parsing.Rules.IParserRule}
      description: The specified <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> to be used as the grammar of the <xref href="CalcExpr.Parsing.Parser" data-throw-if-not-resolved="false"></xref>.
    - id: tokenizer
      type: CalcExpr.Tokenization.Tokenizer
    content.vb: Public Sub New(grammar As IEnumerable(Of IParserRule), tokenizer As Tokenizer = Nothing)
  overload: CalcExpr.Parsing.Parser.#ctor*
  nameWithType.vb: Parser.New(IEnumerable(Of IParserRule), Tokenizer)
  fullName.vb: CalcExpr.Parsing.Parser.New(System.Collections.Generic.IEnumerable(Of CalcExpr.Parsing.Rules.IParserRule), CalcExpr.Tokenization.Tokenizer)
  name.vb: New(IEnumerable(Of IParserRule), Tokenizer)
- uid: CalcExpr.Parsing.Parser.Grammar
  commentId: P:CalcExpr.Parsing.Parser.Grammar
  id: Grammar
  parent: CalcExpr.Parsing.Parser
  langs:
  - csharp
  - vb
  name: Grammar
  nameWithType: Parser.Grammar
  fullName: CalcExpr.Parsing.Parser.Grammar
  type: Property
  source:
    remote:
      path: src/CalcExpr/Parsing/Parser.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: Grammar
    path: ../src/CalcExpr/Parsing/Parser.cs
    startLine: 23
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing
  syntax:
    content: public IParserRule[] Grammar { get; }
    parameters: []
    return:
      type: CalcExpr.Parsing.Rules.IParserRule[]
    content.vb: Public ReadOnly Property Grammar As IParserRule()
  overload: CalcExpr.Parsing.Parser.Grammar*
- uid: CalcExpr.Parsing.Parser.#ctor
  commentId: M:CalcExpr.Parsing.Parser.#ctor
  id: '#ctor'
  parent: CalcExpr.Parsing.Parser
  langs:
  - csharp
  - vb
  name: Parser()
  nameWithType: Parser.Parser()
  fullName: CalcExpr.Parsing.Parser.Parser()
  type: Constructor
  source:
    remote:
      path: src/CalcExpr/Parsing/Parser.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: .ctor
    path: ../src/CalcExpr/Parsing/Parser.cs
    startLine: 28
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing
  summary: Creates a <xref href="CalcExpr.Parsing.Parser" data-throw-if-not-resolved="false"></xref> with the default grammar and default tokenizer.
  example: []
  syntax:
    content: public Parser()
    content.vb: Public Sub New()
  overload: CalcExpr.Parsing.Parser.#ctor*
  nameWithType.vb: Parser.New()
  fullName.vb: CalcExpr.Parsing.Parser.New()
  name.vb: New()
- uid: CalcExpr.Parsing.Parser.#ctor(CalcExpr.Tokenization.Tokenizer)
  commentId: M:CalcExpr.Parsing.Parser.#ctor(CalcExpr.Tokenization.Tokenizer)
  id: '#ctor(CalcExpr.Tokenization.Tokenizer)'
  parent: CalcExpr.Parsing.Parser
  langs:
  - csharp
  - vb
  name: Parser(Tokenizer)
  nameWithType: Parser.Parser(Tokenizer)
  fullName: CalcExpr.Parsing.Parser.Parser(CalcExpr.Tokenization.Tokenizer)
  type: Constructor
  source:
    remote:
      path: src/CalcExpr/Parsing/Parser.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: .ctor
    path: ../src/CalcExpr/Parsing/Parser.cs
    startLine: 33
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing
  summary: Creates a <xref href="CalcExpr.Parsing.Parser" data-throw-if-not-resolved="false"></xref> with the default grammar.
  example: []
  syntax:
    content: public Parser(Tokenizer tokenizer)
    parameters:
    - id: tokenizer
      type: CalcExpr.Tokenization.Tokenizer
    content.vb: Public Sub New(tokenizer As Tokenizer)
  overload: CalcExpr.Parsing.Parser.#ctor*
  nameWithType.vb: Parser.New(Tokenizer)
  fullName.vb: CalcExpr.Parsing.Parser.New(CalcExpr.Tokenization.Tokenizer)
  name.vb: New(Tokenizer)
- uid: CalcExpr.Parsing.Parser.Parse(System.String)
  commentId: M:CalcExpr.Parsing.Parser.Parse(System.String)
  id: Parse(System.String)
  parent: CalcExpr.Parsing.Parser
  langs:
  - csharp
  - vb
  name: Parse(string)
  nameWithType: Parser.Parse(string)
  fullName: CalcExpr.Parsing.Parser.Parse(string)
  type: Method
  source:
    remote:
      path: src/CalcExpr/Parsing/Parser.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: Parse
    path: ../src/CalcExpr/Parsing/Parser.cs
    startLine: 42
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing
  summary: Parses an expression <xref href="System.String" data-throw-if-not-resolved="false"></xref> into an <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public IExpression Parse(string input)
    parameters:
    - id: input
      type: System.String
      description: The expression <xref href="System.String" data-throw-if-not-resolved="false"></xref> to parse.
    return:
      type: CalcExpr.Expressions.IExpression
      description: An <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref> parsed from the specified expression <xref href="System.String" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function Parse(input As String) As IExpression
  overload: CalcExpr.Parsing.Parser.Parse*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.Exception
    commentId: T:System.Exception
    description: ''
  nameWithType.vb: Parser.Parse(String)
  fullName.vb: CalcExpr.Parsing.Parser.Parse(String)
  name.vb: Parse(String)
- uid: CalcExpr.Parsing.Parser.Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken})
  commentId: M:CalcExpr.Parsing.Parser.Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken})
  id: Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken})
  parent: CalcExpr.Parsing.Parser
  langs:
  - csharp
  - vb
  name: Parse(ImmutableArray<IToken>)
  nameWithType: Parser.Parse(ImmutableArray<IToken>)
  fullName: CalcExpr.Parsing.Parser.Parse(System.Collections.Immutable.ImmutableArray<CalcExpr.Tokenization.Tokens.IToken>)
  type: Method
  source:
    remote:
      path: src/CalcExpr/Parsing/Parser.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: Parse
    path: ../src/CalcExpr/Parsing/Parser.cs
    startLine: 59
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing
  summary: Parses a tokenized expression into an <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public IExpression Parse(ImmutableArray<IToken> input)
    parameters:
    - id: input
      type: System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken}
      description: The tokenized expression to parse.
    return:
      type: CalcExpr.Expressions.IExpression
      description: An <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref> parsed from the specified expression <xref href="System.String" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function Parse(input As ImmutableArray(Of IToken)) As IExpression
  overload: CalcExpr.Parsing.Parser.Parse*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: ''
  nameWithType.vb: Parser.Parse(ImmutableArray(Of IToken))
  fullName.vb: CalcExpr.Parsing.Parser.Parse(System.Collections.Immutable.ImmutableArray(Of CalcExpr.Tokenization.Tokens.IToken))
  name.vb: Parse(ImmutableArray(Of IToken))
- uid: CalcExpr.Parsing.Parser.AddGrammarRule(CalcExpr.Parsing.Rules.IParserRule,System.Int32)
  commentId: M:CalcExpr.Parsing.Parser.AddGrammarRule(CalcExpr.Parsing.Rules.IParserRule,System.Int32)
  id: AddGrammarRule(CalcExpr.Parsing.Rules.IParserRule,System.Int32)
  parent: CalcExpr.Parsing.Parser
  langs:
  - csharp
  - vb
  name: AddGrammarRule(IParserRule, int)
  nameWithType: Parser.AddGrammarRule(IParserRule, int)
  fullName: CalcExpr.Parsing.Parser.AddGrammarRule(CalcExpr.Parsing.Rules.IParserRule, int)
  type: Method
  source:
    remote:
      path: src/CalcExpr/Parsing/Parser.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: AddGrammarRule
    path: ../src/CalcExpr/Parsing/Parser.cs
    startLine: 84
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing
  summary: Add <xref href="CalcExpr.Parsing.Rules.IParserRule" data-throw-if-not-resolved="false"></xref> to the grammar of the <xref href="CalcExpr.Parsing.Parser" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public bool AddGrammarRule(IParserRule rule, int index = -1)
    parameters:
    - id: rule
      type: CalcExpr.Parsing.Rules.IParserRule
      description: The <xref href="CalcExpr.Parsing.Rules.IParserRule" data-throw-if-not-resolved="false"></xref> to be added to the grammar.
    - id: index
      type: System.Int32
      description: The index to put the <xref href="CalcExpr.Parsing.Rules.IParserRule" data-throw-if-not-resolved="false"></xref> in the grammar.
    return:
      type: System.Boolean
      description: >-
        <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the <xref href="CalcExpr.Parsing.Rules.IParserRule" data-throw-if-not-resolved="false"></xref> was successfully added to the grammar; otherwise, 

        <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Function AddGrammarRule(rule As IParserRule, index As Integer = -1) As Boolean
  overload: CalcExpr.Parsing.Parser.AddGrammarRule*
  nameWithType.vb: Parser.AddGrammarRule(IParserRule, Integer)
  fullName.vb: CalcExpr.Parsing.Parser.AddGrammarRule(CalcExpr.Parsing.Rules.IParserRule, Integer)
  name.vb: AddGrammarRule(IParserRule, Integer)
- uid: CalcExpr.Parsing.Parser.RemoveGrammarRule(System.String)
  commentId: M:CalcExpr.Parsing.Parser.RemoveGrammarRule(System.String)
  id: RemoveGrammarRule(System.String)
  parent: CalcExpr.Parsing.Parser
  langs:
  - csharp
  - vb
  name: RemoveGrammarRule(string)
  nameWithType: Parser.RemoveGrammarRule(string)
  fullName: CalcExpr.Parsing.Parser.RemoveGrammarRule(string)
  type: Method
  source:
    remote:
      path: src/CalcExpr/Parsing/Parser.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: RemoveGrammarRule
    path: ../src/CalcExpr/Parsing/Parser.cs
    startLine: 116
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing
  summary: Removes the <xref href="CalcExpr.Parsing.Rules.IParserRule" data-throw-if-not-resolved="false"></xref> with the specified name from the grammar of the <xref href="CalcExpr.Parsing.Parser" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public int RemoveGrammarRule(string name)
    parameters:
    - id: name
      type: System.String
      description: The name of the <xref href="CalcExpr.Parsing.Rules.IParserRule" data-throw-if-not-resolved="false"></xref> to be removed.
    return:
      type: System.Int32
      description: The index of the removed rule if the <xref href="CalcExpr.Parsing.Rules.IParserRule" data-throw-if-not-resolved="false"></xref> was successfully removed; otherwise, -1.
    content.vb: Public Function RemoveGrammarRule(name As String) As Integer
  overload: CalcExpr.Parsing.Parser.RemoveGrammarRule*
  nameWithType.vb: Parser.RemoveGrammarRule(String)
  fullName.vb: CalcExpr.Parsing.Parser.RemoveGrammarRule(String)
  name.vb: RemoveGrammarRule(String)
- uid: CalcExpr.Parsing.Parser.RemoveGrammarRuleAt(System.Int32)
  commentId: M:CalcExpr.Parsing.Parser.RemoveGrammarRuleAt(System.Int32)
  id: RemoveGrammarRuleAt(System.Int32)
  parent: CalcExpr.Parsing.Parser
  langs:
  - csharp
  - vb
  name: RemoveGrammarRuleAt(int)
  nameWithType: Parser.RemoveGrammarRuleAt(int)
  fullName: CalcExpr.Parsing.Parser.RemoveGrammarRuleAt(int)
  type: Method
  source:
    remote:
      path: src/CalcExpr/Parsing/Parser.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: RemoveGrammarRuleAt
    path: ../src/CalcExpr/Parsing/Parser.cs
    startLine: 139
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing
  summary: Removes the <xref href="CalcExpr.Parsing.Rules.IParserRule" data-throw-if-not-resolved="false"></xref> at the specified index from the grammar of the <xref href="CalcExpr.Parsing.Parser" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public bool RemoveGrammarRuleAt(int index)
    parameters:
    - id: index
      type: System.Int32
      description: The index for the <xref href="CalcExpr.Parsing.Rules.IParserRule" data-throw-if-not-resolved="false"></xref> to be removed.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the <xref href="CalcExpr.Parsing.Rules.IParserRule" data-throw-if-not-resolved="false"></xref> was successfully removed; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Function RemoveGrammarRuleAt(index As Integer) As Boolean
  overload: CalcExpr.Parsing.Parser.RemoveGrammarRuleAt*
  nameWithType.vb: Parser.RemoveGrammarRuleAt(Integer)
  fullName.vb: CalcExpr.Parsing.Parser.RemoveGrammarRuleAt(Integer)
  name.vb: RemoveGrammarRuleAt(Integer)
- uid: CalcExpr.Parsing.Parser.ReplaceGrammarRule(CalcExpr.Parsing.Rules.IParserRule)
  commentId: M:CalcExpr.Parsing.Parser.ReplaceGrammarRule(CalcExpr.Parsing.Rules.IParserRule)
  id: ReplaceGrammarRule(CalcExpr.Parsing.Rules.IParserRule)
  parent: CalcExpr.Parsing.Parser
  langs:
  - csharp
  - vb
  name: ReplaceGrammarRule(IParserRule)
  nameWithType: Parser.ReplaceGrammarRule(IParserRule)
  fullName: CalcExpr.Parsing.Parser.ReplaceGrammarRule(CalcExpr.Parsing.Rules.IParserRule)
  type: Method
  source:
    remote:
      path: src/CalcExpr/Parsing/Parser.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: ReplaceGrammarRule
    path: ../src/CalcExpr/Parsing/Parser.cs
    startLine: 160
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing
  summary: Replaces the current <xref href="CalcExpr.Parsing.Rules.IParserRule" data-throw-if-not-resolved="false"></xref> with the specified name with a new <xref href="CalcExpr.Parsing.Rules.IParserRule" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public int ReplaceGrammarRule(IParserRule newRule)
    parameters:
    - id: newRule
      type: CalcExpr.Parsing.Rules.IParserRule
      description: The new rule to replace the old rule.
    return:
      type: System.Int32
      description: The index of the replaced rule if the <xref href="CalcExpr.Parsing.Rules.IParserRule" data-throw-if-not-resolved="false"></xref> was successfully replaced; otherwise, -1.
    content.vb: Public Function ReplaceGrammarRule(newRule As IParserRule) As Integer
  overload: CalcExpr.Parsing.Parser.ReplaceGrammarRule*
- uid: CalcExpr.Parsing.Parser.GrammarContains(System.String)
  commentId: M:CalcExpr.Parsing.Parser.GrammarContains(System.String)
  id: GrammarContains(System.String)
  parent: CalcExpr.Parsing.Parser
  langs:
  - csharp
  - vb
  name: GrammarContains(string)
  nameWithType: Parser.GrammarContains(string)
  fullName: CalcExpr.Parsing.Parser.GrammarContains(string)
  type: Method
  source:
    remote:
      path: src/CalcExpr/Parsing/Parser.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: GrammarContains
    path: ../src/CalcExpr/Parsing/Parser.cs
    startLine: 181
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing
  summary: Determines whether a rule with the specified name is in the grammar of the <xref href="CalcExpr.Parsing.Parser" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public bool GrammarContains(string name)
    parameters:
    - id: name
      type: System.String
      description: The name of the <xref href="CalcExpr.Parsing.Rules.IParserRule" data-throw-if-not-resolved="false"></xref> to find.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the <xref href="CalcExpr.Parsing.Rules.IParserRule" data-throw-if-not-resolved="false"></xref> was successfully found; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Function GrammarContains(name As String) As Boolean
  overload: CalcExpr.Parsing.Parser.GrammarContains*
  nameWithType.vb: Parser.GrammarContains(String)
  fullName.vb: CalcExpr.Parsing.Parser.GrammarContains(String)
  name.vb: GrammarContains(String)
- uid: CalcExpr.Parsing.Parser.GetGrammarRule(System.String)
  commentId: M:CalcExpr.Parsing.Parser.GetGrammarRule(System.String)
  id: GetGrammarRule(System.String)
  parent: CalcExpr.Parsing.Parser
  langs:
  - csharp
  - vb
  name: GetGrammarRule(string)
  nameWithType: Parser.GetGrammarRule(string)
  fullName: CalcExpr.Parsing.Parser.GetGrammarRule(string)
  type: Method
  source:
    remote:
      path: src/CalcExpr/Parsing/Parser.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: GetGrammarRule
    path: ../src/CalcExpr/Parsing/Parser.cs
    startLine: 195
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing
  summary: Gets a <xref href="CalcExpr.Parsing.Rules.IParserRule" data-throw-if-not-resolved="false"></xref> from the grammar based on the specified name.
  example: []
  syntax:
    content: public IParserRule? GetGrammarRule(string name)
    parameters:
    - id: name
      type: System.String
      description: The name of the grammar rule.
    return:
      type: CalcExpr.Parsing.Rules.IParserRule
      description: The <xref href="CalcExpr.Parsing.Rules.IParserRule" data-throw-if-not-resolved="false"></xref> in the grammar with the name <code class="paramref">name</code>.
    content.vb: Public Function GetGrammarRule(name As String) As IParserRule
  overload: CalcExpr.Parsing.Parser.GetGrammarRule*
  nameWithType.vb: Parser.GetGrammarRule(String)
  fullName.vb: CalcExpr.Parsing.Parser.GetGrammarRule(String)
  name.vb: GetGrammarRule(String)
- uid: CalcExpr.Parsing.Parser.GetGrammarRule(System.Int32)
  commentId: M:CalcExpr.Parsing.Parser.GetGrammarRule(System.Int32)
  id: GetGrammarRule(System.Int32)
  parent: CalcExpr.Parsing.Parser
  langs:
  - csharp
  - vb
  name: GetGrammarRule(int)
  nameWithType: Parser.GetGrammarRule(int)
  fullName: CalcExpr.Parsing.Parser.GetGrammarRule(int)
  type: Method
  source:
    remote:
      path: src/CalcExpr/Parsing/Parser.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: GetGrammarRule
    path: ../src/CalcExpr/Parsing/Parser.cs
    startLine: 210
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing
  summary: Gets a <xref href="CalcExpr.Parsing.Rules.IParserRule" data-throw-if-not-resolved="false"></xref> from the grammar based on the specified index.
  example: []
  syntax:
    content: public IParserRule? GetGrammarRule(int index)
    parameters:
    - id: index
      type: System.Int32
      description: The index of the grammar rule.
    return:
      type: CalcExpr.Parsing.Rules.IParserRule
      description: The <xref href="CalcExpr.Parsing.Rules.IParserRule" data-throw-if-not-resolved="false"></xref> in the grammar at the index of <code class="paramref">index</code>.
    content.vb: Public Function GetGrammarRule(index As Integer) As IParserRule
  overload: CalcExpr.Parsing.Parser.GetGrammarRule*
  nameWithType.vb: Parser.GetGrammarRule(Integer)
  fullName.vb: CalcExpr.Parsing.Parser.GetGrammarRule(Integer)
  name.vb: GetGrammarRule(Integer)
- uid: CalcExpr.Parsing.Parser.Cache
  commentId: P:CalcExpr.Parsing.Parser.Cache
  id: Cache
  parent: CalcExpr.Parsing.Parser
  langs:
  - csharp
  - vb
  name: Cache
  nameWithType: Parser.Cache
  fullName: CalcExpr.Parsing.Parser.Cache
  type: Property
  source:
    remote:
      path: src/CalcExpr/Parsing/ParserCache.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: Cache
    path: ../src/CalcExpr/Parsing/ParserCache.cs
    startLine: 11
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing
  syntax:
    content: public ImmutableArray<IToken>[] Cache { get; }
    parameters: []
    return:
      type: System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken}[]
    content.vb: Public ReadOnly Property Cache As ImmutableArray(Of IToken)()
  overload: CalcExpr.Parsing.Parser.Cache*
- uid: CalcExpr.Parsing.Parser.ContainsCache(System.String)
  commentId: M:CalcExpr.Parsing.Parser.ContainsCache(System.String)
  id: ContainsCache(System.String)
  parent: CalcExpr.Parsing.Parser
  langs:
  - csharp
  - vb
  name: ContainsCache(string)
  nameWithType: Parser.ContainsCache(string)
  fullName: CalcExpr.Parsing.Parser.ContainsCache(string)
  type: Method
  source:
    remote:
      path: src/CalcExpr/Parsing/ParserCache.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: ContainsCache
    path: ../src/CalcExpr/Parsing/ParserCache.cs
    startLine: 21
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing
  summary: Determines whether the cache of the <xref href="CalcExpr.Parsing.Parser" data-throw-if-not-resolved="false"></xref> contains a specified expression <xref href="System.String" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public bool ContainsCache(string expression)
    parameters:
    - id: expression
      type: System.String
      description: The expression to locate in the cache.
    return:
      type: System.Boolean
      description: >-
        <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the cache contains an entry with the specified expression; otherwise, 

        <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Function ContainsCache(expression As String) As Boolean
  overload: CalcExpr.Parsing.Parser.ContainsCache*
  nameWithType.vb: Parser.ContainsCache(String)
  fullName.vb: CalcExpr.Parsing.Parser.ContainsCache(String)
  name.vb: ContainsCache(String)
- uid: CalcExpr.Parsing.Parser.ContainsCache(System.Collections.Generic.IEnumerable{CalcExpr.Tokenization.Tokens.IToken})
  commentId: M:CalcExpr.Parsing.Parser.ContainsCache(System.Collections.Generic.IEnumerable{CalcExpr.Tokenization.Tokens.IToken})
  id: ContainsCache(System.Collections.Generic.IEnumerable{CalcExpr.Tokenization.Tokens.IToken})
  parent: CalcExpr.Parsing.Parser
  langs:
  - csharp
  - vb
  name: ContainsCache(IEnumerable<IToken>)
  nameWithType: Parser.ContainsCache(IEnumerable<IToken>)
  fullName: CalcExpr.Parsing.Parser.ContainsCache(System.Collections.Generic.IEnumerable<CalcExpr.Tokenization.Tokens.IToken>)
  type: Method
  source:
    remote:
      path: src/CalcExpr/Parsing/ParserCache.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: ContainsCache
    path: ../src/CalcExpr/Parsing/ParserCache.cs
    startLine: 32
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing
  summary: Determines whether the cache of the <xref href="CalcExpr.Parsing.Parser" data-throw-if-not-resolved="false"></xref> contains a specified token sequence.
  example: []
  syntax:
    content: public bool ContainsCache(IEnumerable<IToken> expression)
    parameters:
    - id: expression
      type: System.Collections.Generic.IEnumerable{CalcExpr.Tokenization.Tokens.IToken}
      description: The expression to locate in the cache.
    return:
      type: System.Boolean
      description: >-
        <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the cache contains an entry with the specified expression; otherwise, 

        <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Function ContainsCache(expression As IEnumerable(Of IToken)) As Boolean
  overload: CalcExpr.Parsing.Parser.ContainsCache*
  nameWithType.vb: Parser.ContainsCache(IEnumerable(Of IToken))
  fullName.vb: CalcExpr.Parsing.Parser.ContainsCache(System.Collections.Generic.IEnumerable(Of CalcExpr.Tokenization.Tokens.IToken))
  name.vb: ContainsCache(IEnumerable(Of IToken))
- uid: CalcExpr.Parsing.Parser.AddCache(System.String,CalcExpr.Expressions.IExpression)
  commentId: M:CalcExpr.Parsing.Parser.AddCache(System.String,CalcExpr.Expressions.IExpression)
  id: AddCache(System.String,CalcExpr.Expressions.IExpression)
  parent: CalcExpr.Parsing.Parser
  langs:
  - csharp
  - vb
  name: AddCache(string, IExpression)
  nameWithType: Parser.AddCache(string, IExpression)
  fullName: CalcExpr.Parsing.Parser.AddCache(string, CalcExpr.Expressions.IExpression)
  type: Method
  source:
    remote:
      path: src/CalcExpr/Parsing/ParserCache.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: AddCache
    path: ../src/CalcExpr/Parsing/ParserCache.cs
    startLine: 44
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing
  summary: Add expression <xref href="System.String" data-throw-if-not-resolved="false"></xref> to the cache of the <xref href="CalcExpr.Parsing.Parser" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public bool AddCache(string key, IExpression value)
    parameters:
    - id: key
      type: System.String
      description: The expression <xref href="System.String" data-throw-if-not-resolved="false"></xref> of the cached <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref>.
    - id: value
      type: CalcExpr.Expressions.IExpression
      description: The cached <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: >-
        <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref> was successfully added to the cache; otherwise, 

        <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Function AddCache(key As String, value As IExpression) As Boolean
  overload: CalcExpr.Parsing.Parser.AddCache*
  nameWithType.vb: Parser.AddCache(String, IExpression)
  fullName.vb: CalcExpr.Parsing.Parser.AddCache(String, CalcExpr.Expressions.IExpression)
  name.vb: AddCache(String, IExpression)
- uid: CalcExpr.Parsing.Parser.AddCache(System.Collections.Generic.IEnumerable{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Expressions.IExpression)
  commentId: M:CalcExpr.Parsing.Parser.AddCache(System.Collections.Generic.IEnumerable{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Expressions.IExpression)
  id: AddCache(System.Collections.Generic.IEnumerable{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Expressions.IExpression)
  parent: CalcExpr.Parsing.Parser
  langs:
  - csharp
  - vb
  name: AddCache(IEnumerable<IToken>, IExpression)
  nameWithType: Parser.AddCache(IEnumerable<IToken>, IExpression)
  fullName: CalcExpr.Parsing.Parser.AddCache(System.Collections.Generic.IEnumerable<CalcExpr.Tokenization.Tokens.IToken>, CalcExpr.Expressions.IExpression)
  type: Method
  source:
    remote:
      path: src/CalcExpr/Parsing/ParserCache.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: AddCache
    path: ../src/CalcExpr/Parsing/ParserCache.cs
    startLine: 56
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing
  summary: Add a token sequence to the cache of the <xref href="CalcExpr.Parsing.Parser" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public bool AddCache(IEnumerable<IToken> key, IExpression value)
    parameters:
    - id: key
      type: System.Collections.Generic.IEnumerable{CalcExpr.Tokenization.Tokens.IToken}
      description: The token sequence of the cached <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref>.
    - id: value
      type: CalcExpr.Expressions.IExpression
      description: The cached <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: >-
        <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref> was successfully added to the cache; otherwise, 

        <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Function AddCache(key As IEnumerable(Of IToken), value As IExpression) As Boolean
  overload: CalcExpr.Parsing.Parser.AddCache*
  nameWithType.vb: Parser.AddCache(IEnumerable(Of IToken), IExpression)
  fullName.vb: CalcExpr.Parsing.Parser.AddCache(System.Collections.Generic.IEnumerable(Of CalcExpr.Tokenization.Tokens.IToken), CalcExpr.Expressions.IExpression)
  name.vb: AddCache(IEnumerable(Of IToken), IExpression)
- uid: CalcExpr.Parsing.Parser.RemoveCache(System.String)
  commentId: M:CalcExpr.Parsing.Parser.RemoveCache(System.String)
  id: RemoveCache(System.String)
  parent: CalcExpr.Parsing.Parser
  langs:
  - csharp
  - vb
  name: RemoveCache(string)
  nameWithType: Parser.RemoveCache(string)
  fullName: CalcExpr.Parsing.Parser.RemoveCache(string)
  type: Method
  source:
    remote:
      path: src/CalcExpr/Parsing/ParserCache.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: RemoveCache
    path: ../src/CalcExpr/Parsing/ParserCache.cs
    startLine: 77
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing
  summary: Removes a cached <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref> based on the specified expression <xref href="System.String" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public bool RemoveCache(string expression)
    parameters:
    - id: expression
      type: System.String
      description: The expression <xref href="System.String" data-throw-if-not-resolved="false"></xref> of the cached <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: >-
        <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref> was successfully removed from the cache; otherwise,

        <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Function RemoveCache(expression As String) As Boolean
  overload: CalcExpr.Parsing.Parser.RemoveCache*
  nameWithType.vb: Parser.RemoveCache(String)
  fullName.vb: CalcExpr.Parsing.Parser.RemoveCache(String)
  name.vb: RemoveCache(String)
- uid: CalcExpr.Parsing.Parser.RemoveCache(System.Collections.Generic.IEnumerable{CalcExpr.Tokenization.Tokens.IToken})
  commentId: M:CalcExpr.Parsing.Parser.RemoveCache(System.Collections.Generic.IEnumerable{CalcExpr.Tokenization.Tokens.IToken})
  id: RemoveCache(System.Collections.Generic.IEnumerable{CalcExpr.Tokenization.Tokens.IToken})
  parent: CalcExpr.Parsing.Parser
  langs:
  - csharp
  - vb
  name: RemoveCache(IEnumerable<IToken>)
  nameWithType: Parser.RemoveCache(IEnumerable<IToken>)
  fullName: CalcExpr.Parsing.Parser.RemoveCache(System.Collections.Generic.IEnumerable<CalcExpr.Tokenization.Tokens.IToken>)
  type: Method
  source:
    remote:
      path: src/CalcExpr/Parsing/ParserCache.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: RemoveCache
    path: ../src/CalcExpr/Parsing/ParserCache.cs
    startLine: 88
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing
  summary: Removes a cached <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref> based on the specified token sequence.
  example: []
  syntax:
    content: public bool RemoveCache(IEnumerable<IToken> expression)
    parameters:
    - id: expression
      type: System.Collections.Generic.IEnumerable{CalcExpr.Tokenization.Tokens.IToken}
      description: The token sequence of the cached <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: >-
        <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref> was successfully removed from the cache; otherwise,

        <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Function RemoveCache(expression As IEnumerable(Of IToken)) As Boolean
  overload: CalcExpr.Parsing.Parser.RemoveCache*
  nameWithType.vb: Parser.RemoveCache(IEnumerable(Of IToken))
  fullName.vb: CalcExpr.Parsing.Parser.RemoveCache(System.Collections.Generic.IEnumerable(Of CalcExpr.Tokenization.Tokens.IToken))
  name.vb: RemoveCache(IEnumerable(Of IToken))
- uid: CalcExpr.Parsing.Parser.ClearCache
  commentId: M:CalcExpr.Parsing.Parser.ClearCache
  id: ClearCache
  parent: CalcExpr.Parsing.Parser
  langs:
  - csharp
  - vb
  name: ClearCache()
  nameWithType: Parser.ClearCache()
  fullName: CalcExpr.Parsing.Parser.ClearCache()
  type: Method
  source:
    remote:
      path: src/CalcExpr/Parsing/ParserCache.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: ClearCache
    path: ../src/CalcExpr/Parsing/ParserCache.cs
    startLine: 101
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing
  summary: Clears the cache of the parser.
  example: []
  syntax:
    content: public bool ClearCache()
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the cache was successfully cleared; otherwise <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Function ClearCache() As Boolean
  overload: CalcExpr.Parsing.Parser.ClearCache*
references:
- uid: CalcExpr.Parsing.Parser
  commentId: T:CalcExpr.Parsing.Parser
  parent: CalcExpr.Parsing
  href: CalcExpr.Parsing.Parser.html
  name: Parser
  nameWithType: Parser
  fullName: CalcExpr.Parsing.Parser
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: CalcExpr.Parsing
  commentId: N:CalcExpr.Parsing
  href: CalcExpr.html
  name: CalcExpr.Parsing
  nameWithType: CalcExpr.Parsing
  fullName: CalcExpr.Parsing
  spec.csharp:
  - uid: CalcExpr
    name: CalcExpr
    href: CalcExpr.html
  - name: .
  - uid: CalcExpr.Parsing
    name: Parsing
    href: CalcExpr.Parsing.html
  spec.vb:
  - uid: CalcExpr
    name: CalcExpr
    href: CalcExpr.html
  - name: .
  - uid: CalcExpr.Parsing
    name: Parsing
    href: CalcExpr.Parsing.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: CalcExpr.Parsing.Parser.#ctor*
  commentId: Overload:CalcExpr.Parsing.Parser.#ctor
  href: CalcExpr.Parsing.Parser.html#CalcExpr_Parsing_Parser__ctor_System_Collections_Generic_IEnumerable_CalcExpr_Parsing_Rules_IParserRule__CalcExpr_Tokenization_Tokenizer_
  name: Parser
  nameWithType: Parser.Parser
  fullName: CalcExpr.Parsing.Parser.Parser
  nameWithType.vb: Parser.New
  fullName.vb: CalcExpr.Parsing.Parser.New
  name.vb: New
- uid: System.Collections.Generic.IEnumerable{CalcExpr.Parsing.Rules.IParserRule}
  commentId: T:System.Collections.Generic.IEnumerable{CalcExpr.Parsing.Rules.IParserRule}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<IParserRule>
  nameWithType: IEnumerable<IParserRule>
  fullName: System.Collections.Generic.IEnumerable<CalcExpr.Parsing.Rules.IParserRule>
  nameWithType.vb: IEnumerable(Of IParserRule)
  fullName.vb: System.Collections.Generic.IEnumerable(Of CalcExpr.Parsing.Rules.IParserRule)
  name.vb: IEnumerable(Of IParserRule)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: CalcExpr.Parsing.Rules.IParserRule
    name: IParserRule
    href: CalcExpr.Parsing.Rules.IParserRule.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: CalcExpr.Parsing.Rules.IParserRule
    name: IParserRule
    href: CalcExpr.Parsing.Rules.IParserRule.html
  - name: )
- uid: CalcExpr.Tokenization.Tokenizer
  commentId: T:CalcExpr.Tokenization.Tokenizer
  parent: CalcExpr.Tokenization
  href: CalcExpr.Tokenization.Tokenizer.html
  name: Tokenizer
  nameWithType: Tokenizer
  fullName: CalcExpr.Tokenization.Tokenizer
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: CalcExpr.Tokenization
  commentId: N:CalcExpr.Tokenization
  href: CalcExpr.html
  name: CalcExpr.Tokenization
  nameWithType: CalcExpr.Tokenization
  fullName: CalcExpr.Tokenization
  spec.csharp:
  - uid: CalcExpr
    name: CalcExpr
    href: CalcExpr.html
  - name: .
  - uid: CalcExpr.Tokenization
    name: Tokenization
    href: CalcExpr.Tokenization.html
  spec.vb:
  - uid: CalcExpr
    name: CalcExpr
    href: CalcExpr.html
  - name: .
  - uid: CalcExpr.Tokenization
    name: Tokenization
    href: CalcExpr.Tokenization.html
- uid: CalcExpr.Parsing.Parser.Grammar*
  commentId: Overload:CalcExpr.Parsing.Parser.Grammar
  href: CalcExpr.Parsing.Parser.html#CalcExpr_Parsing_Parser_Grammar
  name: Grammar
  nameWithType: Parser.Grammar
  fullName: CalcExpr.Parsing.Parser.Grammar
- uid: CalcExpr.Parsing.Rules.IParserRule[]
  isExternal: true
  href: CalcExpr.Parsing.Rules.IParserRule.html
  name: IParserRule[]
  nameWithType: IParserRule[]
  fullName: CalcExpr.Parsing.Rules.IParserRule[]
  nameWithType.vb: IParserRule()
  fullName.vb: CalcExpr.Parsing.Rules.IParserRule()
  name.vb: IParserRule()
  spec.csharp:
  - uid: CalcExpr.Parsing.Rules.IParserRule
    name: IParserRule
    href: CalcExpr.Parsing.Rules.IParserRule.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: CalcExpr.Parsing.Rules.IParserRule
    name: IParserRule
    href: CalcExpr.Parsing.Rules.IParserRule.html
  - name: (
  - name: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: CalcExpr.Expressions.IExpression
  commentId: T:CalcExpr.Expressions.IExpression
  parent: CalcExpr.Expressions
  href: CalcExpr.Expressions.IExpression.html
  name: IExpression
  nameWithType: IExpression
  fullName: CalcExpr.Expressions.IExpression
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentnullexception
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.exception
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: CalcExpr.Parsing.Parser.Parse*
  commentId: Overload:CalcExpr.Parsing.Parser.Parse
  href: CalcExpr.Parsing.Parser.html#CalcExpr_Parsing_Parser_Parse_System_String_
  name: Parse
  nameWithType: Parser.Parse
  fullName: CalcExpr.Parsing.Parser.Parse
- uid: CalcExpr.Expressions
  commentId: N:CalcExpr.Expressions
  href: CalcExpr.html
  name: CalcExpr.Expressions
  nameWithType: CalcExpr.Expressions
  fullName: CalcExpr.Expressions
  spec.csharp:
  - uid: CalcExpr
    name: CalcExpr
    href: CalcExpr.html
  - name: .
  - uid: CalcExpr.Expressions
    name: Expressions
    href: CalcExpr.Expressions.html
  spec.vb:
  - uid: CalcExpr
    name: CalcExpr
    href: CalcExpr.html
  - name: .
  - uid: CalcExpr.Expressions
    name: Expressions
    href: CalcExpr.Expressions.html
- uid: System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken}
  commentId: T:System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken}
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.ImmutableArray`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  name: ImmutableArray<IToken>
  nameWithType: ImmutableArray<IToken>
  fullName: System.Collections.Immutable.ImmutableArray<CalcExpr.Tokenization.Tokens.IToken>
  nameWithType.vb: ImmutableArray(Of IToken)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of CalcExpr.Tokenization.Tokens.IToken)
  name.vb: ImmutableArray(Of IToken)
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  - name: <
  - uid: CalcExpr.Tokenization.Tokens.IToken
    name: IToken
    href: CalcExpr.Tokenization.Tokens.IToken.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  - name: (
  - name: Of
  - name: " "
  - uid: CalcExpr.Tokenization.Tokens.IToken
    name: IToken
    href: CalcExpr.Tokenization.Tokens.IToken.html
  - name: )
- uid: System.Collections.Immutable.ImmutableArray`1
  commentId: T:System.Collections.Immutable.ImmutableArray`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  name: ImmutableArray<T>
  nameWithType: ImmutableArray<T>
  fullName: System.Collections.Immutable.ImmutableArray<T>
  nameWithType.vb: ImmutableArray(Of T)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T)
  name.vb: ImmutableArray(Of T)
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Immutable
  commentId: N:System.Collections.Immutable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Immutable
  nameWithType: System.Collections.Immutable
  fullName: System.Collections.Immutable
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Immutable
    name: Immutable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Immutable
    name: Immutable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable
- uid: CalcExpr.Parsing.Rules.IParserRule
  commentId: T:CalcExpr.Parsing.Rules.IParserRule
  parent: CalcExpr.Parsing.Rules
  href: CalcExpr.Parsing.Rules.IParserRule.html
  name: IParserRule
  nameWithType: IParserRule
  fullName: CalcExpr.Parsing.Rules.IParserRule
- uid: CalcExpr.Parsing.Parser.AddGrammarRule*
  commentId: Overload:CalcExpr.Parsing.Parser.AddGrammarRule
  href: CalcExpr.Parsing.Parser.html#CalcExpr_Parsing_Parser_AddGrammarRule_CalcExpr_Parsing_Rules_IParserRule_System_Int32_
  name: AddGrammarRule
  nameWithType: Parser.AddGrammarRule
  fullName: CalcExpr.Parsing.Parser.AddGrammarRule
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: CalcExpr.Parsing.Rules
  commentId: N:CalcExpr.Parsing.Rules
  href: CalcExpr.html
  name: CalcExpr.Parsing.Rules
  nameWithType: CalcExpr.Parsing.Rules
  fullName: CalcExpr.Parsing.Rules
  spec.csharp:
  - uid: CalcExpr
    name: CalcExpr
    href: CalcExpr.html
  - name: .
  - uid: CalcExpr.Parsing
    name: Parsing
    href: CalcExpr.Parsing.html
  - name: .
  - uid: CalcExpr.Parsing.Rules
    name: Rules
    href: CalcExpr.Parsing.Rules.html
  spec.vb:
  - uid: CalcExpr
    name: CalcExpr
    href: CalcExpr.html
  - name: .
  - uid: CalcExpr.Parsing
    name: Parsing
    href: CalcExpr.Parsing.html
  - name: .
  - uid: CalcExpr.Parsing.Rules
    name: Rules
    href: CalcExpr.Parsing.Rules.html
- uid: CalcExpr.Parsing.Parser.RemoveGrammarRule*
  commentId: Overload:CalcExpr.Parsing.Parser.RemoveGrammarRule
  href: CalcExpr.Parsing.Parser.html#CalcExpr_Parsing_Parser_RemoveGrammarRule_System_String_
  name: RemoveGrammarRule
  nameWithType: Parser.RemoveGrammarRule
  fullName: CalcExpr.Parsing.Parser.RemoveGrammarRule
- uid: CalcExpr.Parsing.Parser.RemoveGrammarRuleAt*
  commentId: Overload:CalcExpr.Parsing.Parser.RemoveGrammarRuleAt
  href: CalcExpr.Parsing.Parser.html#CalcExpr_Parsing_Parser_RemoveGrammarRuleAt_System_Int32_
  name: RemoveGrammarRuleAt
  nameWithType: Parser.RemoveGrammarRuleAt
  fullName: CalcExpr.Parsing.Parser.RemoveGrammarRuleAt
- uid: CalcExpr.Parsing.Parser.ReplaceGrammarRule*
  commentId: Overload:CalcExpr.Parsing.Parser.ReplaceGrammarRule
  href: CalcExpr.Parsing.Parser.html#CalcExpr_Parsing_Parser_ReplaceGrammarRule_CalcExpr_Parsing_Rules_IParserRule_
  name: ReplaceGrammarRule
  nameWithType: Parser.ReplaceGrammarRule
  fullName: CalcExpr.Parsing.Parser.ReplaceGrammarRule
- uid: CalcExpr.Parsing.Parser.GrammarContains*
  commentId: Overload:CalcExpr.Parsing.Parser.GrammarContains
  href: CalcExpr.Parsing.Parser.html#CalcExpr_Parsing_Parser_GrammarContains_System_String_
  name: GrammarContains
  nameWithType: Parser.GrammarContains
  fullName: CalcExpr.Parsing.Parser.GrammarContains
- uid: CalcExpr.Parsing.Parser.GetGrammarRule*
  commentId: Overload:CalcExpr.Parsing.Parser.GetGrammarRule
  href: CalcExpr.Parsing.Parser.html#CalcExpr_Parsing_Parser_GetGrammarRule_System_String_
  name: GetGrammarRule
  nameWithType: Parser.GetGrammarRule
  fullName: CalcExpr.Parsing.Parser.GetGrammarRule
- uid: CalcExpr.Parsing.Parser.Cache*
  commentId: Overload:CalcExpr.Parsing.Parser.Cache
  href: CalcExpr.Parsing.Parser.html#CalcExpr_Parsing_Parser_Cache
  name: Cache
  nameWithType: Parser.Cache
  fullName: CalcExpr.Parsing.Parser.Cache
- uid: System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken}[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  name: ImmutableArray<IToken>[]
  nameWithType: ImmutableArray<IToken>[]
  fullName: System.Collections.Immutable.ImmutableArray<CalcExpr.Tokenization.Tokens.IToken>[]
  nameWithType.vb: ImmutableArray(Of IToken)()
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of CalcExpr.Tokenization.Tokens.IToken)()
  name.vb: ImmutableArray(Of IToken)()
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  - name: <
  - uid: CalcExpr.Tokenization.Tokens.IToken
    name: IToken
    href: CalcExpr.Tokenization.Tokens.IToken.html
  - name: '>'
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  - name: (
  - name: Of
  - name: " "
  - uid: CalcExpr.Tokenization.Tokens.IToken
    name: IToken
    href: CalcExpr.Tokenization.Tokens.IToken.html
  - name: )
  - name: (
  - name: )
- uid: CalcExpr.Parsing.Parser.ContainsCache*
  commentId: Overload:CalcExpr.Parsing.Parser.ContainsCache
  href: CalcExpr.Parsing.Parser.html#CalcExpr_Parsing_Parser_ContainsCache_System_String_
  name: ContainsCache
  nameWithType: Parser.ContainsCache
  fullName: CalcExpr.Parsing.Parser.ContainsCache
- uid: System.Collections.Generic.IEnumerable{CalcExpr.Tokenization.Tokens.IToken}
  commentId: T:System.Collections.Generic.IEnumerable{CalcExpr.Tokenization.Tokens.IToken}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<IToken>
  nameWithType: IEnumerable<IToken>
  fullName: System.Collections.Generic.IEnumerable<CalcExpr.Tokenization.Tokens.IToken>
  nameWithType.vb: IEnumerable(Of IToken)
  fullName.vb: System.Collections.Generic.IEnumerable(Of CalcExpr.Tokenization.Tokens.IToken)
  name.vb: IEnumerable(Of IToken)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: CalcExpr.Tokenization.Tokens.IToken
    name: IToken
    href: CalcExpr.Tokenization.Tokens.IToken.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: CalcExpr.Tokenization.Tokens.IToken
    name: IToken
    href: CalcExpr.Tokenization.Tokens.IToken.html
  - name: )
- uid: CalcExpr.Parsing.Parser.AddCache*
  commentId: Overload:CalcExpr.Parsing.Parser.AddCache
  href: CalcExpr.Parsing.Parser.html#CalcExpr_Parsing_Parser_AddCache_System_String_CalcExpr_Expressions_IExpression_
  name: AddCache
  nameWithType: Parser.AddCache
  fullName: CalcExpr.Parsing.Parser.AddCache
- uid: CalcExpr.Parsing.Parser.RemoveCache*
  commentId: Overload:CalcExpr.Parsing.Parser.RemoveCache
  href: CalcExpr.Parsing.Parser.html#CalcExpr_Parsing_Parser_RemoveCache_System_String_
  name: RemoveCache
  nameWithType: Parser.RemoveCache
  fullName: CalcExpr.Parsing.Parser.RemoveCache
- uid: CalcExpr.Parsing.Parser.ClearCache*
  commentId: Overload:CalcExpr.Parsing.Parser.ClearCache
  href: CalcExpr.Parsing.Parser.html#CalcExpr_Parsing_Parser_ClearCache
  name: ClearCache
  nameWithType: Parser.ClearCache
  fullName: CalcExpr.Parsing.Parser.ClearCache
