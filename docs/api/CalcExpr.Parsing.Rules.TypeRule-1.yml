### YamlMime:ManagedReference
items:
- uid: CalcExpr.Parsing.Rules.TypeRule`1
  commentId: T:CalcExpr.Parsing.Rules.TypeRule`1
  id: TypeRule`1
  parent: CalcExpr.Parsing.Rules
  children:
  - CalcExpr.Parsing.Rules.TypeRule`1.#ctor(System.String,System.Func{`0,CalcExpr.Parsing.Parser,CalcExpr.Expressions.IExpression})
  - CalcExpr.Parsing.Rules.TypeRule`1.Equals(System.Object)
  - CalcExpr.Parsing.Rules.TypeRule`1.GetHashCode
  - CalcExpr.Parsing.Rules.TypeRule`1.Match(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},System.Collections.Generic.IEnumerable{CalcExpr.Parsing.Rules.IParserRule})
  - CalcExpr.Parsing.Rules.TypeRule`1.Name
  - CalcExpr.Parsing.Rules.TypeRule`1.Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.Parser)
  - CalcExpr.Parsing.Rules.TypeRule`1.Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.TokenMatch,CalcExpr.Parsing.Parser)
  - CalcExpr.Parsing.Rules.TypeRule`1.op_Equality(CalcExpr.Parsing.Rules.TypeRule{`0},CalcExpr.Parsing.Rules.IParserRule)
  - CalcExpr.Parsing.Rules.TypeRule`1.op_Inequality(CalcExpr.Parsing.Rules.TypeRule{`0},CalcExpr.Parsing.Rules.IParserRule)
  langs:
  - csharp
  - vb
  name: TypeRule<T>
  nameWithType: TypeRule<T>
  fullName: CalcExpr.Parsing.Rules.TypeRule<T>
  type: Class
  source:
    remote:
      path: src/CalcExpr/Parsing/Rules/TypeRule.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: TypeRule
    path: ../src/CalcExpr/Parsing/Rules/TypeRule.cs
    startLine: 12
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing.Rules
  summary: A parser rule that matches a token of type T.
  example: []
  syntax:
    content: 'public class TypeRule<T> : IParserRule where T : IToken'
    typeParameters:
    - id: T
      description: The type of token to match.
    content.vb: Public Class TypeRule(Of T As IToken) Implements IParserRule
  inheritance:
  - System.Object
  implements:
  - CalcExpr.Parsing.Rules.IParserRule
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: TypeRule(Of T)
  fullName.vb: CalcExpr.Parsing.Rules.TypeRule(Of T)
  name.vb: TypeRule(Of T)
- uid: CalcExpr.Parsing.Rules.TypeRule`1.#ctor(System.String,System.Func{`0,CalcExpr.Parsing.Parser,CalcExpr.Expressions.IExpression})
  commentId: M:CalcExpr.Parsing.Rules.TypeRule`1.#ctor(System.String,System.Func{`0,CalcExpr.Parsing.Parser,CalcExpr.Expressions.IExpression})
  id: '#ctor(System.String,System.Func{`0,CalcExpr.Parsing.Parser,CalcExpr.Expressions.IExpression})'
  parent: CalcExpr.Parsing.Rules.TypeRule`1
  langs:
  - csharp
  - vb
  name: TypeRule(string, Func<T, Parser, IExpression>)
  nameWithType: TypeRule<T>.TypeRule(string, Func<T, Parser, IExpression>)
  fullName: CalcExpr.Parsing.Rules.TypeRule<T>.TypeRule(string, System.Func<T, CalcExpr.Parsing.Parser, CalcExpr.Expressions.IExpression>)
  type: Constructor
  source:
    remote:
      path: src/CalcExpr/Parsing/Rules/TypeRule.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: .ctor
    path: ../src/CalcExpr/Parsing/Rules/TypeRule.cs
    startLine: 12
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing.Rules
  summary: A parser rule that matches a token of type T.
  example: []
  syntax:
    content: public TypeRule(string name, Func<T, Parser, IExpression> parse)
    parameters:
    - id: name
      type: System.String
      description: The name of the rule.
    - id: parse
      type: System.Func{{T},CalcExpr.Parsing.Parser,CalcExpr.Expressions.IExpression}
      description: The function to parse the matched token.
    content.vb: Public Sub New(name As String, parse As Func(Of T, Parser, IExpression))
  overload: CalcExpr.Parsing.Rules.TypeRule`1.#ctor*
  nameWithType.vb: TypeRule(Of T).New(String, Func(Of T, Parser, IExpression))
  fullName.vb: CalcExpr.Parsing.Rules.TypeRule(Of T).New(String, System.Func(Of T, CalcExpr.Parsing.Parser, CalcExpr.Expressions.IExpression))
  name.vb: New(String, Func(Of T, Parser, IExpression))
- uid: CalcExpr.Parsing.Rules.TypeRule`1.Name
  commentId: P:CalcExpr.Parsing.Rules.TypeRule`1.Name
  id: Name
  parent: CalcExpr.Parsing.Rules.TypeRule`1
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: TypeRule<T>.Name
  fullName: CalcExpr.Parsing.Rules.TypeRule<T>.Name
  type: Property
  source:
    remote:
      path: src/CalcExpr/Parsing/Rules/TypeRule.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: Name
    path: ../src/CalcExpr/Parsing/Rules/TypeRule.cs
    startLine: 17
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing.Rules
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: CalcExpr.Parsing.Rules.TypeRule`1.Name*
  implements:
  - CalcExpr.Parsing.Rules.IParserRule.Name
  nameWithType.vb: TypeRule(Of T).Name
  fullName.vb: CalcExpr.Parsing.Rules.TypeRule(Of T).Name
- uid: CalcExpr.Parsing.Rules.TypeRule`1.Match(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},System.Collections.Generic.IEnumerable{CalcExpr.Parsing.Rules.IParserRule})
  commentId: M:CalcExpr.Parsing.Rules.TypeRule`1.Match(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},System.Collections.Generic.IEnumerable{CalcExpr.Parsing.Rules.IParserRule})
  id: Match(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},System.Collections.Generic.IEnumerable{CalcExpr.Parsing.Rules.IParserRule})
  parent: CalcExpr.Parsing.Rules.TypeRule`1
  langs:
  - csharp
  - vb
  name: Match(ImmutableArray<IToken>, IEnumerable<IParserRule>)
  nameWithType: TypeRule<T>.Match(ImmutableArray<IToken>, IEnumerable<IParserRule>)
  fullName: CalcExpr.Parsing.Rules.TypeRule<T>.Match(System.Collections.Immutable.ImmutableArray<CalcExpr.Tokenization.Tokens.IToken>, System.Collections.Generic.IEnumerable<CalcExpr.Parsing.Rules.IParserRule>)
  type: Method
  source:
    remote:
      path: src/CalcExpr/Parsing/Rules/TypeRule.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: Match
    path: ../src/CalcExpr/Parsing/Rules/TypeRule.cs
    startLine: 19
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing.Rules
  summary: The function that gets used to find a match in an input.
  example: []
  syntax:
    content: public TokenMatch? Match(ImmutableArray<IToken> input, IEnumerable<IParserRule> _)
    parameters:
    - id: input
      type: System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken}
      description: The input <xref href="System.Collections.Immutable.ImmutableArray%601" data-throw-if-not-resolved="false"></xref> to find the match in.
    - id: _
      type: System.Collections.Generic.IEnumerable{CalcExpr.Parsing.Rules.IParserRule}
    return:
      type: CalcExpr.Parsing.TokenMatch
      description: >-
        A new <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> containing the value of the matching input and the index of where it

        was found; <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> if no match was found.
    content.vb: Public Function Match(input As ImmutableArray(Of IToken), _ As IEnumerable(Of IParserRule)) As TokenMatch
  overload: CalcExpr.Parsing.Rules.TypeRule`1.Match*
  implements:
  - CalcExpr.Parsing.Rules.IParserRule.Match(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},System.Collections.Generic.IEnumerable{CalcExpr.Parsing.Rules.IParserRule})
  nameWithType.vb: TypeRule(Of T).Match(ImmutableArray(Of IToken), IEnumerable(Of IParserRule))
  fullName.vb: CalcExpr.Parsing.Rules.TypeRule(Of T).Match(System.Collections.Immutable.ImmutableArray(Of CalcExpr.Tokenization.Tokens.IToken), System.Collections.Generic.IEnumerable(Of CalcExpr.Parsing.Rules.IParserRule))
  name.vb: Match(ImmutableArray(Of IToken), IEnumerable(Of IParserRule))
- uid: CalcExpr.Parsing.Rules.TypeRule`1.Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.Parser)
  commentId: M:CalcExpr.Parsing.Rules.TypeRule`1.Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.Parser)
  id: Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.Parser)
  parent: CalcExpr.Parsing.Rules.TypeRule`1
  langs:
  - csharp
  - vb
  name: Parse(ImmutableArray<IToken>, Parser)
  nameWithType: TypeRule<T>.Parse(ImmutableArray<IToken>, Parser)
  fullName: CalcExpr.Parsing.Rules.TypeRule<T>.Parse(System.Collections.Immutable.ImmutableArray<CalcExpr.Tokenization.Tokens.IToken>, CalcExpr.Parsing.Parser)
  type: Method
  source:
    remote:
      path: src/CalcExpr/Parsing/Rules/TypeRule.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: Parse
    path: ../src/CalcExpr/Parsing/Rules/TypeRule.cs
    startLine: 27
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing.Rules
  summary: Tries to parse the input into an <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public IExpression? Parse(ImmutableArray<IToken> input, Parser parser)
    parameters:
    - id: input
      type: System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken}
      description: The input <xref href="System.Collections.Immutable.ImmutableArray%601" data-throw-if-not-resolved="false"></xref> to parse.
    - id: parser
      type: CalcExpr.Parsing.Parser
      description: The <xref href="CalcExpr.Parsing.Parser" data-throw-if-not-resolved="false"></xref> to use to parse any sub-expressions.
    return:
      type: CalcExpr.Expressions.IExpression
      description: The parsed <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref>; <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> if the input could not be parsed.
    content.vb: Public Function Parse(input As ImmutableArray(Of IToken), parser As Parser) As IExpression
  overload: CalcExpr.Parsing.Rules.TypeRule`1.Parse*
  implements:
  - CalcExpr.Parsing.Rules.IParserRule.Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.Parser)
  nameWithType.vb: TypeRule(Of T).Parse(ImmutableArray(Of IToken), Parser)
  fullName.vb: CalcExpr.Parsing.Rules.TypeRule(Of T).Parse(System.Collections.Immutable.ImmutableArray(Of CalcExpr.Tokenization.Tokens.IToken), CalcExpr.Parsing.Parser)
  name.vb: Parse(ImmutableArray(Of IToken), Parser)
- uid: CalcExpr.Parsing.Rules.TypeRule`1.Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.TokenMatch,CalcExpr.Parsing.Parser)
  commentId: M:CalcExpr.Parsing.Rules.TypeRule`1.Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.TokenMatch,CalcExpr.Parsing.Parser)
  id: Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.TokenMatch,CalcExpr.Parsing.Parser)
  parent: CalcExpr.Parsing.Rules.TypeRule`1
  langs:
  - csharp
  - vb
  name: Parse(ImmutableArray<IToken>, TokenMatch, Parser)
  nameWithType: TypeRule<T>.Parse(ImmutableArray<IToken>, TokenMatch, Parser)
  fullName: CalcExpr.Parsing.Rules.TypeRule<T>.Parse(System.Collections.Immutable.ImmutableArray<CalcExpr.Tokenization.Tokens.IToken>, CalcExpr.Parsing.TokenMatch, CalcExpr.Parsing.Parser)
  type: Method
  source:
    remote:
      path: src/CalcExpr/Parsing/Rules/TypeRule.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: Parse
    path: ../src/CalcExpr/Parsing/Rules/TypeRule.cs
    startLine: 35
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing.Rules
  summary: Tries to parse the input <xref href="System.Collections.Immutable.ImmutableArray%601" data-throw-if-not-resolved="false"></xref> into an <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref> using the given token.
  example: []
  syntax:
    content: public IExpression? Parse(ImmutableArray<IToken> _, TokenMatch match, Parser parser)
    parameters:
    - id: _
      type: System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken}
    - id: match
      type: CalcExpr.Parsing.TokenMatch
      description: The matching <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> with its index to use to parse the input.
    - id: parser
      type: CalcExpr.Parsing.Parser
      description: The <xref href="CalcExpr.Parsing.Parser" data-throw-if-not-resolved="false"></xref> to use to parse any sub-expressions.
    return:
      type: CalcExpr.Expressions.IExpression
      description: The parsed <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref>; <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> if the input could not be parsed.
    content.vb: Public Function Parse(_ As ImmutableArray(Of IToken), match As TokenMatch, parser As Parser) As IExpression
  overload: CalcExpr.Parsing.Rules.TypeRule`1.Parse*
  implements:
  - CalcExpr.Parsing.Rules.IParserRule.Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.TokenMatch,CalcExpr.Parsing.Parser)
  nameWithType.vb: TypeRule(Of T).Parse(ImmutableArray(Of IToken), TokenMatch, Parser)
  fullName.vb: CalcExpr.Parsing.Rules.TypeRule(Of T).Parse(System.Collections.Immutable.ImmutableArray(Of CalcExpr.Tokenization.Tokens.IToken), CalcExpr.Parsing.TokenMatch, CalcExpr.Parsing.Parser)
  name.vb: Parse(ImmutableArray(Of IToken), TokenMatch, Parser)
- uid: CalcExpr.Parsing.Rules.TypeRule`1.Equals(System.Object)
  commentId: M:CalcExpr.Parsing.Rules.TypeRule`1.Equals(System.Object)
  id: Equals(System.Object)
  parent: CalcExpr.Parsing.Rules.TypeRule`1
  langs:
  - csharp
  - vb
  name: Equals(object?)
  nameWithType: TypeRule<T>.Equals(object?)
  fullName: CalcExpr.Parsing.Rules.TypeRule<T>.Equals(object?)
  type: Method
  source:
    remote:
      path: src/CalcExpr/Parsing/Rules/TypeRule.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: Equals
    path: ../src/CalcExpr/Parsing/Rules/TypeRule.cs
    startLine: 38
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing.Rules
  summary: Determines whether the specified object is equal to the current object.
  example: []
  syntax:
    content: public override bool Equals(object? obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare with the current object.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the specified object  is equal to the current object; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: CalcExpr.Parsing.Rules.TypeRule`1.Equals*
  nameWithType.vb: TypeRule(Of T).Equals(Object)
  fullName.vb: CalcExpr.Parsing.Rules.TypeRule(Of T).Equals(Object)
  name.vb: Equals(Object)
- uid: CalcExpr.Parsing.Rules.TypeRule`1.GetHashCode
  commentId: M:CalcExpr.Parsing.Rules.TypeRule`1.GetHashCode
  id: GetHashCode
  parent: CalcExpr.Parsing.Rules.TypeRule`1
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: TypeRule<T>.GetHashCode()
  fullName: CalcExpr.Parsing.Rules.TypeRule<T>.GetHashCode()
  type: Method
  source:
    remote:
      path: src/CalcExpr/Parsing/Rules/TypeRule.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: GetHashCode
    path: ../src/CalcExpr/Parsing/Rules/TypeRule.cs
    startLine: 41
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing.Rules
  summary: Serves as the default hash function.
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A hash code for the current object.
    content.vb: Public Overrides Function GetHashCode() As Integer
  overridden: System.Object.GetHashCode
  overload: CalcExpr.Parsing.Rules.TypeRule`1.GetHashCode*
  nameWithType.vb: TypeRule(Of T).GetHashCode()
  fullName.vb: CalcExpr.Parsing.Rules.TypeRule(Of T).GetHashCode()
- uid: CalcExpr.Parsing.Rules.TypeRule`1.op_Equality(CalcExpr.Parsing.Rules.TypeRule{`0},CalcExpr.Parsing.Rules.IParserRule)
  commentId: M:CalcExpr.Parsing.Rules.TypeRule`1.op_Equality(CalcExpr.Parsing.Rules.TypeRule{`0},CalcExpr.Parsing.Rules.IParserRule)
  id: op_Equality(CalcExpr.Parsing.Rules.TypeRule{`0},CalcExpr.Parsing.Rules.IParserRule)
  parent: CalcExpr.Parsing.Rules.TypeRule`1
  langs:
  - csharp
  - vb
  name: operator ==(TypeRule<T>, IParserRule)
  nameWithType: TypeRule<T>.operator ==(TypeRule<T>, IParserRule)
  fullName: CalcExpr.Parsing.Rules.TypeRule<T>.operator ==(CalcExpr.Parsing.Rules.TypeRule<T>, CalcExpr.Parsing.Rules.IParserRule)
  type: Operator
  source:
    remote:
      path: src/CalcExpr/Parsing/Rules/TypeRule.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: op_Equality
    path: ../src/CalcExpr/Parsing/Rules/TypeRule.cs
    startLine: 44
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing.Rules
  syntax:
    content: public static bool operator ==(TypeRule<T> a, IParserRule b)
    parameters:
    - id: a
      type: CalcExpr.Parsing.Rules.TypeRule`1
    - id: b
      type: CalcExpr.Parsing.Rules.IParserRule
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(a As TypeRule(Of T), b As IParserRule) As Boolean
  overload: CalcExpr.Parsing.Rules.TypeRule`1.op_Equality*
  nameWithType.vb: TypeRule(Of T).=(TypeRule(Of T), IParserRule)
  fullName.vb: CalcExpr.Parsing.Rules.TypeRule(Of T).=(CalcExpr.Parsing.Rules.TypeRule(Of T), CalcExpr.Parsing.Rules.IParserRule)
  name.vb: =(TypeRule(Of T), IParserRule)
- uid: CalcExpr.Parsing.Rules.TypeRule`1.op_Inequality(CalcExpr.Parsing.Rules.TypeRule{`0},CalcExpr.Parsing.Rules.IParserRule)
  commentId: M:CalcExpr.Parsing.Rules.TypeRule`1.op_Inequality(CalcExpr.Parsing.Rules.TypeRule{`0},CalcExpr.Parsing.Rules.IParserRule)
  id: op_Inequality(CalcExpr.Parsing.Rules.TypeRule{`0},CalcExpr.Parsing.Rules.IParserRule)
  parent: CalcExpr.Parsing.Rules.TypeRule`1
  langs:
  - csharp
  - vb
  name: operator !=(TypeRule<T>, IParserRule)
  nameWithType: TypeRule<T>.operator !=(TypeRule<T>, IParserRule)
  fullName: CalcExpr.Parsing.Rules.TypeRule<T>.operator !=(CalcExpr.Parsing.Rules.TypeRule<T>, CalcExpr.Parsing.Rules.IParserRule)
  type: Operator
  source:
    remote:
      path: src/CalcExpr/Parsing/Rules/TypeRule.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: op_Inequality
    path: ../src/CalcExpr/Parsing/Rules/TypeRule.cs
    startLine: 47
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing.Rules
  syntax:
    content: public static bool operator !=(TypeRule<T> a, IParserRule b)
    parameters:
    - id: a
      type: CalcExpr.Parsing.Rules.TypeRule`1
    - id: b
      type: CalcExpr.Parsing.Rules.IParserRule
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(a As TypeRule(Of T), b As IParserRule) As Boolean
  overload: CalcExpr.Parsing.Rules.TypeRule`1.op_Inequality*
  nameWithType.vb: TypeRule(Of T).<>(TypeRule(Of T), IParserRule)
  fullName.vb: CalcExpr.Parsing.Rules.TypeRule(Of T).<>(CalcExpr.Parsing.Rules.TypeRule(Of T), CalcExpr.Parsing.Rules.IParserRule)
  name.vb: <>(TypeRule(Of T), IParserRule)
references:
- uid: CalcExpr.Parsing.Rules
  commentId: N:CalcExpr.Parsing.Rules
  href: CalcExpr.html
  name: CalcExpr.Parsing.Rules
  nameWithType: CalcExpr.Parsing.Rules
  fullName: CalcExpr.Parsing.Rules
  spec.csharp:
  - uid: CalcExpr
    name: CalcExpr
    href: CalcExpr.html
  - name: .
  - uid: CalcExpr.Parsing
    name: Parsing
    href: CalcExpr.Parsing.html
  - name: .
  - uid: CalcExpr.Parsing.Rules
    name: Rules
    href: CalcExpr.Parsing.Rules.html
  spec.vb:
  - uid: CalcExpr
    name: CalcExpr
    href: CalcExpr.html
  - name: .
  - uid: CalcExpr.Parsing
    name: Parsing
    href: CalcExpr.Parsing.html
  - name: .
  - uid: CalcExpr.Parsing.Rules
    name: Rules
    href: CalcExpr.Parsing.Rules.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: CalcExpr.Parsing.Rules.IParserRule
  commentId: T:CalcExpr.Parsing.Rules.IParserRule
  parent: CalcExpr.Parsing.Rules
  href: CalcExpr.Parsing.Rules.IParserRule.html
  name: IParserRule
  nameWithType: IParserRule
  fullName: CalcExpr.Parsing.Rules.IParserRule
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: CalcExpr.Parsing.Rules.TypeRule`1.#ctor*
  commentId: Overload:CalcExpr.Parsing.Rules.TypeRule`1.#ctor
  href: CalcExpr.Parsing.Rules.TypeRule-1.html#CalcExpr_Parsing_Rules_TypeRule_1__ctor_System_String_System_Func__0_CalcExpr_Parsing_Parser_CalcExpr_Expressions_IExpression__
  name: TypeRule
  nameWithType: TypeRule<T>.TypeRule
  fullName: CalcExpr.Parsing.Rules.TypeRule<T>.TypeRule
  nameWithType.vb: TypeRule(Of T).New
  fullName.vb: CalcExpr.Parsing.Rules.TypeRule(Of T).New
  name.vb: New
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Func{{T},CalcExpr.Parsing.Parser,CalcExpr.Expressions.IExpression}
  commentId: T:System.Func{`0,CalcExpr.Parsing.Parser,CalcExpr.Expressions.IExpression}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<T, Parser, IExpression>
  nameWithType: Func<T, Parser, IExpression>
  fullName: System.Func<T, CalcExpr.Parsing.Parser, CalcExpr.Expressions.IExpression>
  nameWithType.vb: Func(Of T, Parser, IExpression)
  fullName.vb: System.Func(Of T, CalcExpr.Parsing.Parser, CalcExpr.Expressions.IExpression)
  name.vb: Func(Of T, Parser, IExpression)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: CalcExpr.Parsing.Parser
    name: Parser
    href: CalcExpr.Parsing.Parser.html
  - name: ','
  - name: " "
  - uid: CalcExpr.Expressions.IExpression
    name: IExpression
    href: CalcExpr.Expressions.IExpression.html
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: CalcExpr.Parsing.Parser
    name: Parser
    href: CalcExpr.Parsing.Parser.html
  - name: ','
  - name: " "
  - uid: CalcExpr.Expressions.IExpression
    name: IExpression
    href: CalcExpr.Expressions.IExpression.html
  - name: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: CalcExpr.Parsing.Rules.TypeRule`1.Name*
  commentId: Overload:CalcExpr.Parsing.Rules.TypeRule`1.Name
  href: CalcExpr.Parsing.Rules.TypeRule-1.html#CalcExpr_Parsing_Rules_TypeRule_1_Name
  name: Name
  nameWithType: TypeRule<T>.Name
  fullName: CalcExpr.Parsing.Rules.TypeRule<T>.Name
  nameWithType.vb: TypeRule(Of T).Name
  fullName.vb: CalcExpr.Parsing.Rules.TypeRule(Of T).Name
- uid: CalcExpr.Parsing.Rules.IParserRule.Name
  commentId: P:CalcExpr.Parsing.Rules.IParserRule.Name
  parent: CalcExpr.Parsing.Rules.IParserRule
  href: CalcExpr.Parsing.Rules.IParserRule.html#CalcExpr_Parsing_Rules_IParserRule_Name
  name: Name
  nameWithType: IParserRule.Name
  fullName: CalcExpr.Parsing.Rules.IParserRule.Name
- uid: System.Collections.Immutable.ImmutableArray`1
  commentId: T:System.Collections.Immutable.ImmutableArray`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  name: ImmutableArray<T>
  nameWithType: ImmutableArray<T>
  fullName: System.Collections.Immutable.ImmutableArray<T>
  nameWithType.vb: ImmutableArray(Of T)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T)
  name.vb: ImmutableArray(Of T)
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: CalcExpr.Parsing.Parser
  commentId: T:CalcExpr.Parsing.Parser
  parent: CalcExpr.Parsing
  href: CalcExpr.Parsing.Parser.html
  name: Parser
  nameWithType: Parser
  fullName: CalcExpr.Parsing.Parser
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: CalcExpr.Parsing.Rules.TypeRule`1.Match*
  commentId: Overload:CalcExpr.Parsing.Rules.TypeRule`1.Match
  href: CalcExpr.Parsing.Rules.TypeRule-1.html#CalcExpr_Parsing_Rules_TypeRule_1_Match_System_Collections_Immutable_ImmutableArray_CalcExpr_Tokenization_Tokens_IToken__System_Collections_Generic_IEnumerable_CalcExpr_Parsing_Rules_IParserRule__
  name: Match
  nameWithType: TypeRule<T>.Match
  fullName: CalcExpr.Parsing.Rules.TypeRule<T>.Match
  nameWithType.vb: TypeRule(Of T).Match
  fullName.vb: CalcExpr.Parsing.Rules.TypeRule(Of T).Match
- uid: CalcExpr.Parsing.Rules.IParserRule.Match(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},System.Collections.Generic.IEnumerable{CalcExpr.Parsing.Rules.IParserRule})
  commentId: M:CalcExpr.Parsing.Rules.IParserRule.Match(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},System.Collections.Generic.IEnumerable{CalcExpr.Parsing.Rules.IParserRule})
  parent: CalcExpr.Parsing.Rules.IParserRule
  isExternal: true
  href: CalcExpr.Parsing.Rules.IParserRule.html#CalcExpr_Parsing_Rules_IParserRule_Match_System_Collections_Immutable_ImmutableArray_CalcExpr_Tokenization_Tokens_IToken__System_Collections_Generic_IEnumerable_CalcExpr_Parsing_Rules_IParserRule__
  name: Match(ImmutableArray<IToken>, IEnumerable<IParserRule>)
  nameWithType: IParserRule.Match(ImmutableArray<IToken>, IEnumerable<IParserRule>)
  fullName: CalcExpr.Parsing.Rules.IParserRule.Match(System.Collections.Immutable.ImmutableArray<CalcExpr.Tokenization.Tokens.IToken>, System.Collections.Generic.IEnumerable<CalcExpr.Parsing.Rules.IParserRule>)
  nameWithType.vb: IParserRule.Match(ImmutableArray(Of IToken), IEnumerable(Of IParserRule))
  fullName.vb: CalcExpr.Parsing.Rules.IParserRule.Match(System.Collections.Immutable.ImmutableArray(Of CalcExpr.Tokenization.Tokens.IToken), System.Collections.Generic.IEnumerable(Of CalcExpr.Parsing.Rules.IParserRule))
  name.vb: Match(ImmutableArray(Of IToken), IEnumerable(Of IParserRule))
  spec.csharp:
  - uid: CalcExpr.Parsing.Rules.IParserRule.Match(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},System.Collections.Generic.IEnumerable{CalcExpr.Parsing.Rules.IParserRule})
    name: Match
    href: CalcExpr.Parsing.Rules.IParserRule.html#CalcExpr_Parsing_Rules_IParserRule_Match_System_Collections_Immutable_ImmutableArray_CalcExpr_Tokenization_Tokens_IToken__System_Collections_Generic_IEnumerable_CalcExpr_Parsing_Rules_IParserRule__
  - name: (
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  - name: <
  - uid: CalcExpr.Tokenization.Tokens.IToken
    name: IToken
    href: CalcExpr.Tokenization.Tokens.IToken.html
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: CalcExpr.Parsing.Rules.IParserRule
    name: IParserRule
    href: CalcExpr.Parsing.Rules.IParserRule.html
  - name: '>'
  - name: )
  spec.vb:
  - uid: CalcExpr.Parsing.Rules.IParserRule.Match(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},System.Collections.Generic.IEnumerable{CalcExpr.Parsing.Rules.IParserRule})
    name: Match
    href: CalcExpr.Parsing.Rules.IParserRule.html#CalcExpr_Parsing_Rules_IParserRule_Match_System_Collections_Immutable_ImmutableArray_CalcExpr_Tokenization_Tokens_IToken__System_Collections_Generic_IEnumerable_CalcExpr_Parsing_Rules_IParserRule__
  - name: (
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  - name: (
  - name: Of
  - name: " "
  - uid: CalcExpr.Tokenization.Tokens.IToken
    name: IToken
    href: CalcExpr.Tokenization.Tokens.IToken.html
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: CalcExpr.Parsing.Rules.IParserRule
    name: IParserRule
    href: CalcExpr.Parsing.Rules.IParserRule.html
  - name: )
  - name: )
- uid: System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken}
  commentId: T:System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken}
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.ImmutableArray`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  name: ImmutableArray<IToken>
  nameWithType: ImmutableArray<IToken>
  fullName: System.Collections.Immutable.ImmutableArray<CalcExpr.Tokenization.Tokens.IToken>
  nameWithType.vb: ImmutableArray(Of IToken)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of CalcExpr.Tokenization.Tokens.IToken)
  name.vb: ImmutableArray(Of IToken)
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  - name: <
  - uid: CalcExpr.Tokenization.Tokens.IToken
    name: IToken
    href: CalcExpr.Tokenization.Tokens.IToken.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  - name: (
  - name: Of
  - name: " "
  - uid: CalcExpr.Tokenization.Tokens.IToken
    name: IToken
    href: CalcExpr.Tokenization.Tokens.IToken.html
  - name: )
- uid: System.Collections.Generic.IEnumerable{CalcExpr.Parsing.Rules.IParserRule}
  commentId: T:System.Collections.Generic.IEnumerable{CalcExpr.Parsing.Rules.IParserRule}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<IParserRule>
  nameWithType: IEnumerable<IParserRule>
  fullName: System.Collections.Generic.IEnumerable<CalcExpr.Parsing.Rules.IParserRule>
  nameWithType.vb: IEnumerable(Of IParserRule)
  fullName.vb: System.Collections.Generic.IEnumerable(Of CalcExpr.Parsing.Rules.IParserRule)
  name.vb: IEnumerable(Of IParserRule)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: CalcExpr.Parsing.Rules.IParserRule
    name: IParserRule
    href: CalcExpr.Parsing.Rules.IParserRule.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: CalcExpr.Parsing.Rules.IParserRule
    name: IParserRule
    href: CalcExpr.Parsing.Rules.IParserRule.html
  - name: )
- uid: CalcExpr.Parsing.TokenMatch
  commentId: T:CalcExpr.Parsing.TokenMatch
  parent: CalcExpr.Parsing
  href: CalcExpr.Parsing.TokenMatch.html
  name: TokenMatch
  nameWithType: TokenMatch
  fullName: CalcExpr.Parsing.TokenMatch
- uid: CalcExpr.Parsing
  commentId: N:CalcExpr.Parsing
  href: CalcExpr.html
  name: CalcExpr.Parsing
  nameWithType: CalcExpr.Parsing
  fullName: CalcExpr.Parsing
  spec.csharp:
  - uid: CalcExpr
    name: CalcExpr
    href: CalcExpr.html
  - name: .
  - uid: CalcExpr.Parsing
    name: Parsing
    href: CalcExpr.Parsing.html
  spec.vb:
  - uid: CalcExpr
    name: CalcExpr
    href: CalcExpr.html
  - name: .
  - uid: CalcExpr.Parsing
    name: Parsing
    href: CalcExpr.Parsing.html
- uid: System.Collections.Immutable
  commentId: N:System.Collections.Immutable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Immutable
  nameWithType: System.Collections.Immutable
  fullName: System.Collections.Immutable
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Immutable
    name: Immutable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Immutable
    name: Immutable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: CalcExpr.Expressions.IExpression
  commentId: T:CalcExpr.Expressions.IExpression
  parent: CalcExpr.Expressions
  href: CalcExpr.Expressions.IExpression.html
  name: IExpression
  nameWithType: IExpression
  fullName: CalcExpr.Expressions.IExpression
- uid: CalcExpr.Parsing.Rules.TypeRule`1.Parse*
  commentId: Overload:CalcExpr.Parsing.Rules.TypeRule`1.Parse
  href: CalcExpr.Parsing.Rules.TypeRule-1.html#CalcExpr_Parsing_Rules_TypeRule_1_Parse_System_Collections_Immutable_ImmutableArray_CalcExpr_Tokenization_Tokens_IToken__CalcExpr_Parsing_Parser_
  name: Parse
  nameWithType: TypeRule<T>.Parse
  fullName: CalcExpr.Parsing.Rules.TypeRule<T>.Parse
  nameWithType.vb: TypeRule(Of T).Parse
  fullName.vb: CalcExpr.Parsing.Rules.TypeRule(Of T).Parse
- uid: CalcExpr.Parsing.Rules.IParserRule.Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.Parser)
  commentId: M:CalcExpr.Parsing.Rules.IParserRule.Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.Parser)
  parent: CalcExpr.Parsing.Rules.IParserRule
  isExternal: true
  href: CalcExpr.Parsing.Rules.IParserRule.html#CalcExpr_Parsing_Rules_IParserRule_Parse_System_Collections_Immutable_ImmutableArray_CalcExpr_Tokenization_Tokens_IToken__CalcExpr_Parsing_Parser_
  name: Parse(ImmutableArray<IToken>, Parser)
  nameWithType: IParserRule.Parse(ImmutableArray<IToken>, Parser)
  fullName: CalcExpr.Parsing.Rules.IParserRule.Parse(System.Collections.Immutable.ImmutableArray<CalcExpr.Tokenization.Tokens.IToken>, CalcExpr.Parsing.Parser)
  nameWithType.vb: IParserRule.Parse(ImmutableArray(Of IToken), Parser)
  fullName.vb: CalcExpr.Parsing.Rules.IParserRule.Parse(System.Collections.Immutable.ImmutableArray(Of CalcExpr.Tokenization.Tokens.IToken), CalcExpr.Parsing.Parser)
  name.vb: Parse(ImmutableArray(Of IToken), Parser)
  spec.csharp:
  - uid: CalcExpr.Parsing.Rules.IParserRule.Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.Parser)
    name: Parse
    href: CalcExpr.Parsing.Rules.IParserRule.html#CalcExpr_Parsing_Rules_IParserRule_Parse_System_Collections_Immutable_ImmutableArray_CalcExpr_Tokenization_Tokens_IToken__CalcExpr_Parsing_Parser_
  - name: (
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  - name: <
  - uid: CalcExpr.Tokenization.Tokens.IToken
    name: IToken
    href: CalcExpr.Tokenization.Tokens.IToken.html
  - name: '>'
  - name: ','
  - name: " "
  - uid: CalcExpr.Parsing.Parser
    name: Parser
    href: CalcExpr.Parsing.Parser.html
  - name: )
  spec.vb:
  - uid: CalcExpr.Parsing.Rules.IParserRule.Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.Parser)
    name: Parse
    href: CalcExpr.Parsing.Rules.IParserRule.html#CalcExpr_Parsing_Rules_IParserRule_Parse_System_Collections_Immutable_ImmutableArray_CalcExpr_Tokenization_Tokens_IToken__CalcExpr_Parsing_Parser_
  - name: (
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  - name: (
  - name: Of
  - name: " "
  - uid: CalcExpr.Tokenization.Tokens.IToken
    name: IToken
    href: CalcExpr.Tokenization.Tokens.IToken.html
  - name: )
  - name: ','
  - name: " "
  - uid: CalcExpr.Parsing.Parser
    name: Parser
    href: CalcExpr.Parsing.Parser.html
  - name: )
- uid: CalcExpr.Expressions
  commentId: N:CalcExpr.Expressions
  href: CalcExpr.html
  name: CalcExpr.Expressions
  nameWithType: CalcExpr.Expressions
  fullName: CalcExpr.Expressions
  spec.csharp:
  - uid: CalcExpr
    name: CalcExpr
    href: CalcExpr.html
  - name: .
  - uid: CalcExpr.Expressions
    name: Expressions
    href: CalcExpr.Expressions.html
  spec.vb:
  - uid: CalcExpr
    name: CalcExpr
    href: CalcExpr.html
  - name: .
  - uid: CalcExpr.Expressions
    name: Expressions
    href: CalcExpr.Expressions.html
- uid: CalcExpr.Parsing.Rules.IParserRule.Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.TokenMatch,CalcExpr.Parsing.Parser)
  commentId: M:CalcExpr.Parsing.Rules.IParserRule.Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.TokenMatch,CalcExpr.Parsing.Parser)
  parent: CalcExpr.Parsing.Rules.IParserRule
  isExternal: true
  href: CalcExpr.Parsing.Rules.IParserRule.html#CalcExpr_Parsing_Rules_IParserRule_Parse_System_Collections_Immutable_ImmutableArray_CalcExpr_Tokenization_Tokens_IToken__CalcExpr_Parsing_TokenMatch_CalcExpr_Parsing_Parser_
  name: Parse(ImmutableArray<IToken>, TokenMatch, Parser)
  nameWithType: IParserRule.Parse(ImmutableArray<IToken>, TokenMatch, Parser)
  fullName: CalcExpr.Parsing.Rules.IParserRule.Parse(System.Collections.Immutable.ImmutableArray<CalcExpr.Tokenization.Tokens.IToken>, CalcExpr.Parsing.TokenMatch, CalcExpr.Parsing.Parser)
  nameWithType.vb: IParserRule.Parse(ImmutableArray(Of IToken), TokenMatch, Parser)
  fullName.vb: CalcExpr.Parsing.Rules.IParserRule.Parse(System.Collections.Immutable.ImmutableArray(Of CalcExpr.Tokenization.Tokens.IToken), CalcExpr.Parsing.TokenMatch, CalcExpr.Parsing.Parser)
  name.vb: Parse(ImmutableArray(Of IToken), TokenMatch, Parser)
  spec.csharp:
  - uid: CalcExpr.Parsing.Rules.IParserRule.Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.TokenMatch,CalcExpr.Parsing.Parser)
    name: Parse
    href: CalcExpr.Parsing.Rules.IParserRule.html#CalcExpr_Parsing_Rules_IParserRule_Parse_System_Collections_Immutable_ImmutableArray_CalcExpr_Tokenization_Tokens_IToken__CalcExpr_Parsing_TokenMatch_CalcExpr_Parsing_Parser_
  - name: (
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  - name: <
  - uid: CalcExpr.Tokenization.Tokens.IToken
    name: IToken
    href: CalcExpr.Tokenization.Tokens.IToken.html
  - name: '>'
  - name: ','
  - name: " "
  - uid: CalcExpr.Parsing.TokenMatch
    name: TokenMatch
    href: CalcExpr.Parsing.TokenMatch.html
  - name: ','
  - name: " "
  - uid: CalcExpr.Parsing.Parser
    name: Parser
    href: CalcExpr.Parsing.Parser.html
  - name: )
  spec.vb:
  - uid: CalcExpr.Parsing.Rules.IParserRule.Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.TokenMatch,CalcExpr.Parsing.Parser)
    name: Parse
    href: CalcExpr.Parsing.Rules.IParserRule.html#CalcExpr_Parsing_Rules_IParserRule_Parse_System_Collections_Immutable_ImmutableArray_CalcExpr_Tokenization_Tokens_IToken__CalcExpr_Parsing_TokenMatch_CalcExpr_Parsing_Parser_
  - name: (
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  - name: (
  - name: Of
  - name: " "
  - uid: CalcExpr.Tokenization.Tokens.IToken
    name: IToken
    href: CalcExpr.Tokenization.Tokens.IToken.html
  - name: )
  - name: ','
  - name: " "
  - uid: CalcExpr.Parsing.TokenMatch
    name: TokenMatch
    href: CalcExpr.Parsing.TokenMatch.html
  - name: ','
  - name: " "
  - uid: CalcExpr.Parsing.Parser
    name: Parser
    href: CalcExpr.Parsing.Parser.html
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: CalcExpr.Parsing.Rules.TypeRule`1.Equals*
  commentId: Overload:CalcExpr.Parsing.Rules.TypeRule`1.Equals
  href: CalcExpr.Parsing.Rules.TypeRule-1.html#CalcExpr_Parsing_Rules_TypeRule_1_Equals_System_Object_
  name: Equals
  nameWithType: TypeRule<T>.Equals
  fullName: CalcExpr.Parsing.Rules.TypeRule<T>.Equals
  nameWithType.vb: TypeRule(Of T).Equals
  fullName.vb: CalcExpr.Parsing.Rules.TypeRule(Of T).Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: CalcExpr.Parsing.Rules.TypeRule`1.GetHashCode*
  commentId: Overload:CalcExpr.Parsing.Rules.TypeRule`1.GetHashCode
  href: CalcExpr.Parsing.Rules.TypeRule-1.html#CalcExpr_Parsing_Rules_TypeRule_1_GetHashCode
  name: GetHashCode
  nameWithType: TypeRule<T>.GetHashCode
  fullName: CalcExpr.Parsing.Rules.TypeRule<T>.GetHashCode
  nameWithType.vb: TypeRule(Of T).GetHashCode
  fullName.vb: CalcExpr.Parsing.Rules.TypeRule(Of T).GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: CalcExpr.Parsing.Rules.TypeRule`1.op_Equality*
  commentId: Overload:CalcExpr.Parsing.Rules.TypeRule`1.op_Equality
  href: CalcExpr.Parsing.Rules.TypeRule-1.html#CalcExpr_Parsing_Rules_TypeRule_1_op_Equality_CalcExpr_Parsing_Rules_TypeRule__0__CalcExpr_Parsing_Rules_IParserRule_
  name: operator ==
  nameWithType: TypeRule<T>.operator ==
  fullName: CalcExpr.Parsing.Rules.TypeRule<T>.operator ==
  nameWithType.vb: TypeRule(Of T).=
  fullName.vb: CalcExpr.Parsing.Rules.TypeRule(Of T).=
  name.vb: =
  spec.csharp:
  - name: operator
  - name: " "
  - uid: CalcExpr.Parsing.Rules.TypeRule`1.op_Equality*
    name: ==
    href: CalcExpr.Parsing.Rules.TypeRule-1.html#CalcExpr_Parsing_Rules_TypeRule_1_op_Equality_CalcExpr_Parsing_Rules_TypeRule__0__CalcExpr_Parsing_Rules_IParserRule_
- uid: CalcExpr.Parsing.Rules.TypeRule`1
  commentId: T:CalcExpr.Parsing.Rules.TypeRule`1
  parent: CalcExpr.Parsing.Rules
  href: CalcExpr.Parsing.Rules.TypeRule-1.html
  name: TypeRule<T>
  nameWithType: TypeRule<T>
  fullName: CalcExpr.Parsing.Rules.TypeRule<T>
  nameWithType.vb: TypeRule(Of T)
  fullName.vb: CalcExpr.Parsing.Rules.TypeRule(Of T)
  name.vb: TypeRule(Of T)
  spec.csharp:
  - uid: CalcExpr.Parsing.Rules.TypeRule`1
    name: TypeRule
    href: CalcExpr.Parsing.Rules.TypeRule-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: CalcExpr.Parsing.Rules.TypeRule`1
    name: TypeRule
    href: CalcExpr.Parsing.Rules.TypeRule-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: CalcExpr.Parsing.Rules.TypeRule`1.op_Inequality*
  commentId: Overload:CalcExpr.Parsing.Rules.TypeRule`1.op_Inequality
  href: CalcExpr.Parsing.Rules.TypeRule-1.html#CalcExpr_Parsing_Rules_TypeRule_1_op_Inequality_CalcExpr_Parsing_Rules_TypeRule__0__CalcExpr_Parsing_Rules_IParserRule_
  name: operator !=
  nameWithType: TypeRule<T>.operator !=
  fullName: CalcExpr.Parsing.Rules.TypeRule<T>.operator !=
  nameWithType.vb: TypeRule(Of T).<>
  fullName.vb: CalcExpr.Parsing.Rules.TypeRule(Of T).<>
  name.vb: <>
  spec.csharp:
  - name: operator
  - name: " "
  - uid: CalcExpr.Parsing.Rules.TypeRule`1.op_Inequality*
    name: '!='
    href: CalcExpr.Parsing.Rules.TypeRule-1.html#CalcExpr_Parsing_Rules_TypeRule_1_op_Inequality_CalcExpr_Parsing_Rules_TypeRule__0__CalcExpr_Parsing_Rules_IParserRule_
