### YamlMime:ManagedReference
items:
- uid: CalcExpr.Parsing.Rules.RegexRule
  commentId: T:CalcExpr.Parsing.Rules.RegexRule
  id: RegexRule
  parent: CalcExpr.Parsing.Rules
  children:
  - CalcExpr.Parsing.Rules.RegexRule.#ctor(System.String,System.String,System.Func{System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.TokenMatch,CalcExpr.Parsing.Parser,CalcExpr.Expressions.IExpression},System.Text.RegularExpressions.RegexOptions)
  - CalcExpr.Parsing.Rules.RegexRule.Equals(System.Object)
  - CalcExpr.Parsing.Rules.RegexRule.GetHashCode
  - CalcExpr.Parsing.Rules.RegexRule.Match(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},System.Collections.Generic.IEnumerable{CalcExpr.Parsing.Rules.IParserRule})
  - CalcExpr.Parsing.Rules.RegexRule.Name
  - CalcExpr.Parsing.Rules.RegexRule.Options
  - CalcExpr.Parsing.Rules.RegexRule.Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.Parser)
  - CalcExpr.Parsing.Rules.RegexRule.Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.TokenMatch,CalcExpr.Parsing.Parser)
  - CalcExpr.Parsing.Rules.RegexRule.Regex
  - CalcExpr.Parsing.Rules.RegexRule.op_Equality(CalcExpr.Parsing.Rules.RegexRule,CalcExpr.Parsing.Rules.RegexRule)
  - CalcExpr.Parsing.Rules.RegexRule.op_Inequality(CalcExpr.Parsing.Rules.RegexRule,CalcExpr.Parsing.Rules.RegexRule)
  langs:
  - csharp
  - vb
  name: RegexRule
  nameWithType: RegexRule
  fullName: CalcExpr.Parsing.Rules.RegexRule
  type: Class
  source:
    remote:
      path: src/CalcExpr/Parsing/Rules/RegexRule.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: RegexRule
    path: ../src/CalcExpr/Parsing/Rules/RegexRule.cs
    startLine: 16
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing.Rules
  summary: A parser rule that matches a sequence of tokens using a regular expression.
  example: []
  syntax:
    content: 'public class RegexRule : IParserRule'
    content.vb: Public Class RegexRule Implements IParserRule
  inheritance:
  - System.Object
  implements:
  - CalcExpr.Parsing.Rules.IParserRule
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: CalcExpr.Parsing.Rules.RegexRule.#ctor(System.String,System.String,System.Func{System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.TokenMatch,CalcExpr.Parsing.Parser,CalcExpr.Expressions.IExpression},System.Text.RegularExpressions.RegexOptions)
  commentId: M:CalcExpr.Parsing.Rules.RegexRule.#ctor(System.String,System.String,System.Func{System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.TokenMatch,CalcExpr.Parsing.Parser,CalcExpr.Expressions.IExpression},System.Text.RegularExpressions.RegexOptions)
  id: '#ctor(System.String,System.String,System.Func{System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.TokenMatch,CalcExpr.Parsing.Parser,CalcExpr.Expressions.IExpression},System.Text.RegularExpressions.RegexOptions)'
  parent: CalcExpr.Parsing.Rules.RegexRule
  langs:
  - csharp
  - vb
  name: RegexRule(string, string, Func<ImmutableArray<IToken>, TokenMatch, Parser, IExpression>, RegexOptions)
  nameWithType: RegexRule.RegexRule(string, string, Func<ImmutableArray<IToken>, TokenMatch, Parser, IExpression>, RegexOptions)
  fullName: CalcExpr.Parsing.Rules.RegexRule.RegexRule(string, string, System.Func<System.Collections.Immutable.ImmutableArray<CalcExpr.Tokenization.Tokens.IToken>, CalcExpr.Parsing.TokenMatch, CalcExpr.Parsing.Parser, CalcExpr.Expressions.IExpression>, System.Text.RegularExpressions.RegexOptions)
  type: Constructor
  source:
    remote:
      path: src/CalcExpr/Parsing/Rules/RegexRule.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: .ctor
    path: ../src/CalcExpr/Parsing/Rules/RegexRule.cs
    startLine: 16
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing.Rules
  summary: A parser rule that matches a sequence of tokens using a regular expression.
  example: []
  syntax:
    content: public RegexRule(string name, string regex, Func<ImmutableArray<IToken>, TokenMatch, Parser, IExpression> parse, RegexOptions options = RegexOptions.None)
    parameters:
    - id: name
      type: System.String
      description: The name of the rule.
    - id: regex
      type: System.String
      description: The regular expression to match a sequence of tokens.
    - id: parse
      type: System.Func{System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.TokenMatch,CalcExpr.Parsing.Parser,CalcExpr.Expressions.IExpression}
      description: The function to parse the matched token.
    - id: options
      type: System.Text.RegularExpressions.RegexOptions
      description: The regex options to use to match.
    content.vb: Public Sub New(name As String, regex As String, parse As Func(Of ImmutableArray(Of IToken), TokenMatch, Parser, IExpression), options As RegexOptions = RegexOptions.None)
  overload: CalcExpr.Parsing.Rules.RegexRule.#ctor*
  nameWithType.vb: RegexRule.New(String, String, Func(Of ImmutableArray(Of IToken), TokenMatch, Parser, IExpression), RegexOptions)
  fullName.vb: CalcExpr.Parsing.Rules.RegexRule.New(String, String, System.Func(Of System.Collections.Immutable.ImmutableArray(Of CalcExpr.Tokenization.Tokens.IToken), CalcExpr.Parsing.TokenMatch, CalcExpr.Parsing.Parser, CalcExpr.Expressions.IExpression), System.Text.RegularExpressions.RegexOptions)
  name.vb: New(String, String, Func(Of ImmutableArray(Of IToken), TokenMatch, Parser, IExpression), RegexOptions)
- uid: CalcExpr.Parsing.Rules.RegexRule.Name
  commentId: P:CalcExpr.Parsing.Rules.RegexRule.Name
  id: Name
  parent: CalcExpr.Parsing.Rules.RegexRule
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: RegexRule.Name
  fullName: CalcExpr.Parsing.Rules.RegexRule.Name
  type: Property
  source:
    remote:
      path: src/CalcExpr/Parsing/Rules/RegexRule.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: Name
    path: ../src/CalcExpr/Parsing/Rules/RegexRule.cs
    startLine: 23
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing.Rules
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: CalcExpr.Parsing.Rules.RegexRule.Name*
  implements:
  - CalcExpr.Parsing.Rules.IParserRule.Name
- uid: CalcExpr.Parsing.Rules.RegexRule.Regex
  commentId: P:CalcExpr.Parsing.Rules.RegexRule.Regex
  id: Regex
  parent: CalcExpr.Parsing.Rules.RegexRule
  langs:
  - csharp
  - vb
  name: Regex
  nameWithType: RegexRule.Regex
  fullName: CalcExpr.Parsing.Rules.RegexRule.Regex
  type: Property
  source:
    remote:
      path: src/CalcExpr/Parsing/Rules/RegexRule.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: Regex
    path: ../src/CalcExpr/Parsing/Rules/RegexRule.cs
    startLine: 25
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing.Rules
  syntax:
    content: public string Regex { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Regex As String
  overload: CalcExpr.Parsing.Rules.RegexRule.Regex*
- uid: CalcExpr.Parsing.Rules.RegexRule.Options
  commentId: P:CalcExpr.Parsing.Rules.RegexRule.Options
  id: Options
  parent: CalcExpr.Parsing.Rules.RegexRule
  langs:
  - csharp
  - vb
  name: Options
  nameWithType: RegexRule.Options
  fullName: CalcExpr.Parsing.Rules.RegexRule.Options
  type: Property
  source:
    remote:
      path: src/CalcExpr/Parsing/Rules/RegexRule.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: Options
    path: ../src/CalcExpr/Parsing/Rules/RegexRule.cs
    startLine: 27
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing.Rules
  syntax:
    content: public RegexOptions Options { get; }
    parameters: []
    return:
      type: System.Text.RegularExpressions.RegexOptions
    content.vb: Public ReadOnly Property Options As RegexOptions
  overload: CalcExpr.Parsing.Rules.RegexRule.Options*
- uid: CalcExpr.Parsing.Rules.RegexRule.Match(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},System.Collections.Generic.IEnumerable{CalcExpr.Parsing.Rules.IParserRule})
  commentId: M:CalcExpr.Parsing.Rules.RegexRule.Match(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},System.Collections.Generic.IEnumerable{CalcExpr.Parsing.Rules.IParserRule})
  id: Match(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},System.Collections.Generic.IEnumerable{CalcExpr.Parsing.Rules.IParserRule})
  parent: CalcExpr.Parsing.Rules.RegexRule
  langs:
  - csharp
  - vb
  name: Match(ImmutableArray<IToken>, IEnumerable<IParserRule>)
  nameWithType: RegexRule.Match(ImmutableArray<IToken>, IEnumerable<IParserRule>)
  fullName: CalcExpr.Parsing.Rules.RegexRule.Match(System.Collections.Immutable.ImmutableArray<CalcExpr.Tokenization.Tokens.IToken>, System.Collections.Generic.IEnumerable<CalcExpr.Parsing.Rules.IParserRule>)
  type: Method
  source:
    remote:
      path: src/CalcExpr/Parsing/Rules/RegexRule.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: Match
    path: ../src/CalcExpr/Parsing/Rules/RegexRule.cs
    startLine: 29
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing.Rules
  summary: The function that gets used to find a match in an input.
  example: []
  syntax:
    content: public TokenMatch? Match(ImmutableArray<IToken> input, IEnumerable<IParserRule> _)
    parameters:
    - id: input
      type: System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken}
      description: The input <xref href="System.Collections.Immutable.ImmutableArray%601" data-throw-if-not-resolved="false"></xref> to find the match in.
    - id: _
      type: System.Collections.Generic.IEnumerable{CalcExpr.Parsing.Rules.IParserRule}
    return:
      type: CalcExpr.Parsing.TokenMatch
      description: >-
        A new <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> containing the value of the matching input and the index of where it

        was found; <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> if no match was found.
    content.vb: Public Function Match(input As ImmutableArray(Of IToken), _ As IEnumerable(Of IParserRule)) As TokenMatch
  overload: CalcExpr.Parsing.Rules.RegexRule.Match*
  implements:
  - CalcExpr.Parsing.Rules.IParserRule.Match(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},System.Collections.Generic.IEnumerable{CalcExpr.Parsing.Rules.IParserRule})
  nameWithType.vb: RegexRule.Match(ImmutableArray(Of IToken), IEnumerable(Of IParserRule))
  fullName.vb: CalcExpr.Parsing.Rules.RegexRule.Match(System.Collections.Immutable.ImmutableArray(Of CalcExpr.Tokenization.Tokens.IToken), System.Collections.Generic.IEnumerable(Of CalcExpr.Parsing.Rules.IParserRule))
  name.vb: Match(ImmutableArray(Of IToken), IEnumerable(Of IParserRule))
- uid: CalcExpr.Parsing.Rules.RegexRule.Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.Parser)
  commentId: M:CalcExpr.Parsing.Rules.RegexRule.Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.Parser)
  id: Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.Parser)
  parent: CalcExpr.Parsing.Rules.RegexRule
  langs:
  - csharp
  - vb
  name: Parse(ImmutableArray<IToken>, Parser)
  nameWithType: RegexRule.Parse(ImmutableArray<IToken>, Parser)
  fullName: CalcExpr.Parsing.Rules.RegexRule.Parse(System.Collections.Immutable.ImmutableArray<CalcExpr.Tokenization.Tokens.IToken>, CalcExpr.Parsing.Parser)
  type: Method
  source:
    remote:
      path: src/CalcExpr/Parsing/Rules/RegexRule.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: Parse
    path: ../src/CalcExpr/Parsing/Rules/RegexRule.cs
    startLine: 40
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing.Rules
  summary: Tries to parse the input into an <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public IExpression? Parse(ImmutableArray<IToken> input, Parser parser)
    parameters:
    - id: input
      type: System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken}
      description: The input <xref href="System.Collections.Immutable.ImmutableArray%601" data-throw-if-not-resolved="false"></xref> to parse.
    - id: parser
      type: CalcExpr.Parsing.Parser
      description: The <xref href="CalcExpr.Parsing.Parser" data-throw-if-not-resolved="false"></xref> to use to parse any sub-expressions.
    return:
      type: CalcExpr.Expressions.IExpression
      description: The parsed <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref>; <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> if the input could not be parsed.
    content.vb: Public Function Parse(input As ImmutableArray(Of IToken), parser As Parser) As IExpression
  overload: CalcExpr.Parsing.Rules.RegexRule.Parse*
  implements:
  - CalcExpr.Parsing.Rules.IParserRule.Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.Parser)
  nameWithType.vb: RegexRule.Parse(ImmutableArray(Of IToken), Parser)
  fullName.vb: CalcExpr.Parsing.Rules.RegexRule.Parse(System.Collections.Immutable.ImmutableArray(Of CalcExpr.Tokenization.Tokens.IToken), CalcExpr.Parsing.Parser)
  name.vb: Parse(ImmutableArray(Of IToken), Parser)
- uid: CalcExpr.Parsing.Rules.RegexRule.Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.TokenMatch,CalcExpr.Parsing.Parser)
  commentId: M:CalcExpr.Parsing.Rules.RegexRule.Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.TokenMatch,CalcExpr.Parsing.Parser)
  id: Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.TokenMatch,CalcExpr.Parsing.Parser)
  parent: CalcExpr.Parsing.Rules.RegexRule
  langs:
  - csharp
  - vb
  name: Parse(ImmutableArray<IToken>, TokenMatch, Parser)
  nameWithType: RegexRule.Parse(ImmutableArray<IToken>, TokenMatch, Parser)
  fullName: CalcExpr.Parsing.Rules.RegexRule.Parse(System.Collections.Immutable.ImmutableArray<CalcExpr.Tokenization.Tokens.IToken>, CalcExpr.Parsing.TokenMatch, CalcExpr.Parsing.Parser)
  type: Method
  source:
    remote:
      path: src/CalcExpr/Parsing/Rules/RegexRule.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: Parse
    path: ../src/CalcExpr/Parsing/Rules/RegexRule.cs
    startLine: 50
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing.Rules
  summary: Tries to parse the input <xref href="System.Collections.Immutable.ImmutableArray%601" data-throw-if-not-resolved="false"></xref> into an <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref> using the given token.
  example: []
  syntax:
    content: public IExpression? Parse(ImmutableArray<IToken> input, TokenMatch match, Parser parser)
    parameters:
    - id: input
      type: System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken}
      description: The input <xref href="System.Collections.Immutable.ImmutableArray%601" data-throw-if-not-resolved="false"></xref> to parse.
    - id: match
      type: CalcExpr.Parsing.TokenMatch
      description: The matching <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> with its index to use to parse the input.
    - id: parser
      type: CalcExpr.Parsing.Parser
      description: The <xref href="CalcExpr.Parsing.Parser" data-throw-if-not-resolved="false"></xref> to use to parse any sub-expressions.
    return:
      type: CalcExpr.Expressions.IExpression
      description: The parsed <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref>; <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> if the input could not be parsed.
    content.vb: Public Function Parse(input As ImmutableArray(Of IToken), match As TokenMatch, parser As Parser) As IExpression
  overload: CalcExpr.Parsing.Rules.RegexRule.Parse*
  implements:
  - CalcExpr.Parsing.Rules.IParserRule.Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.TokenMatch,CalcExpr.Parsing.Parser)
  nameWithType.vb: RegexRule.Parse(ImmutableArray(Of IToken), TokenMatch, Parser)
  fullName.vb: CalcExpr.Parsing.Rules.RegexRule.Parse(System.Collections.Immutable.ImmutableArray(Of CalcExpr.Tokenization.Tokens.IToken), CalcExpr.Parsing.TokenMatch, CalcExpr.Parsing.Parser)
  name.vb: Parse(ImmutableArray(Of IToken), TokenMatch, Parser)
- uid: CalcExpr.Parsing.Rules.RegexRule.Equals(System.Object)
  commentId: M:CalcExpr.Parsing.Rules.RegexRule.Equals(System.Object)
  id: Equals(System.Object)
  parent: CalcExpr.Parsing.Rules.RegexRule
  langs:
  - csharp
  - vb
  name: Equals(object?)
  nameWithType: RegexRule.Equals(object?)
  fullName: CalcExpr.Parsing.Rules.RegexRule.Equals(object?)
  type: Method
  source:
    remote:
      path: src/CalcExpr/Parsing/Rules/RegexRule.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: Equals
    path: ../src/CalcExpr/Parsing/Rules/RegexRule.cs
    startLine: 53
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing.Rules
  summary: Determines whether the specified object is equal to the current object.
  example: []
  syntax:
    content: public override bool Equals(object? obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare with the current object.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the specified object  is equal to the current object; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: CalcExpr.Parsing.Rules.RegexRule.Equals*
  nameWithType.vb: RegexRule.Equals(Object)
  fullName.vb: CalcExpr.Parsing.Rules.RegexRule.Equals(Object)
  name.vb: Equals(Object)
- uid: CalcExpr.Parsing.Rules.RegexRule.GetHashCode
  commentId: M:CalcExpr.Parsing.Rules.RegexRule.GetHashCode
  id: GetHashCode
  parent: CalcExpr.Parsing.Rules.RegexRule
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: RegexRule.GetHashCode()
  fullName: CalcExpr.Parsing.Rules.RegexRule.GetHashCode()
  type: Method
  source:
    remote:
      path: src/CalcExpr/Parsing/Rules/RegexRule.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: GetHashCode
    path: ../src/CalcExpr/Parsing/Rules/RegexRule.cs
    startLine: 56
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing.Rules
  summary: Serves as the default hash function.
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A hash code for the current object.
    content.vb: Public Overrides Function GetHashCode() As Integer
  overridden: System.Object.GetHashCode
  overload: CalcExpr.Parsing.Rules.RegexRule.GetHashCode*
- uid: CalcExpr.Parsing.Rules.RegexRule.op_Equality(CalcExpr.Parsing.Rules.RegexRule,CalcExpr.Parsing.Rules.RegexRule)
  commentId: M:CalcExpr.Parsing.Rules.RegexRule.op_Equality(CalcExpr.Parsing.Rules.RegexRule,CalcExpr.Parsing.Rules.RegexRule)
  id: op_Equality(CalcExpr.Parsing.Rules.RegexRule,CalcExpr.Parsing.Rules.RegexRule)
  parent: CalcExpr.Parsing.Rules.RegexRule
  langs:
  - csharp
  - vb
  name: operator ==(RegexRule, RegexRule)
  nameWithType: RegexRule.operator ==(RegexRule, RegexRule)
  fullName: CalcExpr.Parsing.Rules.RegexRule.operator ==(CalcExpr.Parsing.Rules.RegexRule, CalcExpr.Parsing.Rules.RegexRule)
  type: Operator
  source:
    remote:
      path: src/CalcExpr/Parsing/Rules/RegexRule.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: op_Equality
    path: ../src/CalcExpr/Parsing/Rules/RegexRule.cs
    startLine: 59
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing.Rules
  syntax:
    content: public static bool operator ==(RegexRule a, RegexRule b)
    parameters:
    - id: a
      type: CalcExpr.Parsing.Rules.RegexRule
    - id: b
      type: CalcExpr.Parsing.Rules.RegexRule
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(a As RegexRule, b As RegexRule) As Boolean
  overload: CalcExpr.Parsing.Rules.RegexRule.op_Equality*
  nameWithType.vb: RegexRule.=(RegexRule, RegexRule)
  fullName.vb: CalcExpr.Parsing.Rules.RegexRule.=(CalcExpr.Parsing.Rules.RegexRule, CalcExpr.Parsing.Rules.RegexRule)
  name.vb: =(RegexRule, RegexRule)
- uid: CalcExpr.Parsing.Rules.RegexRule.op_Inequality(CalcExpr.Parsing.Rules.RegexRule,CalcExpr.Parsing.Rules.RegexRule)
  commentId: M:CalcExpr.Parsing.Rules.RegexRule.op_Inequality(CalcExpr.Parsing.Rules.RegexRule,CalcExpr.Parsing.Rules.RegexRule)
  id: op_Inequality(CalcExpr.Parsing.Rules.RegexRule,CalcExpr.Parsing.Rules.RegexRule)
  parent: CalcExpr.Parsing.Rules.RegexRule
  langs:
  - csharp
  - vb
  name: operator !=(RegexRule, RegexRule)
  nameWithType: RegexRule.operator !=(RegexRule, RegexRule)
  fullName: CalcExpr.Parsing.Rules.RegexRule.operator !=(CalcExpr.Parsing.Rules.RegexRule, CalcExpr.Parsing.Rules.RegexRule)
  type: Operator
  source:
    remote:
      path: src/CalcExpr/Parsing/Rules/RegexRule.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: op_Inequality
    path: ../src/CalcExpr/Parsing/Rules/RegexRule.cs
    startLine: 62
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Parsing.Rules
  syntax:
    content: public static bool operator !=(RegexRule a, RegexRule b)
    parameters:
    - id: a
      type: CalcExpr.Parsing.Rules.RegexRule
    - id: b
      type: CalcExpr.Parsing.Rules.RegexRule
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(a As RegexRule, b As RegexRule) As Boolean
  overload: CalcExpr.Parsing.Rules.RegexRule.op_Inequality*
  nameWithType.vb: RegexRule.<>(RegexRule, RegexRule)
  fullName.vb: CalcExpr.Parsing.Rules.RegexRule.<>(CalcExpr.Parsing.Rules.RegexRule, CalcExpr.Parsing.Rules.RegexRule)
  name.vb: <>(RegexRule, RegexRule)
references:
- uid: CalcExpr.Parsing.Rules
  commentId: N:CalcExpr.Parsing.Rules
  href: CalcExpr.html
  name: CalcExpr.Parsing.Rules
  nameWithType: CalcExpr.Parsing.Rules
  fullName: CalcExpr.Parsing.Rules
  spec.csharp:
  - uid: CalcExpr
    name: CalcExpr
    href: CalcExpr.html
  - name: .
  - uid: CalcExpr.Parsing
    name: Parsing
    href: CalcExpr.Parsing.html
  - name: .
  - uid: CalcExpr.Parsing.Rules
    name: Rules
    href: CalcExpr.Parsing.Rules.html
  spec.vb:
  - uid: CalcExpr
    name: CalcExpr
    href: CalcExpr.html
  - name: .
  - uid: CalcExpr.Parsing
    name: Parsing
    href: CalcExpr.Parsing.html
  - name: .
  - uid: CalcExpr.Parsing.Rules
    name: Rules
    href: CalcExpr.Parsing.Rules.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: CalcExpr.Parsing.Rules.IParserRule
  commentId: T:CalcExpr.Parsing.Rules.IParserRule
  parent: CalcExpr.Parsing.Rules
  href: CalcExpr.Parsing.Rules.IParserRule.html
  name: IParserRule
  nameWithType: IParserRule
  fullName: CalcExpr.Parsing.Rules.IParserRule
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: CalcExpr.Parsing.Rules.RegexRule.#ctor*
  commentId: Overload:CalcExpr.Parsing.Rules.RegexRule.#ctor
  href: CalcExpr.Parsing.Rules.RegexRule.html#CalcExpr_Parsing_Rules_RegexRule__ctor_System_String_System_String_System_Func_System_Collections_Immutable_ImmutableArray_CalcExpr_Tokenization_Tokens_IToken__CalcExpr_Parsing_TokenMatch_CalcExpr_Parsing_Parser_CalcExpr_Expressions_IExpression__System_Text_RegularExpressions_RegexOptions_
  name: RegexRule
  nameWithType: RegexRule.RegexRule
  fullName: CalcExpr.Parsing.Rules.RegexRule.RegexRule
  nameWithType.vb: RegexRule.New
  fullName.vb: CalcExpr.Parsing.Rules.RegexRule.New
  name.vb: New
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Func{System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.TokenMatch,CalcExpr.Parsing.Parser,CalcExpr.Expressions.IExpression}
  commentId: T:System.Func{System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.TokenMatch,CalcExpr.Parsing.Parser,CalcExpr.Expressions.IExpression}
  parent: System
  definition: System.Func`4
  href: https://learn.microsoft.com/dotnet/api/system.func-4
  name: Func<ImmutableArray<IToken>, TokenMatch, Parser, IExpression>
  nameWithType: Func<ImmutableArray<IToken>, TokenMatch, Parser, IExpression>
  fullName: System.Func<System.Collections.Immutable.ImmutableArray<CalcExpr.Tokenization.Tokens.IToken>, CalcExpr.Parsing.TokenMatch, CalcExpr.Parsing.Parser, CalcExpr.Expressions.IExpression>
  nameWithType.vb: Func(Of ImmutableArray(Of IToken), TokenMatch, Parser, IExpression)
  fullName.vb: System.Func(Of System.Collections.Immutable.ImmutableArray(Of CalcExpr.Tokenization.Tokens.IToken), CalcExpr.Parsing.TokenMatch, CalcExpr.Parsing.Parser, CalcExpr.Expressions.IExpression)
  name.vb: Func(Of ImmutableArray(Of IToken), TokenMatch, Parser, IExpression)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: <
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  - name: <
  - uid: CalcExpr.Tokenization.Tokens.IToken
    name: IToken
    href: CalcExpr.Tokenization.Tokens.IToken.html
  - name: '>'
  - name: ','
  - name: " "
  - uid: CalcExpr.Parsing.TokenMatch
    name: TokenMatch
    href: CalcExpr.Parsing.TokenMatch.html
  - name: ','
  - name: " "
  - uid: CalcExpr.Parsing.Parser
    name: Parser
    href: CalcExpr.Parsing.Parser.html
  - name: ','
  - name: " "
  - uid: CalcExpr.Expressions.IExpression
    name: IExpression
    href: CalcExpr.Expressions.IExpression.html
  - name: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  - name: (
  - name: Of
  - name: " "
  - uid: CalcExpr.Tokenization.Tokens.IToken
    name: IToken
    href: CalcExpr.Tokenization.Tokens.IToken.html
  - name: )
  - name: ','
  - name: " "
  - uid: CalcExpr.Parsing.TokenMatch
    name: TokenMatch
    href: CalcExpr.Parsing.TokenMatch.html
  - name: ','
  - name: " "
  - uid: CalcExpr.Parsing.Parser
    name: Parser
    href: CalcExpr.Parsing.Parser.html
  - name: ','
  - name: " "
  - uid: CalcExpr.Expressions.IExpression
    name: IExpression
    href: CalcExpr.Expressions.IExpression.html
  - name: )
- uid: System.Text.RegularExpressions.RegexOptions
  commentId: T:System.Text.RegularExpressions.RegexOptions
  parent: System.Text.RegularExpressions
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.text.regularexpressions.regexoptions
  name: RegexOptions
  nameWithType: RegexOptions
  fullName: System.Text.RegularExpressions.RegexOptions
- uid: System.Func`4
  commentId: T:System.Func`4
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-4
  name: Func<T1, T2, T3, TResult>
  nameWithType: Func<T1, T2, T3, TResult>
  fullName: System.Func<T1, T2, T3, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, TResult)
  name.vb: Func(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Text.RegularExpressions
  commentId: N:System.Text.RegularExpressions
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Text.RegularExpressions
  nameWithType: System.Text.RegularExpressions
  fullName: System.Text.RegularExpressions
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Text
    name: Text
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text
  - name: .
  - uid: System.Text.RegularExpressions
    name: RegularExpressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text.regularexpressions
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Text
    name: Text
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text
  - name: .
  - uid: System.Text.RegularExpressions
    name: RegularExpressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text.regularexpressions
- uid: CalcExpr.Parsing.Rules.RegexRule.Name*
  commentId: Overload:CalcExpr.Parsing.Rules.RegexRule.Name
  href: CalcExpr.Parsing.Rules.RegexRule.html#CalcExpr_Parsing_Rules_RegexRule_Name
  name: Name
  nameWithType: RegexRule.Name
  fullName: CalcExpr.Parsing.Rules.RegexRule.Name
- uid: CalcExpr.Parsing.Rules.IParserRule.Name
  commentId: P:CalcExpr.Parsing.Rules.IParserRule.Name
  parent: CalcExpr.Parsing.Rules.IParserRule
  href: CalcExpr.Parsing.Rules.IParserRule.html#CalcExpr_Parsing_Rules_IParserRule_Name
  name: Name
  nameWithType: IParserRule.Name
  fullName: CalcExpr.Parsing.Rules.IParserRule.Name
- uid: CalcExpr.Parsing.Rules.RegexRule.Regex*
  commentId: Overload:CalcExpr.Parsing.Rules.RegexRule.Regex
  href: CalcExpr.Parsing.Rules.RegexRule.html#CalcExpr_Parsing_Rules_RegexRule_Regex
  name: Regex
  nameWithType: RegexRule.Regex
  fullName: CalcExpr.Parsing.Rules.RegexRule.Regex
- uid: CalcExpr.Parsing.Rules.RegexRule.Options*
  commentId: Overload:CalcExpr.Parsing.Rules.RegexRule.Options
  href: CalcExpr.Parsing.Rules.RegexRule.html#CalcExpr_Parsing_Rules_RegexRule_Options
  name: Options
  nameWithType: RegexRule.Options
  fullName: CalcExpr.Parsing.Rules.RegexRule.Options
- uid: System.Collections.Immutable.ImmutableArray`1
  commentId: T:System.Collections.Immutable.ImmutableArray`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  name: ImmutableArray<T>
  nameWithType: ImmutableArray<T>
  fullName: System.Collections.Immutable.ImmutableArray<T>
  nameWithType.vb: ImmutableArray(Of T)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T)
  name.vb: ImmutableArray(Of T)
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: CalcExpr.Parsing.Parser
  commentId: T:CalcExpr.Parsing.Parser
  parent: CalcExpr.Parsing
  href: CalcExpr.Parsing.Parser.html
  name: Parser
  nameWithType: Parser
  fullName: CalcExpr.Parsing.Parser
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: CalcExpr.Parsing.Rules.RegexRule.Match*
  commentId: Overload:CalcExpr.Parsing.Rules.RegexRule.Match
  href: CalcExpr.Parsing.Rules.RegexRule.html#CalcExpr_Parsing_Rules_RegexRule_Match_System_Collections_Immutable_ImmutableArray_CalcExpr_Tokenization_Tokens_IToken__System_Collections_Generic_IEnumerable_CalcExpr_Parsing_Rules_IParserRule__
  name: Match
  nameWithType: RegexRule.Match
  fullName: CalcExpr.Parsing.Rules.RegexRule.Match
- uid: CalcExpr.Parsing.Rules.IParserRule.Match(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},System.Collections.Generic.IEnumerable{CalcExpr.Parsing.Rules.IParserRule})
  commentId: M:CalcExpr.Parsing.Rules.IParserRule.Match(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},System.Collections.Generic.IEnumerable{CalcExpr.Parsing.Rules.IParserRule})
  parent: CalcExpr.Parsing.Rules.IParserRule
  isExternal: true
  href: CalcExpr.Parsing.Rules.IParserRule.html#CalcExpr_Parsing_Rules_IParserRule_Match_System_Collections_Immutable_ImmutableArray_CalcExpr_Tokenization_Tokens_IToken__System_Collections_Generic_IEnumerable_CalcExpr_Parsing_Rules_IParserRule__
  name: Match(ImmutableArray<IToken>, IEnumerable<IParserRule>)
  nameWithType: IParserRule.Match(ImmutableArray<IToken>, IEnumerable<IParserRule>)
  fullName: CalcExpr.Parsing.Rules.IParserRule.Match(System.Collections.Immutable.ImmutableArray<CalcExpr.Tokenization.Tokens.IToken>, System.Collections.Generic.IEnumerable<CalcExpr.Parsing.Rules.IParserRule>)
  nameWithType.vb: IParserRule.Match(ImmutableArray(Of IToken), IEnumerable(Of IParserRule))
  fullName.vb: CalcExpr.Parsing.Rules.IParserRule.Match(System.Collections.Immutable.ImmutableArray(Of CalcExpr.Tokenization.Tokens.IToken), System.Collections.Generic.IEnumerable(Of CalcExpr.Parsing.Rules.IParserRule))
  name.vb: Match(ImmutableArray(Of IToken), IEnumerable(Of IParserRule))
  spec.csharp:
  - uid: CalcExpr.Parsing.Rules.IParserRule.Match(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},System.Collections.Generic.IEnumerable{CalcExpr.Parsing.Rules.IParserRule})
    name: Match
    href: CalcExpr.Parsing.Rules.IParserRule.html#CalcExpr_Parsing_Rules_IParserRule_Match_System_Collections_Immutable_ImmutableArray_CalcExpr_Tokenization_Tokens_IToken__System_Collections_Generic_IEnumerable_CalcExpr_Parsing_Rules_IParserRule__
  - name: (
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  - name: <
  - uid: CalcExpr.Tokenization.Tokens.IToken
    name: IToken
    href: CalcExpr.Tokenization.Tokens.IToken.html
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: CalcExpr.Parsing.Rules.IParserRule
    name: IParserRule
    href: CalcExpr.Parsing.Rules.IParserRule.html
  - name: '>'
  - name: )
  spec.vb:
  - uid: CalcExpr.Parsing.Rules.IParserRule.Match(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},System.Collections.Generic.IEnumerable{CalcExpr.Parsing.Rules.IParserRule})
    name: Match
    href: CalcExpr.Parsing.Rules.IParserRule.html#CalcExpr_Parsing_Rules_IParserRule_Match_System_Collections_Immutable_ImmutableArray_CalcExpr_Tokenization_Tokens_IToken__System_Collections_Generic_IEnumerable_CalcExpr_Parsing_Rules_IParserRule__
  - name: (
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  - name: (
  - name: Of
  - name: " "
  - uid: CalcExpr.Tokenization.Tokens.IToken
    name: IToken
    href: CalcExpr.Tokenization.Tokens.IToken.html
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: CalcExpr.Parsing.Rules.IParserRule
    name: IParserRule
    href: CalcExpr.Parsing.Rules.IParserRule.html
  - name: )
  - name: )
- uid: System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken}
  commentId: T:System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken}
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.ImmutableArray`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  name: ImmutableArray<IToken>
  nameWithType: ImmutableArray<IToken>
  fullName: System.Collections.Immutable.ImmutableArray<CalcExpr.Tokenization.Tokens.IToken>
  nameWithType.vb: ImmutableArray(Of IToken)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of CalcExpr.Tokenization.Tokens.IToken)
  name.vb: ImmutableArray(Of IToken)
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  - name: <
  - uid: CalcExpr.Tokenization.Tokens.IToken
    name: IToken
    href: CalcExpr.Tokenization.Tokens.IToken.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  - name: (
  - name: Of
  - name: " "
  - uid: CalcExpr.Tokenization.Tokens.IToken
    name: IToken
    href: CalcExpr.Tokenization.Tokens.IToken.html
  - name: )
- uid: System.Collections.Generic.IEnumerable{CalcExpr.Parsing.Rules.IParserRule}
  commentId: T:System.Collections.Generic.IEnumerable{CalcExpr.Parsing.Rules.IParserRule}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<IParserRule>
  nameWithType: IEnumerable<IParserRule>
  fullName: System.Collections.Generic.IEnumerable<CalcExpr.Parsing.Rules.IParserRule>
  nameWithType.vb: IEnumerable(Of IParserRule)
  fullName.vb: System.Collections.Generic.IEnumerable(Of CalcExpr.Parsing.Rules.IParserRule)
  name.vb: IEnumerable(Of IParserRule)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: CalcExpr.Parsing.Rules.IParserRule
    name: IParserRule
    href: CalcExpr.Parsing.Rules.IParserRule.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: CalcExpr.Parsing.Rules.IParserRule
    name: IParserRule
    href: CalcExpr.Parsing.Rules.IParserRule.html
  - name: )
- uid: CalcExpr.Parsing.TokenMatch
  commentId: T:CalcExpr.Parsing.TokenMatch
  parent: CalcExpr.Parsing
  href: CalcExpr.Parsing.TokenMatch.html
  name: TokenMatch
  nameWithType: TokenMatch
  fullName: CalcExpr.Parsing.TokenMatch
- uid: CalcExpr.Parsing
  commentId: N:CalcExpr.Parsing
  href: CalcExpr.html
  name: CalcExpr.Parsing
  nameWithType: CalcExpr.Parsing
  fullName: CalcExpr.Parsing
  spec.csharp:
  - uid: CalcExpr
    name: CalcExpr
    href: CalcExpr.html
  - name: .
  - uid: CalcExpr.Parsing
    name: Parsing
    href: CalcExpr.Parsing.html
  spec.vb:
  - uid: CalcExpr
    name: CalcExpr
    href: CalcExpr.html
  - name: .
  - uid: CalcExpr.Parsing
    name: Parsing
    href: CalcExpr.Parsing.html
- uid: System.Collections.Immutable
  commentId: N:System.Collections.Immutable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Immutable
  nameWithType: System.Collections.Immutable
  fullName: System.Collections.Immutable
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Immutable
    name: Immutable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Immutable
    name: Immutable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: CalcExpr.Expressions.IExpression
  commentId: T:CalcExpr.Expressions.IExpression
  parent: CalcExpr.Expressions
  href: CalcExpr.Expressions.IExpression.html
  name: IExpression
  nameWithType: IExpression
  fullName: CalcExpr.Expressions.IExpression
- uid: CalcExpr.Parsing.Rules.RegexRule.Parse*
  commentId: Overload:CalcExpr.Parsing.Rules.RegexRule.Parse
  href: CalcExpr.Parsing.Rules.RegexRule.html#CalcExpr_Parsing_Rules_RegexRule_Parse_System_Collections_Immutable_ImmutableArray_CalcExpr_Tokenization_Tokens_IToken__CalcExpr_Parsing_Parser_
  name: Parse
  nameWithType: RegexRule.Parse
  fullName: CalcExpr.Parsing.Rules.RegexRule.Parse
- uid: CalcExpr.Parsing.Rules.IParserRule.Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.Parser)
  commentId: M:CalcExpr.Parsing.Rules.IParserRule.Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.Parser)
  parent: CalcExpr.Parsing.Rules.IParserRule
  isExternal: true
  href: CalcExpr.Parsing.Rules.IParserRule.html#CalcExpr_Parsing_Rules_IParserRule_Parse_System_Collections_Immutable_ImmutableArray_CalcExpr_Tokenization_Tokens_IToken__CalcExpr_Parsing_Parser_
  name: Parse(ImmutableArray<IToken>, Parser)
  nameWithType: IParserRule.Parse(ImmutableArray<IToken>, Parser)
  fullName: CalcExpr.Parsing.Rules.IParserRule.Parse(System.Collections.Immutable.ImmutableArray<CalcExpr.Tokenization.Tokens.IToken>, CalcExpr.Parsing.Parser)
  nameWithType.vb: IParserRule.Parse(ImmutableArray(Of IToken), Parser)
  fullName.vb: CalcExpr.Parsing.Rules.IParserRule.Parse(System.Collections.Immutable.ImmutableArray(Of CalcExpr.Tokenization.Tokens.IToken), CalcExpr.Parsing.Parser)
  name.vb: Parse(ImmutableArray(Of IToken), Parser)
  spec.csharp:
  - uid: CalcExpr.Parsing.Rules.IParserRule.Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.Parser)
    name: Parse
    href: CalcExpr.Parsing.Rules.IParserRule.html#CalcExpr_Parsing_Rules_IParserRule_Parse_System_Collections_Immutable_ImmutableArray_CalcExpr_Tokenization_Tokens_IToken__CalcExpr_Parsing_Parser_
  - name: (
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  - name: <
  - uid: CalcExpr.Tokenization.Tokens.IToken
    name: IToken
    href: CalcExpr.Tokenization.Tokens.IToken.html
  - name: '>'
  - name: ','
  - name: " "
  - uid: CalcExpr.Parsing.Parser
    name: Parser
    href: CalcExpr.Parsing.Parser.html
  - name: )
  spec.vb:
  - uid: CalcExpr.Parsing.Rules.IParserRule.Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.Parser)
    name: Parse
    href: CalcExpr.Parsing.Rules.IParserRule.html#CalcExpr_Parsing_Rules_IParserRule_Parse_System_Collections_Immutable_ImmutableArray_CalcExpr_Tokenization_Tokens_IToken__CalcExpr_Parsing_Parser_
  - name: (
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  - name: (
  - name: Of
  - name: " "
  - uid: CalcExpr.Tokenization.Tokens.IToken
    name: IToken
    href: CalcExpr.Tokenization.Tokens.IToken.html
  - name: )
  - name: ','
  - name: " "
  - uid: CalcExpr.Parsing.Parser
    name: Parser
    href: CalcExpr.Parsing.Parser.html
  - name: )
- uid: CalcExpr.Expressions
  commentId: N:CalcExpr.Expressions
  href: CalcExpr.html
  name: CalcExpr.Expressions
  nameWithType: CalcExpr.Expressions
  fullName: CalcExpr.Expressions
  spec.csharp:
  - uid: CalcExpr
    name: CalcExpr
    href: CalcExpr.html
  - name: .
  - uid: CalcExpr.Expressions
    name: Expressions
    href: CalcExpr.Expressions.html
  spec.vb:
  - uid: CalcExpr
    name: CalcExpr
    href: CalcExpr.html
  - name: .
  - uid: CalcExpr.Expressions
    name: Expressions
    href: CalcExpr.Expressions.html
- uid: CalcExpr.Parsing.Rules.IParserRule.Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.TokenMatch,CalcExpr.Parsing.Parser)
  commentId: M:CalcExpr.Parsing.Rules.IParserRule.Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.TokenMatch,CalcExpr.Parsing.Parser)
  parent: CalcExpr.Parsing.Rules.IParserRule
  isExternal: true
  href: CalcExpr.Parsing.Rules.IParserRule.html#CalcExpr_Parsing_Rules_IParserRule_Parse_System_Collections_Immutable_ImmutableArray_CalcExpr_Tokenization_Tokens_IToken__CalcExpr_Parsing_TokenMatch_CalcExpr_Parsing_Parser_
  name: Parse(ImmutableArray<IToken>, TokenMatch, Parser)
  nameWithType: IParserRule.Parse(ImmutableArray<IToken>, TokenMatch, Parser)
  fullName: CalcExpr.Parsing.Rules.IParserRule.Parse(System.Collections.Immutable.ImmutableArray<CalcExpr.Tokenization.Tokens.IToken>, CalcExpr.Parsing.TokenMatch, CalcExpr.Parsing.Parser)
  nameWithType.vb: IParserRule.Parse(ImmutableArray(Of IToken), TokenMatch, Parser)
  fullName.vb: CalcExpr.Parsing.Rules.IParserRule.Parse(System.Collections.Immutable.ImmutableArray(Of CalcExpr.Tokenization.Tokens.IToken), CalcExpr.Parsing.TokenMatch, CalcExpr.Parsing.Parser)
  name.vb: Parse(ImmutableArray(Of IToken), TokenMatch, Parser)
  spec.csharp:
  - uid: CalcExpr.Parsing.Rules.IParserRule.Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.TokenMatch,CalcExpr.Parsing.Parser)
    name: Parse
    href: CalcExpr.Parsing.Rules.IParserRule.html#CalcExpr_Parsing_Rules_IParserRule_Parse_System_Collections_Immutable_ImmutableArray_CalcExpr_Tokenization_Tokens_IToken__CalcExpr_Parsing_TokenMatch_CalcExpr_Parsing_Parser_
  - name: (
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  - name: <
  - uid: CalcExpr.Tokenization.Tokens.IToken
    name: IToken
    href: CalcExpr.Tokenization.Tokens.IToken.html
  - name: '>'
  - name: ','
  - name: " "
  - uid: CalcExpr.Parsing.TokenMatch
    name: TokenMatch
    href: CalcExpr.Parsing.TokenMatch.html
  - name: ','
  - name: " "
  - uid: CalcExpr.Parsing.Parser
    name: Parser
    href: CalcExpr.Parsing.Parser.html
  - name: )
  spec.vb:
  - uid: CalcExpr.Parsing.Rules.IParserRule.Parse(System.Collections.Immutable.ImmutableArray{CalcExpr.Tokenization.Tokens.IToken},CalcExpr.Parsing.TokenMatch,CalcExpr.Parsing.Parser)
    name: Parse
    href: CalcExpr.Parsing.Rules.IParserRule.html#CalcExpr_Parsing_Rules_IParserRule_Parse_System_Collections_Immutable_ImmutableArray_CalcExpr_Tokenization_Tokens_IToken__CalcExpr_Parsing_TokenMatch_CalcExpr_Parsing_Parser_
  - name: (
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablearray-1
  - name: (
  - name: Of
  - name: " "
  - uid: CalcExpr.Tokenization.Tokens.IToken
    name: IToken
    href: CalcExpr.Tokenization.Tokens.IToken.html
  - name: )
  - name: ','
  - name: " "
  - uid: CalcExpr.Parsing.TokenMatch
    name: TokenMatch
    href: CalcExpr.Parsing.TokenMatch.html
  - name: ','
  - name: " "
  - uid: CalcExpr.Parsing.Parser
    name: Parser
    href: CalcExpr.Parsing.Parser.html
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: CalcExpr.Parsing.Rules.RegexRule.Equals*
  commentId: Overload:CalcExpr.Parsing.Rules.RegexRule.Equals
  href: CalcExpr.Parsing.Rules.RegexRule.html#CalcExpr_Parsing_Rules_RegexRule_Equals_System_Object_
  name: Equals
  nameWithType: RegexRule.Equals
  fullName: CalcExpr.Parsing.Rules.RegexRule.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: CalcExpr.Parsing.Rules.RegexRule.GetHashCode*
  commentId: Overload:CalcExpr.Parsing.Rules.RegexRule.GetHashCode
  href: CalcExpr.Parsing.Rules.RegexRule.html#CalcExpr_Parsing_Rules_RegexRule_GetHashCode
  name: GetHashCode
  nameWithType: RegexRule.GetHashCode
  fullName: CalcExpr.Parsing.Rules.RegexRule.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: CalcExpr.Parsing.Rules.RegexRule.op_Equality*
  commentId: Overload:CalcExpr.Parsing.Rules.RegexRule.op_Equality
  href: CalcExpr.Parsing.Rules.RegexRule.html#CalcExpr_Parsing_Rules_RegexRule_op_Equality_CalcExpr_Parsing_Rules_RegexRule_CalcExpr_Parsing_Rules_RegexRule_
  name: operator ==
  nameWithType: RegexRule.operator ==
  fullName: CalcExpr.Parsing.Rules.RegexRule.operator ==
  nameWithType.vb: RegexRule.=
  fullName.vb: CalcExpr.Parsing.Rules.RegexRule.=
  name.vb: =
  spec.csharp:
  - name: operator
  - name: " "
  - uid: CalcExpr.Parsing.Rules.RegexRule.op_Equality*
    name: ==
    href: CalcExpr.Parsing.Rules.RegexRule.html#CalcExpr_Parsing_Rules_RegexRule_op_Equality_CalcExpr_Parsing_Rules_RegexRule_CalcExpr_Parsing_Rules_RegexRule_
- uid: CalcExpr.Parsing.Rules.RegexRule
  commentId: T:CalcExpr.Parsing.Rules.RegexRule
  parent: CalcExpr.Parsing.Rules
  href: CalcExpr.Parsing.Rules.RegexRule.html
  name: RegexRule
  nameWithType: RegexRule
  fullName: CalcExpr.Parsing.Rules.RegexRule
- uid: CalcExpr.Parsing.Rules.RegexRule.op_Inequality*
  commentId: Overload:CalcExpr.Parsing.Rules.RegexRule.op_Inequality
  href: CalcExpr.Parsing.Rules.RegexRule.html#CalcExpr_Parsing_Rules_RegexRule_op_Inequality_CalcExpr_Parsing_Rules_RegexRule_CalcExpr_Parsing_Rules_RegexRule_
  name: operator !=
  nameWithType: RegexRule.operator !=
  fullName: CalcExpr.Parsing.Rules.RegexRule.operator !=
  nameWithType.vb: RegexRule.<>
  fullName.vb: CalcExpr.Parsing.Rules.RegexRule.<>
  name.vb: <>
  spec.csharp:
  - name: operator
  - name: " "
  - uid: CalcExpr.Parsing.Rules.RegexRule.op_Inequality*
    name: '!='
    href: CalcExpr.Parsing.Rules.RegexRule.html#CalcExpr_Parsing_Rules_RegexRule_op_Inequality_CalcExpr_Parsing_Rules_RegexRule_CalcExpr_Parsing_Rules_RegexRule_
