### YamlMime:ManagedReference
items:
- uid: CalcExpr.NativeFunctions.LogicalFunctions
  commentId: T:CalcExpr.NativeFunctions.LogicalFunctions
  id: LogicalFunctions
  parent: CalcExpr.NativeFunctions
  children:
  - CalcExpr.NativeFunctions.LogicalFunctions.And(System.Boolean,System.Boolean)
  - CalcExpr.NativeFunctions.LogicalFunctions.Bool(System.Boolean)
  - CalcExpr.NativeFunctions.LogicalFunctions.If(System.Boolean,CalcExpr.Expressions.Terminals.Terminal,CalcExpr.Expressions.Terminals.Terminal)
  - CalcExpr.NativeFunctions.LogicalFunctions.IsEven(System.Double)
  - CalcExpr.NativeFunctions.LogicalFunctions.IsInt(CalcExpr.Expressions.IExpression,CalcExpr.Context.ExpressionContext)
  - CalcExpr.NativeFunctions.LogicalFunctions.IsLogical(CalcExpr.Expressions.IExpression,CalcExpr.Context.ExpressionContext)
  - CalcExpr.NativeFunctions.LogicalFunctions.IsNa(CalcExpr.Expressions.IExpression,CalcExpr.Context.ExpressionContext)
  - CalcExpr.NativeFunctions.LogicalFunctions.IsNegative(System.Double,CalcExpr.Context.ExpressionContext)
  - CalcExpr.NativeFunctions.LogicalFunctions.IsNum(CalcExpr.Expressions.IExpression,CalcExpr.Context.ExpressionContext)
  - CalcExpr.NativeFunctions.LogicalFunctions.IsOdd(System.Double)
  - CalcExpr.NativeFunctions.LogicalFunctions.IsPositive(System.Double)
  - CalcExpr.NativeFunctions.LogicalFunctions.Not(System.Boolean)
  - CalcExpr.NativeFunctions.LogicalFunctions.Or(System.Boolean,System.Boolean)
  - CalcExpr.NativeFunctions.LogicalFunctions.Xor(System.Boolean,System.Boolean)
  langs:
  - csharp
  - vb
  name: LogicalFunctions
  nameWithType: LogicalFunctions
  fullName: CalcExpr.NativeFunctions.LogicalFunctions
  type: Class
  source:
    remote:
      path: src/CalcExpr/NativeFunctions/LogicalFunctions.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: LogicalFunctions
    path: ../src/CalcExpr/NativeFunctions/LogicalFunctions.cs
    startLine: 7
  assemblies:
  - CalcExpr
  namespace: CalcExpr.NativeFunctions
  syntax:
    content: public static class LogicalFunctions
    content.vb: Public Module LogicalFunctions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: CalcExpr.NativeFunctions.LogicalFunctions.And(System.Boolean,System.Boolean)
  commentId: M:CalcExpr.NativeFunctions.LogicalFunctions.And(System.Boolean,System.Boolean)
  id: And(System.Boolean,System.Boolean)
  parent: CalcExpr.NativeFunctions.LogicalFunctions
  langs:
  - csharp
  - vb
  name: And(bool, bool)
  nameWithType: LogicalFunctions.And(bool, bool)
  fullName: CalcExpr.NativeFunctions.LogicalFunctions.And(bool, bool)
  type: Method
  source:
    remote:
      path: src/CalcExpr/NativeFunctions/LogicalFunctions.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: And
    path: ../src/CalcExpr/NativeFunctions/LogicalFunctions.cs
    startLine: 9
  assemblies:
  - CalcExpr
  namespace: CalcExpr.NativeFunctions
  syntax:
    content: >-
      [NativeFunction(new string[] { "and" })]

      public static bool And(bool a, bool b)
    parameters:
    - id: a
      type: System.Boolean
    - id: b
      type: System.Boolean
    return:
      type: System.Boolean
    content.vb: >-
      <NativeFunction(New String() { "and" })>

      Public Shared Function [And](a As Boolean, b As Boolean) As Boolean
  overload: CalcExpr.NativeFunctions.LogicalFunctions.And*
  nameWithType.vb: LogicalFunctions.And(Boolean, Boolean)
  fullName.vb: CalcExpr.NativeFunctions.LogicalFunctions.And(Boolean, Boolean)
  name.vb: And(Boolean, Boolean)
- uid: CalcExpr.NativeFunctions.LogicalFunctions.Or(System.Boolean,System.Boolean)
  commentId: M:CalcExpr.NativeFunctions.LogicalFunctions.Or(System.Boolean,System.Boolean)
  id: Or(System.Boolean,System.Boolean)
  parent: CalcExpr.NativeFunctions.LogicalFunctions
  langs:
  - csharp
  - vb
  name: Or(bool, bool)
  nameWithType: LogicalFunctions.Or(bool, bool)
  fullName: CalcExpr.NativeFunctions.LogicalFunctions.Or(bool, bool)
  type: Method
  source:
    remote:
      path: src/CalcExpr/NativeFunctions/LogicalFunctions.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: Or
    path: ../src/CalcExpr/NativeFunctions/LogicalFunctions.cs
    startLine: 14
  assemblies:
  - CalcExpr
  namespace: CalcExpr.NativeFunctions
  syntax:
    content: >-
      [NativeFunction(new string[] { "or" })]

      public static bool Or(bool a, bool b)
    parameters:
    - id: a
      type: System.Boolean
    - id: b
      type: System.Boolean
    return:
      type: System.Boolean
    content.vb: >-
      <NativeFunction(New String() { "or" })>

      Public Shared Function [Or](a As Boolean, b As Boolean) As Boolean
  overload: CalcExpr.NativeFunctions.LogicalFunctions.Or*
  nameWithType.vb: LogicalFunctions.Or(Boolean, Boolean)
  fullName.vb: CalcExpr.NativeFunctions.LogicalFunctions.Or(Boolean, Boolean)
  name.vb: Or(Boolean, Boolean)
- uid: CalcExpr.NativeFunctions.LogicalFunctions.Xor(System.Boolean,System.Boolean)
  commentId: M:CalcExpr.NativeFunctions.LogicalFunctions.Xor(System.Boolean,System.Boolean)
  id: Xor(System.Boolean,System.Boolean)
  parent: CalcExpr.NativeFunctions.LogicalFunctions
  langs:
  - csharp
  - vb
  name: Xor(bool, bool)
  nameWithType: LogicalFunctions.Xor(bool, bool)
  fullName: CalcExpr.NativeFunctions.LogicalFunctions.Xor(bool, bool)
  type: Method
  source:
    remote:
      path: src/CalcExpr/NativeFunctions/LogicalFunctions.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: Xor
    path: ../src/CalcExpr/NativeFunctions/LogicalFunctions.cs
    startLine: 19
  assemblies:
  - CalcExpr
  namespace: CalcExpr.NativeFunctions
  syntax:
    content: >-
      [NativeFunction(new string[] { "xor" })]

      public static bool Xor(bool a, bool b)
    parameters:
    - id: a
      type: System.Boolean
    - id: b
      type: System.Boolean
    return:
      type: System.Boolean
    content.vb: >-
      <NativeFunction(New String() { "xor" })>

      Public Shared Function [Xor](a As Boolean, b As Boolean) As Boolean
  overload: CalcExpr.NativeFunctions.LogicalFunctions.Xor*
  nameWithType.vb: LogicalFunctions.Xor(Boolean, Boolean)
  fullName.vb: CalcExpr.NativeFunctions.LogicalFunctions.Xor(Boolean, Boolean)
  name.vb: Xor(Boolean, Boolean)
- uid: CalcExpr.NativeFunctions.LogicalFunctions.Not(System.Boolean)
  commentId: M:CalcExpr.NativeFunctions.LogicalFunctions.Not(System.Boolean)
  id: Not(System.Boolean)
  parent: CalcExpr.NativeFunctions.LogicalFunctions
  langs:
  - csharp
  - vb
  name: Not(bool)
  nameWithType: LogicalFunctions.Not(bool)
  fullName: CalcExpr.NativeFunctions.LogicalFunctions.Not(bool)
  type: Method
  source:
    remote:
      path: src/CalcExpr/NativeFunctions/LogicalFunctions.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: Not
    path: ../src/CalcExpr/NativeFunctions/LogicalFunctions.cs
    startLine: 24
  assemblies:
  - CalcExpr
  namespace: CalcExpr.NativeFunctions
  syntax:
    content: >-
      [NativeFunction(new string[] { "not" })]

      public static bool Not(bool x)
    parameters:
    - id: x
      type: System.Boolean
    return:
      type: System.Boolean
    content.vb: >-
      <NativeFunction(New String() { "not" })>

      Public Shared Function [Not](x As Boolean) As Boolean
  overload: CalcExpr.NativeFunctions.LogicalFunctions.Not*
  nameWithType.vb: LogicalFunctions.Not(Boolean)
  fullName.vb: CalcExpr.NativeFunctions.LogicalFunctions.Not(Boolean)
  name.vb: Not(Boolean)
- uid: CalcExpr.NativeFunctions.LogicalFunctions.Bool(System.Boolean)
  commentId: M:CalcExpr.NativeFunctions.LogicalFunctions.Bool(System.Boolean)
  id: Bool(System.Boolean)
  parent: CalcExpr.NativeFunctions.LogicalFunctions
  langs:
  - csharp
  - vb
  name: Bool(bool)
  nameWithType: LogicalFunctions.Bool(bool)
  fullName: CalcExpr.NativeFunctions.LogicalFunctions.Bool(bool)
  type: Method
  source:
    remote:
      path: src/CalcExpr/NativeFunctions/LogicalFunctions.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: Bool
    path: ../src/CalcExpr/NativeFunctions/LogicalFunctions.cs
    startLine: 29
  assemblies:
  - CalcExpr
  namespace: CalcExpr.NativeFunctions
  syntax:
    content: >-
      [NativeFunction(new string[] { "bool" })]

      public static bool Bool(bool x)
    parameters:
    - id: x
      type: System.Boolean
    return:
      type: System.Boolean
    content.vb: >-
      <NativeFunction(New String() { "bool" })>

      Public Shared Function Bool(x As Boolean) As Boolean
  overload: CalcExpr.NativeFunctions.LogicalFunctions.Bool*
  nameWithType.vb: LogicalFunctions.Bool(Boolean)
  fullName.vb: CalcExpr.NativeFunctions.LogicalFunctions.Bool(Boolean)
  name.vb: Bool(Boolean)
- uid: CalcExpr.NativeFunctions.LogicalFunctions.If(System.Boolean,CalcExpr.Expressions.Terminals.Terminal,CalcExpr.Expressions.Terminals.Terminal)
  commentId: M:CalcExpr.NativeFunctions.LogicalFunctions.If(System.Boolean,CalcExpr.Expressions.Terminals.Terminal,CalcExpr.Expressions.Terminals.Terminal)
  id: If(System.Boolean,CalcExpr.Expressions.Terminals.Terminal,CalcExpr.Expressions.Terminals.Terminal)
  parent: CalcExpr.NativeFunctions.LogicalFunctions
  langs:
  - csharp
  - vb
  name: If(bool, Terminal, Terminal)
  nameWithType: LogicalFunctions.If(bool, Terminal, Terminal)
  fullName: CalcExpr.NativeFunctions.LogicalFunctions.If(bool, CalcExpr.Expressions.Terminals.Terminal, CalcExpr.Expressions.Terminals.Terminal)
  type: Method
  source:
    remote:
      path: src/CalcExpr/NativeFunctions/LogicalFunctions.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: If
    path: ../src/CalcExpr/NativeFunctions/LogicalFunctions.cs
    startLine: 34
  assemblies:
  - CalcExpr
  namespace: CalcExpr.NativeFunctions
  syntax:
    content: >-
      [NativeFunction(new string[] { "if" })]

      public static Terminal If(bool condition, Terminal isTrue, Terminal isFalse)
    parameters:
    - id: condition
      type: System.Boolean
    - id: isTrue
      type: CalcExpr.Expressions.Terminals.Terminal
    - id: isFalse
      type: CalcExpr.Expressions.Terminals.Terminal
    return:
      type: CalcExpr.Expressions.Terminals.Terminal
    content.vb: >-
      <NativeFunction(New String() { "if" })>

      Public Shared Function [If](condition As Boolean, isTrue As Terminal, isFalse As Terminal) As Terminal
  overload: CalcExpr.NativeFunctions.LogicalFunctions.If*
  nameWithType.vb: LogicalFunctions.If(Boolean, Terminal, Terminal)
  fullName.vb: CalcExpr.NativeFunctions.LogicalFunctions.If(Boolean, CalcExpr.Expressions.Terminals.Terminal, CalcExpr.Expressions.Terminals.Terminal)
  name.vb: If(Boolean, Terminal, Terminal)
- uid: CalcExpr.NativeFunctions.LogicalFunctions.IsNa(CalcExpr.Expressions.IExpression,CalcExpr.Context.ExpressionContext)
  commentId: M:CalcExpr.NativeFunctions.LogicalFunctions.IsNa(CalcExpr.Expressions.IExpression,CalcExpr.Context.ExpressionContext)
  id: IsNa(CalcExpr.Expressions.IExpression,CalcExpr.Context.ExpressionContext)
  parent: CalcExpr.NativeFunctions.LogicalFunctions
  langs:
  - csharp
  - vb
  name: IsNa(IExpression, ExpressionContext)
  nameWithType: LogicalFunctions.IsNa(IExpression, ExpressionContext)
  fullName: CalcExpr.NativeFunctions.LogicalFunctions.IsNa(CalcExpr.Expressions.IExpression, CalcExpr.Context.ExpressionContext)
  type: Method
  source:
    remote:
      path: src/CalcExpr/NativeFunctions/LogicalFunctions.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: IsNa
    path: ../src/CalcExpr/NativeFunctions/LogicalFunctions.cs
    startLine: 39
  assemblies:
  - CalcExpr
  namespace: CalcExpr.NativeFunctions
  syntax:
    content: >-
      [NativeFunction(new string[] { "is_na" })]

      public static bool IsNa(IExpression x, ExpressionContext _)
    parameters:
    - id: x
      type: CalcExpr.Expressions.IExpression
    - id: _
      type: CalcExpr.Context.ExpressionContext
    return:
      type: System.Boolean
    content.vb: >-
      <NativeFunction(New String() { "is_na" })>

      Public Shared Function IsNa(x As IExpression, _ As ExpressionContext) As Boolean
  overload: CalcExpr.NativeFunctions.LogicalFunctions.IsNa*
- uid: CalcExpr.NativeFunctions.LogicalFunctions.IsNum(CalcExpr.Expressions.IExpression,CalcExpr.Context.ExpressionContext)
  commentId: M:CalcExpr.NativeFunctions.LogicalFunctions.IsNum(CalcExpr.Expressions.IExpression,CalcExpr.Context.ExpressionContext)
  id: IsNum(CalcExpr.Expressions.IExpression,CalcExpr.Context.ExpressionContext)
  parent: CalcExpr.NativeFunctions.LogicalFunctions
  langs:
  - csharp
  - vb
  name: IsNum(IExpression, ExpressionContext)
  nameWithType: LogicalFunctions.IsNum(IExpression, ExpressionContext)
  fullName: CalcExpr.NativeFunctions.LogicalFunctions.IsNum(CalcExpr.Expressions.IExpression, CalcExpr.Context.ExpressionContext)
  type: Method
  source:
    remote:
      path: src/CalcExpr/NativeFunctions/LogicalFunctions.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: IsNum
    path: ../src/CalcExpr/NativeFunctions/LogicalFunctions.cs
    startLine: 43
  assemblies:
  - CalcExpr
  namespace: CalcExpr.NativeFunctions
  syntax:
    content: >-
      [NativeFunction(new string[] { "is_num", "is_number" })]

      public static bool IsNum(IExpression x, ExpressionContext _)
    parameters:
    - id: x
      type: CalcExpr.Expressions.IExpression
    - id: _
      type: CalcExpr.Context.ExpressionContext
    return:
      type: System.Boolean
    content.vb: >-
      <NativeFunction(New String() { "is_num", "is_number" })>

      Public Shared Function IsNum(x As IExpression, _ As ExpressionContext) As Boolean
  overload: CalcExpr.NativeFunctions.LogicalFunctions.IsNum*
- uid: CalcExpr.NativeFunctions.LogicalFunctions.IsInt(CalcExpr.Expressions.IExpression,CalcExpr.Context.ExpressionContext)
  commentId: M:CalcExpr.NativeFunctions.LogicalFunctions.IsInt(CalcExpr.Expressions.IExpression,CalcExpr.Context.ExpressionContext)
  id: IsInt(CalcExpr.Expressions.IExpression,CalcExpr.Context.ExpressionContext)
  parent: CalcExpr.NativeFunctions.LogicalFunctions
  langs:
  - csharp
  - vb
  name: IsInt(IExpression, ExpressionContext)
  nameWithType: LogicalFunctions.IsInt(IExpression, ExpressionContext)
  fullName: CalcExpr.NativeFunctions.LogicalFunctions.IsInt(CalcExpr.Expressions.IExpression, CalcExpr.Context.ExpressionContext)
  type: Method
  source:
    remote:
      path: src/CalcExpr/NativeFunctions/LogicalFunctions.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: IsInt
    path: ../src/CalcExpr/NativeFunctions/LogicalFunctions.cs
    startLine: 47
  assemblies:
  - CalcExpr
  namespace: CalcExpr.NativeFunctions
  syntax:
    content: >-
      [NativeFunction(new string[] { "is_int", "is_integer" })]

      public static bool IsInt(IExpression x, ExpressionContext _)
    parameters:
    - id: x
      type: CalcExpr.Expressions.IExpression
    - id: _
      type: CalcExpr.Context.ExpressionContext
    return:
      type: System.Boolean
    content.vb: >-
      <NativeFunction(New String() { "is_int", "is_integer" })>

      Public Shared Function IsInt(x As IExpression, _ As ExpressionContext) As Boolean
  overload: CalcExpr.NativeFunctions.LogicalFunctions.IsInt*
- uid: CalcExpr.NativeFunctions.LogicalFunctions.IsLogical(CalcExpr.Expressions.IExpression,CalcExpr.Context.ExpressionContext)
  commentId: M:CalcExpr.NativeFunctions.LogicalFunctions.IsLogical(CalcExpr.Expressions.IExpression,CalcExpr.Context.ExpressionContext)
  id: IsLogical(CalcExpr.Expressions.IExpression,CalcExpr.Context.ExpressionContext)
  parent: CalcExpr.NativeFunctions.LogicalFunctions
  langs:
  - csharp
  - vb
  name: IsLogical(IExpression, ExpressionContext)
  nameWithType: LogicalFunctions.IsLogical(IExpression, ExpressionContext)
  fullName: CalcExpr.NativeFunctions.LogicalFunctions.IsLogical(CalcExpr.Expressions.IExpression, CalcExpr.Context.ExpressionContext)
  type: Method
  source:
    remote:
      path: src/CalcExpr/NativeFunctions/LogicalFunctions.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: IsLogical
    path: ../src/CalcExpr/NativeFunctions/LogicalFunctions.cs
    startLine: 51
  assemblies:
  - CalcExpr
  namespace: CalcExpr.NativeFunctions
  syntax:
    content: >-
      [NativeFunction(new string[] { "is_logical" })]

      public static bool IsLogical(IExpression x, ExpressionContext _)
    parameters:
    - id: x
      type: CalcExpr.Expressions.IExpression
    - id: _
      type: CalcExpr.Context.ExpressionContext
    return:
      type: System.Boolean
    content.vb: >-
      <NativeFunction(New String() { "is_logical" })>

      Public Shared Function IsLogical(x As IExpression, _ As ExpressionContext) As Boolean
  overload: CalcExpr.NativeFunctions.LogicalFunctions.IsLogical*
- uid: CalcExpr.NativeFunctions.LogicalFunctions.IsEven(System.Double)
  commentId: M:CalcExpr.NativeFunctions.LogicalFunctions.IsEven(System.Double)
  id: IsEven(System.Double)
  parent: CalcExpr.NativeFunctions.LogicalFunctions
  langs:
  - csharp
  - vb
  name: IsEven(double)
  nameWithType: LogicalFunctions.IsEven(double)
  fullName: CalcExpr.NativeFunctions.LogicalFunctions.IsEven(double)
  type: Method
  source:
    remote:
      path: src/CalcExpr/NativeFunctions/LogicalFunctions.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: IsEven
    path: ../src/CalcExpr/NativeFunctions/LogicalFunctions.cs
    startLine: 55
  assemblies:
  - CalcExpr
  namespace: CalcExpr.NativeFunctions
  syntax:
    content: >-
      [NativeFunction(new string[] { "is_even" })]

      public static bool? IsEven(double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: System.Nullable{System.Boolean}
    content.vb: >-
      <NativeFunction(New String() { "is_even" })>

      Public Shared Function IsEven(x As Double) As Boolean?
  overload: CalcExpr.NativeFunctions.LogicalFunctions.IsEven*
  nameWithType.vb: LogicalFunctions.IsEven(Double)
  fullName.vb: CalcExpr.NativeFunctions.LogicalFunctions.IsEven(Double)
  name.vb: IsEven(Double)
- uid: CalcExpr.NativeFunctions.LogicalFunctions.IsOdd(System.Double)
  commentId: M:CalcExpr.NativeFunctions.LogicalFunctions.IsOdd(System.Double)
  id: IsOdd(System.Double)
  parent: CalcExpr.NativeFunctions.LogicalFunctions
  langs:
  - csharp
  - vb
  name: IsOdd(double)
  nameWithType: LogicalFunctions.IsOdd(double)
  fullName: CalcExpr.NativeFunctions.LogicalFunctions.IsOdd(double)
  type: Method
  source:
    remote:
      path: src/CalcExpr/NativeFunctions/LogicalFunctions.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: IsOdd
    path: ../src/CalcExpr/NativeFunctions/LogicalFunctions.cs
    startLine: 61
  assemblies:
  - CalcExpr
  namespace: CalcExpr.NativeFunctions
  syntax:
    content: >-
      [NativeFunction(new string[] { "is_odd" })]

      public static bool? IsOdd(double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: System.Nullable{System.Boolean}
    content.vb: >-
      <NativeFunction(New String() { "is_odd" })>

      Public Shared Function IsOdd(x As Double) As Boolean?
  overload: CalcExpr.NativeFunctions.LogicalFunctions.IsOdd*
  nameWithType.vb: LogicalFunctions.IsOdd(Double)
  fullName.vb: CalcExpr.NativeFunctions.LogicalFunctions.IsOdd(Double)
  name.vb: IsOdd(Double)
- uid: CalcExpr.NativeFunctions.LogicalFunctions.IsPositive(System.Double)
  commentId: M:CalcExpr.NativeFunctions.LogicalFunctions.IsPositive(System.Double)
  id: IsPositive(System.Double)
  parent: CalcExpr.NativeFunctions.LogicalFunctions
  langs:
  - csharp
  - vb
  name: IsPositive(double)
  nameWithType: LogicalFunctions.IsPositive(double)
  fullName: CalcExpr.NativeFunctions.LogicalFunctions.IsPositive(double)
  type: Method
  source:
    remote:
      path: src/CalcExpr/NativeFunctions/LogicalFunctions.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: IsPositive
    path: ../src/CalcExpr/NativeFunctions/LogicalFunctions.cs
    startLine: 67
  assemblies:
  - CalcExpr
  namespace: CalcExpr.NativeFunctions
  syntax:
    content: >-
      [NativeFunction(new string[] { "is_positive" })]

      public static bool? IsPositive(double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: System.Nullable{System.Boolean}
    content.vb: >-
      <NativeFunction(New String() { "is_positive" })>

      Public Shared Function IsPositive(x As Double) As Boolean?
  overload: CalcExpr.NativeFunctions.LogicalFunctions.IsPositive*
  nameWithType.vb: LogicalFunctions.IsPositive(Double)
  fullName.vb: CalcExpr.NativeFunctions.LogicalFunctions.IsPositive(Double)
  name.vb: IsPositive(Double)
- uid: CalcExpr.NativeFunctions.LogicalFunctions.IsNegative(System.Double,CalcExpr.Context.ExpressionContext)
  commentId: M:CalcExpr.NativeFunctions.LogicalFunctions.IsNegative(System.Double,CalcExpr.Context.ExpressionContext)
  id: IsNegative(System.Double,CalcExpr.Context.ExpressionContext)
  parent: CalcExpr.NativeFunctions.LogicalFunctions
  langs:
  - csharp
  - vb
  name: IsNegative(double, ExpressionContext)
  nameWithType: LogicalFunctions.IsNegative(double, ExpressionContext)
  fullName: CalcExpr.NativeFunctions.LogicalFunctions.IsNegative(double, CalcExpr.Context.ExpressionContext)
  type: Method
  source:
    remote:
      path: src/CalcExpr/NativeFunctions/LogicalFunctions.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: IsNegative
    path: ../src/CalcExpr/NativeFunctions/LogicalFunctions.cs
    startLine: 75
  assemblies:
  - CalcExpr
  namespace: CalcExpr.NativeFunctions
  syntax:
    content: >-
      [NativeFunction(new string[] { "is_negative" })]

      public static bool? IsNegative(double x, ExpressionContext _)
    parameters:
    - id: x
      type: System.Double
    - id: _
      type: CalcExpr.Context.ExpressionContext
    return:
      type: System.Nullable{System.Boolean}
    content.vb: >-
      <NativeFunction(New String() { "is_negative" })>

      Public Shared Function IsNegative(x As Double, _ As ExpressionContext) As Boolean?
  overload: CalcExpr.NativeFunctions.LogicalFunctions.IsNegative*
  nameWithType.vb: LogicalFunctions.IsNegative(Double, ExpressionContext)
  fullName.vb: CalcExpr.NativeFunctions.LogicalFunctions.IsNegative(Double, CalcExpr.Context.ExpressionContext)
  name.vb: IsNegative(Double, ExpressionContext)
references:
- uid: CalcExpr.NativeFunctions
  commentId: N:CalcExpr.NativeFunctions
  href: CalcExpr.html
  name: CalcExpr.NativeFunctions
  nameWithType: CalcExpr.NativeFunctions
  fullName: CalcExpr.NativeFunctions
  spec.csharp:
  - uid: CalcExpr
    name: CalcExpr
    href: CalcExpr.html
  - name: .
  - uid: CalcExpr.NativeFunctions
    name: NativeFunctions
    href: CalcExpr.NativeFunctions.html
  spec.vb:
  - uid: CalcExpr
    name: CalcExpr
    href: CalcExpr.html
  - name: .
  - uid: CalcExpr.NativeFunctions
    name: NativeFunctions
    href: CalcExpr.NativeFunctions.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: CalcExpr.NativeFunctions.LogicalFunctions.And*
  commentId: Overload:CalcExpr.NativeFunctions.LogicalFunctions.And
  href: CalcExpr.NativeFunctions.LogicalFunctions.html#CalcExpr_NativeFunctions_LogicalFunctions_And_System_Boolean_System_Boolean_
  name: And
  nameWithType: LogicalFunctions.And
  fullName: CalcExpr.NativeFunctions.LogicalFunctions.And
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: CalcExpr.NativeFunctions.LogicalFunctions.Or*
  commentId: Overload:CalcExpr.NativeFunctions.LogicalFunctions.Or
  href: CalcExpr.NativeFunctions.LogicalFunctions.html#CalcExpr_NativeFunctions_LogicalFunctions_Or_System_Boolean_System_Boolean_
  name: Or
  nameWithType: LogicalFunctions.Or
  fullName: CalcExpr.NativeFunctions.LogicalFunctions.Or
- uid: CalcExpr.NativeFunctions.LogicalFunctions.Xor*
  commentId: Overload:CalcExpr.NativeFunctions.LogicalFunctions.Xor
  href: CalcExpr.NativeFunctions.LogicalFunctions.html#CalcExpr_NativeFunctions_LogicalFunctions_Xor_System_Boolean_System_Boolean_
  name: Xor
  nameWithType: LogicalFunctions.Xor
  fullName: CalcExpr.NativeFunctions.LogicalFunctions.Xor
- uid: CalcExpr.NativeFunctions.LogicalFunctions.Not*
  commentId: Overload:CalcExpr.NativeFunctions.LogicalFunctions.Not
  href: CalcExpr.NativeFunctions.LogicalFunctions.html#CalcExpr_NativeFunctions_LogicalFunctions_Not_System_Boolean_
  name: Not
  nameWithType: LogicalFunctions.Not
  fullName: CalcExpr.NativeFunctions.LogicalFunctions.Not
- uid: CalcExpr.NativeFunctions.LogicalFunctions.Bool*
  commentId: Overload:CalcExpr.NativeFunctions.LogicalFunctions.Bool
  href: CalcExpr.NativeFunctions.LogicalFunctions.html#CalcExpr_NativeFunctions_LogicalFunctions_Bool_System_Boolean_
  name: Bool
  nameWithType: LogicalFunctions.Bool
  fullName: CalcExpr.NativeFunctions.LogicalFunctions.Bool
- uid: CalcExpr.NativeFunctions.LogicalFunctions.If*
  commentId: Overload:CalcExpr.NativeFunctions.LogicalFunctions.If
  href: CalcExpr.NativeFunctions.LogicalFunctions.html#CalcExpr_NativeFunctions_LogicalFunctions_If_System_Boolean_CalcExpr_Expressions_Terminals_Terminal_CalcExpr_Expressions_Terminals_Terminal_
  name: If
  nameWithType: LogicalFunctions.If
  fullName: CalcExpr.NativeFunctions.LogicalFunctions.If
- uid: CalcExpr.Expressions.Terminals.Terminal
  commentId: T:CalcExpr.Expressions.Terminals.Terminal
  parent: CalcExpr.Expressions.Terminals
  href: CalcExpr.Expressions.Terminals.Terminal.html
  name: Terminal
  nameWithType: Terminal
  fullName: CalcExpr.Expressions.Terminals.Terminal
- uid: CalcExpr.Expressions.Terminals
  commentId: N:CalcExpr.Expressions.Terminals
  href: CalcExpr.html
  name: CalcExpr.Expressions.Terminals
  nameWithType: CalcExpr.Expressions.Terminals
  fullName: CalcExpr.Expressions.Terminals
  spec.csharp:
  - uid: CalcExpr
    name: CalcExpr
    href: CalcExpr.html
  - name: .
  - uid: CalcExpr.Expressions
    name: Expressions
    href: CalcExpr.Expressions.html
  - name: .
  - uid: CalcExpr.Expressions.Terminals
    name: Terminals
    href: CalcExpr.Expressions.Terminals.html
  spec.vb:
  - uid: CalcExpr
    name: CalcExpr
    href: CalcExpr.html
  - name: .
  - uid: CalcExpr.Expressions
    name: Expressions
    href: CalcExpr.Expressions.html
  - name: .
  - uid: CalcExpr.Expressions.Terminals
    name: Terminals
    href: CalcExpr.Expressions.Terminals.html
- uid: CalcExpr.NativeFunctions.LogicalFunctions.IsNa*
  commentId: Overload:CalcExpr.NativeFunctions.LogicalFunctions.IsNa
  href: CalcExpr.NativeFunctions.LogicalFunctions.html#CalcExpr_NativeFunctions_LogicalFunctions_IsNa_CalcExpr_Expressions_IExpression_CalcExpr_Context_ExpressionContext_
  name: IsNa
  nameWithType: LogicalFunctions.IsNa
  fullName: CalcExpr.NativeFunctions.LogicalFunctions.IsNa
- uid: CalcExpr.Expressions.IExpression
  commentId: T:CalcExpr.Expressions.IExpression
  parent: CalcExpr.Expressions
  href: CalcExpr.Expressions.IExpression.html
  name: IExpression
  nameWithType: IExpression
  fullName: CalcExpr.Expressions.IExpression
- uid: CalcExpr.Context.ExpressionContext
  commentId: T:CalcExpr.Context.ExpressionContext
  parent: CalcExpr.Context
  href: CalcExpr.Context.ExpressionContext.html
  name: ExpressionContext
  nameWithType: ExpressionContext
  fullName: CalcExpr.Context.ExpressionContext
- uid: CalcExpr.Expressions
  commentId: N:CalcExpr.Expressions
  href: CalcExpr.html
  name: CalcExpr.Expressions
  nameWithType: CalcExpr.Expressions
  fullName: CalcExpr.Expressions
  spec.csharp:
  - uid: CalcExpr
    name: CalcExpr
    href: CalcExpr.html
  - name: .
  - uid: CalcExpr.Expressions
    name: Expressions
    href: CalcExpr.Expressions.html
  spec.vb:
  - uid: CalcExpr
    name: CalcExpr
    href: CalcExpr.html
  - name: .
  - uid: CalcExpr.Expressions
    name: Expressions
    href: CalcExpr.Expressions.html
- uid: CalcExpr.Context
  commentId: N:CalcExpr.Context
  href: CalcExpr.html
  name: CalcExpr.Context
  nameWithType: CalcExpr.Context
  fullName: CalcExpr.Context
  spec.csharp:
  - uid: CalcExpr
    name: CalcExpr
    href: CalcExpr.html
  - name: .
  - uid: CalcExpr.Context
    name: Context
    href: CalcExpr.Context.html
  spec.vb:
  - uid: CalcExpr
    name: CalcExpr
    href: CalcExpr.html
  - name: .
  - uid: CalcExpr.Context
    name: Context
    href: CalcExpr.Context.html
- uid: CalcExpr.NativeFunctions.LogicalFunctions.IsNum*
  commentId: Overload:CalcExpr.NativeFunctions.LogicalFunctions.IsNum
  href: CalcExpr.NativeFunctions.LogicalFunctions.html#CalcExpr_NativeFunctions_LogicalFunctions_IsNum_CalcExpr_Expressions_IExpression_CalcExpr_Context_ExpressionContext_
  name: IsNum
  nameWithType: LogicalFunctions.IsNum
  fullName: CalcExpr.NativeFunctions.LogicalFunctions.IsNum
- uid: CalcExpr.NativeFunctions.LogicalFunctions.IsInt*
  commentId: Overload:CalcExpr.NativeFunctions.LogicalFunctions.IsInt
  href: CalcExpr.NativeFunctions.LogicalFunctions.html#CalcExpr_NativeFunctions_LogicalFunctions_IsInt_CalcExpr_Expressions_IExpression_CalcExpr_Context_ExpressionContext_
  name: IsInt
  nameWithType: LogicalFunctions.IsInt
  fullName: CalcExpr.NativeFunctions.LogicalFunctions.IsInt
- uid: CalcExpr.NativeFunctions.LogicalFunctions.IsLogical*
  commentId: Overload:CalcExpr.NativeFunctions.LogicalFunctions.IsLogical
  href: CalcExpr.NativeFunctions.LogicalFunctions.html#CalcExpr_NativeFunctions_LogicalFunctions_IsLogical_CalcExpr_Expressions_IExpression_CalcExpr_Context_ExpressionContext_
  name: IsLogical
  nameWithType: LogicalFunctions.IsLogical
  fullName: CalcExpr.NativeFunctions.LogicalFunctions.IsLogical
- uid: CalcExpr.NativeFunctions.LogicalFunctions.IsEven*
  commentId: Overload:CalcExpr.NativeFunctions.LogicalFunctions.IsEven
  href: CalcExpr.NativeFunctions.LogicalFunctions.html#CalcExpr_NativeFunctions_LogicalFunctions_IsEven_System_Double_
  name: IsEven
  nameWithType: LogicalFunctions.IsEven
  fullName: CalcExpr.NativeFunctions.LogicalFunctions.IsEven
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double
  nameWithType: double
  fullName: double
  nameWithType.vb: Double
  fullName.vb: Double
  name.vb: Double
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool?
  nameWithType: bool?
  fullName: bool?
  nameWithType.vb: Boolean?
  fullName.vb: Boolean?
  name.vb: Boolean?
  spec.csharp:
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '?'
  spec.vb:
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '?'
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: CalcExpr.NativeFunctions.LogicalFunctions.IsOdd*
  commentId: Overload:CalcExpr.NativeFunctions.LogicalFunctions.IsOdd
  href: CalcExpr.NativeFunctions.LogicalFunctions.html#CalcExpr_NativeFunctions_LogicalFunctions_IsOdd_System_Double_
  name: IsOdd
  nameWithType: LogicalFunctions.IsOdd
  fullName: CalcExpr.NativeFunctions.LogicalFunctions.IsOdd
- uid: CalcExpr.NativeFunctions.LogicalFunctions.IsPositive*
  commentId: Overload:CalcExpr.NativeFunctions.LogicalFunctions.IsPositive
  href: CalcExpr.NativeFunctions.LogicalFunctions.html#CalcExpr_NativeFunctions_LogicalFunctions_IsPositive_System_Double_
  name: IsPositive
  nameWithType: LogicalFunctions.IsPositive
  fullName: CalcExpr.NativeFunctions.LogicalFunctions.IsPositive
- uid: CalcExpr.NativeFunctions.LogicalFunctions.IsNegative*
  commentId: Overload:CalcExpr.NativeFunctions.LogicalFunctions.IsNegative
  href: CalcExpr.NativeFunctions.LogicalFunctions.html#CalcExpr_NativeFunctions_LogicalFunctions_IsNegative_System_Double_CalcExpr_Context_ExpressionContext_
  name: IsNegative
  nameWithType: LogicalFunctions.IsNegative
  fullName: CalcExpr.NativeFunctions.LogicalFunctions.IsNegative
