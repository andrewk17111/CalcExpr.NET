### YamlMime:ManagedReference
items:
- uid: CalcExpr.Expressions.BinaryOperator
  commentId: T:CalcExpr.Expressions.BinaryOperator
  id: BinaryOperator
  parent: CalcExpr.Expressions
  children:
  - CalcExpr.Expressions.BinaryOperator.#ctor(System.String,CalcExpr.Expressions.IExpression,CalcExpr.Expressions.IExpression)
  - CalcExpr.Expressions.BinaryOperator.ADDITION
  - CalcExpr.Expressions.BinaryOperator.AND
  - CalcExpr.Expressions.BinaryOperator.AND_ALT
  - CalcExpr.Expressions.BinaryOperator.CROSS_MULTIPLICATION
  - CalcExpr.Expressions.BinaryOperator.DIVISION
  - CalcExpr.Expressions.BinaryOperator.EUCLIDEAN_MODULUS
  - CalcExpr.Expressions.BinaryOperator.EXPONENT
  - CalcExpr.Expressions.BinaryOperator.Equals(System.Object)
  - CalcExpr.Expressions.BinaryOperator.Evaluate
  - CalcExpr.Expressions.BinaryOperator.Evaluate(CalcExpr.Context.ExpressionContext)
  - CalcExpr.Expressions.BinaryOperator.GREATER_OR_LESS_THAN
  - CalcExpr.Expressions.BinaryOperator.GREATER_THAN
  - CalcExpr.Expressions.BinaryOperator.GREATER_THAN_OR_EQUAL
  - CalcExpr.Expressions.BinaryOperator.GREATER_THAN_OR_EQUAL_ALT
  - CalcExpr.Expressions.BinaryOperator.GetHashCode
  - CalcExpr.Expressions.BinaryOperator.INT_DIVISION
  - CalcExpr.Expressions.BinaryOperator.IS_EQUAL
  - CalcExpr.Expressions.BinaryOperator.Identifier
  - CalcExpr.Expressions.BinaryOperator.LESS_THAN
  - CalcExpr.Expressions.BinaryOperator.LESS_THAN_OR_EQUAL
  - CalcExpr.Expressions.BinaryOperator.LESS_THAN_OR_EQUAL_ALT
  - CalcExpr.Expressions.BinaryOperator.Left
  - CalcExpr.Expressions.BinaryOperator.MULTIPLICATION
  - CalcExpr.Expressions.BinaryOperator.NOT_EQUAL
  - CalcExpr.Expressions.BinaryOperator.NOT_EQUAL_ALT
  - CalcExpr.Expressions.BinaryOperator.OR
  - CalcExpr.Expressions.BinaryOperator.OR_ALT
  - CalcExpr.Expressions.BinaryOperator.Right
  - CalcExpr.Expressions.BinaryOperator.SLASH_DIVISION
  - CalcExpr.Expressions.BinaryOperator.SUBTRACTION
  - CalcExpr.Expressions.BinaryOperator.StepEvaluate
  - CalcExpr.Expressions.BinaryOperator.StepEvaluate(CalcExpr.Context.ExpressionContext)
  - CalcExpr.Expressions.BinaryOperator.TRUC_MODULUS
  - CalcExpr.Expressions.BinaryOperator.ToString
  - CalcExpr.Expressions.BinaryOperator.ToString(System.String)
  - CalcExpr.Expressions.BinaryOperator.XOR
  langs:
  - csharp
  - vb
  name: BinaryOperator
  nameWithType: BinaryOperator
  fullName: CalcExpr.Expressions.BinaryOperator
  type: Class
  source:
    remote:
      path: src/CalcExpr/Expressions/BinaryOperator.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: BinaryOperator
    path: ../src/CalcExpr/Expressions/BinaryOperator.cs
    startLine: 13
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Expressions
  summary: Initializes a new instance of the <xref href="CalcExpr.Expressions.BinaryOperator" data-throw-if-not-resolved="false"></xref> class.
  example: []
  syntax:
    content: 'public class BinaryOperator : IExpression'
    content.vb: Public Class BinaryOperator Implements IExpression
  inheritance:
  - System.Object
  implements:
  - CalcExpr.Expressions.IExpression
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
- uid: CalcExpr.Expressions.BinaryOperator.#ctor(System.String,CalcExpr.Expressions.IExpression,CalcExpr.Expressions.IExpression)
  commentId: M:CalcExpr.Expressions.BinaryOperator.#ctor(System.String,CalcExpr.Expressions.IExpression,CalcExpr.Expressions.IExpression)
  id: '#ctor(System.String,CalcExpr.Expressions.IExpression,CalcExpr.Expressions.IExpression)'
  parent: CalcExpr.Expressions.BinaryOperator
  langs:
  - csharp
  - vb
  name: BinaryOperator(string, IExpression, IExpression)
  nameWithType: BinaryOperator.BinaryOperator(string, IExpression, IExpression)
  fullName: CalcExpr.Expressions.BinaryOperator.BinaryOperator(string, CalcExpr.Expressions.IExpression, CalcExpr.Expressions.IExpression)
  type: Constructor
  source:
    remote:
      path: src/CalcExpr/Expressions/BinaryOperator.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: .ctor
    path: ../src/CalcExpr/Expressions/BinaryOperator.cs
    startLine: 13
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Expressions
  summary: Initializes a new instance of the <xref href="CalcExpr.Expressions.BinaryOperator" data-throw-if-not-resolved="false"></xref> class.
  example: []
  syntax:
    content: public BinaryOperator(string op, IExpression left, IExpression right)
    parameters:
    - id: op
      type: System.String
      description: The identifier for the operator.
    - id: left
      type: CalcExpr.Expressions.IExpression
      description: The <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref> left operand for this operator.
    - id: right
      type: CalcExpr.Expressions.IExpression
      description: The <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref> right operand for this operator.
    content.vb: Public Sub New(op As String, left As IExpression, right As IExpression)
  overload: CalcExpr.Expressions.BinaryOperator.#ctor*
  nameWithType.vb: BinaryOperator.New(String, IExpression, IExpression)
  fullName.vb: CalcExpr.Expressions.BinaryOperator.New(String, CalcExpr.Expressions.IExpression, CalcExpr.Expressions.IExpression)
  name.vb: New(String, IExpression, IExpression)
- uid: CalcExpr.Expressions.BinaryOperator.ADDITION
  commentId: F:CalcExpr.Expressions.BinaryOperator.ADDITION
  id: ADDITION
  parent: CalcExpr.Expressions.BinaryOperator
  langs:
  - csharp
  - vb
  name: ADDITION
  nameWithType: BinaryOperator.ADDITION
  fullName: CalcExpr.Expressions.BinaryOperator.ADDITION
  type: Field
  source:
    remote:
      path: src/CalcExpr/Expressions/BinaryOperator.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: ADDITION
    path: ../src/CalcExpr/Expressions/BinaryOperator.cs
    startLine: 15
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Expressions
  syntax:
    content: public const string ADDITION = "+"
    return:
      type: System.String
    content.vb: Public Const ADDITION As String = "+"
- uid: CalcExpr.Expressions.BinaryOperator.SUBTRACTION
  commentId: F:CalcExpr.Expressions.BinaryOperator.SUBTRACTION
  id: SUBTRACTION
  parent: CalcExpr.Expressions.BinaryOperator
  langs:
  - csharp
  - vb
  name: SUBTRACTION
  nameWithType: BinaryOperator.SUBTRACTION
  fullName: CalcExpr.Expressions.BinaryOperator.SUBTRACTION
  type: Field
  source:
    remote:
      path: src/CalcExpr/Expressions/BinaryOperator.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: SUBTRACTION
    path: ../src/CalcExpr/Expressions/BinaryOperator.cs
    startLine: 16
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Expressions
  syntax:
    content: public const string SUBTRACTION = "-"
    return:
      type: System.String
    content.vb: Public Const SUBTRACTION As String = "-"
- uid: CalcExpr.Expressions.BinaryOperator.MULTIPLICATION
  commentId: F:CalcExpr.Expressions.BinaryOperator.MULTIPLICATION
  id: MULTIPLICATION
  parent: CalcExpr.Expressions.BinaryOperator
  langs:
  - csharp
  - vb
  name: MULTIPLICATION
  nameWithType: BinaryOperator.MULTIPLICATION
  fullName: CalcExpr.Expressions.BinaryOperator.MULTIPLICATION
  type: Field
  source:
    remote:
      path: src/CalcExpr/Expressions/BinaryOperator.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: MULTIPLICATION
    path: ../src/CalcExpr/Expressions/BinaryOperator.cs
    startLine: 17
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Expressions
  syntax:
    content: public const string MULTIPLICATION = "*"
    return:
      type: System.String
    content.vb: Public Const MULTIPLICATION As String = "*"
- uid: CalcExpr.Expressions.BinaryOperator.CROSS_MULTIPLICATION
  commentId: F:CalcExpr.Expressions.BinaryOperator.CROSS_MULTIPLICATION
  id: CROSS_MULTIPLICATION
  parent: CalcExpr.Expressions.BinaryOperator
  langs:
  - csharp
  - vb
  name: CROSS_MULTIPLICATION
  nameWithType: BinaryOperator.CROSS_MULTIPLICATION
  fullName: CalcExpr.Expressions.BinaryOperator.CROSS_MULTIPLICATION
  type: Field
  source:
    remote:
      path: src/CalcExpr/Expressions/BinaryOperator.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: CROSS_MULTIPLICATION
    path: ../src/CalcExpr/Expressions/BinaryOperator.cs
    startLine: 18
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Expressions
  syntax:
    content: public const string CROSS_MULTIPLICATION = "×"
    return:
      type: System.String
    content.vb: Public Const CROSS_MULTIPLICATION As String = "×"
- uid: CalcExpr.Expressions.BinaryOperator.SLASH_DIVISION
  commentId: F:CalcExpr.Expressions.BinaryOperator.SLASH_DIVISION
  id: SLASH_DIVISION
  parent: CalcExpr.Expressions.BinaryOperator
  langs:
  - csharp
  - vb
  name: SLASH_DIVISION
  nameWithType: BinaryOperator.SLASH_DIVISION
  fullName: CalcExpr.Expressions.BinaryOperator.SLASH_DIVISION
  type: Field
  source:
    remote:
      path: src/CalcExpr/Expressions/BinaryOperator.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: SLASH_DIVISION
    path: ../src/CalcExpr/Expressions/BinaryOperator.cs
    startLine: 19
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Expressions
  syntax:
    content: public const string SLASH_DIVISION = "/"
    return:
      type: System.String
    content.vb: Public Const SLASH_DIVISION As String = "/"
- uid: CalcExpr.Expressions.BinaryOperator.DIVISION
  commentId: F:CalcExpr.Expressions.BinaryOperator.DIVISION
  id: DIVISION
  parent: CalcExpr.Expressions.BinaryOperator
  langs:
  - csharp
  - vb
  name: DIVISION
  nameWithType: BinaryOperator.DIVISION
  fullName: CalcExpr.Expressions.BinaryOperator.DIVISION
  type: Field
  source:
    remote:
      path: src/CalcExpr/Expressions/BinaryOperator.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: DIVISION
    path: ../src/CalcExpr/Expressions/BinaryOperator.cs
    startLine: 20
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Expressions
  syntax:
    content: public const string DIVISION = "÷"
    return:
      type: System.String
    content.vb: Public Const DIVISION As String = "÷"
- uid: CalcExpr.Expressions.BinaryOperator.EXPONENT
  commentId: F:CalcExpr.Expressions.BinaryOperator.EXPONENT
  id: EXPONENT
  parent: CalcExpr.Expressions.BinaryOperator
  langs:
  - csharp
  - vb
  name: EXPONENT
  nameWithType: BinaryOperator.EXPONENT
  fullName: CalcExpr.Expressions.BinaryOperator.EXPONENT
  type: Field
  source:
    remote:
      path: src/CalcExpr/Expressions/BinaryOperator.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: EXPONENT
    path: ../src/CalcExpr/Expressions/BinaryOperator.cs
    startLine: 21
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Expressions
  syntax:
    content: public const string EXPONENT = "^"
    return:
      type: System.String
    content.vb: Public Const EXPONENT As String = "^"
- uid: CalcExpr.Expressions.BinaryOperator.EUCLIDEAN_MODULUS
  commentId: F:CalcExpr.Expressions.BinaryOperator.EUCLIDEAN_MODULUS
  id: EUCLIDEAN_MODULUS
  parent: CalcExpr.Expressions.BinaryOperator
  langs:
  - csharp
  - vb
  name: EUCLIDEAN_MODULUS
  nameWithType: BinaryOperator.EUCLIDEAN_MODULUS
  fullName: CalcExpr.Expressions.BinaryOperator.EUCLIDEAN_MODULUS
  type: Field
  source:
    remote:
      path: src/CalcExpr/Expressions/BinaryOperator.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: EUCLIDEAN_MODULUS
    path: ../src/CalcExpr/Expressions/BinaryOperator.cs
    startLine: 22
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Expressions
  syntax:
    content: public const string EUCLIDEAN_MODULUS = "%"
    return:
      type: System.String
    content.vb: Public Const EUCLIDEAN_MODULUS As String = "%"
- uid: CalcExpr.Expressions.BinaryOperator.TRUC_MODULUS
  commentId: F:CalcExpr.Expressions.BinaryOperator.TRUC_MODULUS
  id: TRUC_MODULUS
  parent: CalcExpr.Expressions.BinaryOperator
  langs:
  - csharp
  - vb
  name: TRUC_MODULUS
  nameWithType: BinaryOperator.TRUC_MODULUS
  fullName: CalcExpr.Expressions.BinaryOperator.TRUC_MODULUS
  type: Field
  source:
    remote:
      path: src/CalcExpr/Expressions/BinaryOperator.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: TRUC_MODULUS
    path: ../src/CalcExpr/Expressions/BinaryOperator.cs
    startLine: 23
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Expressions
  syntax:
    content: public const string TRUC_MODULUS = "%%"
    return:
      type: System.String
    content.vb: Public Const TRUC_MODULUS As String = "%%"
- uid: CalcExpr.Expressions.BinaryOperator.INT_DIVISION
  commentId: F:CalcExpr.Expressions.BinaryOperator.INT_DIVISION
  id: INT_DIVISION
  parent: CalcExpr.Expressions.BinaryOperator
  langs:
  - csharp
  - vb
  name: INT_DIVISION
  nameWithType: BinaryOperator.INT_DIVISION
  fullName: CalcExpr.Expressions.BinaryOperator.INT_DIVISION
  type: Field
  source:
    remote:
      path: src/CalcExpr/Expressions/BinaryOperator.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: INT_DIVISION
    path: ../src/CalcExpr/Expressions/BinaryOperator.cs
    startLine: 24
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Expressions
  syntax:
    content: public const string INT_DIVISION = "//"
    return:
      type: System.String
    content.vb: Public Const INT_DIVISION As String = "//"
- uid: CalcExpr.Expressions.BinaryOperator.AND
  commentId: F:CalcExpr.Expressions.BinaryOperator.AND
  id: AND
  parent: CalcExpr.Expressions.BinaryOperator
  langs:
  - csharp
  - vb
  name: AND
  nameWithType: BinaryOperator.AND
  fullName: CalcExpr.Expressions.BinaryOperator.AND
  type: Field
  source:
    remote:
      path: src/CalcExpr/Expressions/BinaryOperator.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: AND
    path: ../src/CalcExpr/Expressions/BinaryOperator.cs
    startLine: 25
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Expressions
  syntax:
    content: public const string AND = "&&"
    return:
      type: System.String
    content.vb: Public Const AND As String = "&&"
- uid: CalcExpr.Expressions.BinaryOperator.AND_ALT
  commentId: F:CalcExpr.Expressions.BinaryOperator.AND_ALT
  id: AND_ALT
  parent: CalcExpr.Expressions.BinaryOperator
  langs:
  - csharp
  - vb
  name: AND_ALT
  nameWithType: BinaryOperator.AND_ALT
  fullName: CalcExpr.Expressions.BinaryOperator.AND_ALT
  type: Field
  source:
    remote:
      path: src/CalcExpr/Expressions/BinaryOperator.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: AND_ALT
    path: ../src/CalcExpr/Expressions/BinaryOperator.cs
    startLine: 26
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Expressions
  syntax:
    content: public const string AND_ALT = "∧"
    return:
      type: System.String
    content.vb: Public Const AND_ALT As String = "∧"
- uid: CalcExpr.Expressions.BinaryOperator.OR
  commentId: F:CalcExpr.Expressions.BinaryOperator.OR
  id: OR
  parent: CalcExpr.Expressions.BinaryOperator
  langs:
  - csharp
  - vb
  name: OR
  nameWithType: BinaryOperator.OR
  fullName: CalcExpr.Expressions.BinaryOperator.OR
  type: Field
  source:
    remote:
      path: src/CalcExpr/Expressions/BinaryOperator.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: OR
    path: ../src/CalcExpr/Expressions/BinaryOperator.cs
    startLine: 27
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Expressions
  syntax:
    content: public const string OR = "||"
    return:
      type: System.String
    content.vb: Public Const OR As String = "||"
- uid: CalcExpr.Expressions.BinaryOperator.OR_ALT
  commentId: F:CalcExpr.Expressions.BinaryOperator.OR_ALT
  id: OR_ALT
  parent: CalcExpr.Expressions.BinaryOperator
  langs:
  - csharp
  - vb
  name: OR_ALT
  nameWithType: BinaryOperator.OR_ALT
  fullName: CalcExpr.Expressions.BinaryOperator.OR_ALT
  type: Field
  source:
    remote:
      path: src/CalcExpr/Expressions/BinaryOperator.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: OR_ALT
    path: ../src/CalcExpr/Expressions/BinaryOperator.cs
    startLine: 28
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Expressions
  syntax:
    content: public const string OR_ALT = "∨"
    return:
      type: System.String
    content.vb: Public Const OR_ALT As String = "∨"
- uid: CalcExpr.Expressions.BinaryOperator.XOR
  commentId: F:CalcExpr.Expressions.BinaryOperator.XOR
  id: XOR
  parent: CalcExpr.Expressions.BinaryOperator
  langs:
  - csharp
  - vb
  name: XOR
  nameWithType: BinaryOperator.XOR
  fullName: CalcExpr.Expressions.BinaryOperator.XOR
  type: Field
  source:
    remote:
      path: src/CalcExpr/Expressions/BinaryOperator.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: XOR
    path: ../src/CalcExpr/Expressions/BinaryOperator.cs
    startLine: 29
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Expressions
  syntax:
    content: public const string XOR = "⊕"
    return:
      type: System.String
    content.vb: Public Const XOR As String = "⊕"
- uid: CalcExpr.Expressions.BinaryOperator.IS_EQUAL
  commentId: F:CalcExpr.Expressions.BinaryOperator.IS_EQUAL
  id: IS_EQUAL
  parent: CalcExpr.Expressions.BinaryOperator
  langs:
  - csharp
  - vb
  name: IS_EQUAL
  nameWithType: BinaryOperator.IS_EQUAL
  fullName: CalcExpr.Expressions.BinaryOperator.IS_EQUAL
  type: Field
  source:
    remote:
      path: src/CalcExpr/Expressions/BinaryOperator.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: IS_EQUAL
    path: ../src/CalcExpr/Expressions/BinaryOperator.cs
    startLine: 30
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Expressions
  syntax:
    content: public const string IS_EQUAL = "=="
    return:
      type: System.String
    content.vb: Public Const IS_EQUAL As String = "=="
- uid: CalcExpr.Expressions.BinaryOperator.NOT_EQUAL
  commentId: F:CalcExpr.Expressions.BinaryOperator.NOT_EQUAL
  id: NOT_EQUAL
  parent: CalcExpr.Expressions.BinaryOperator
  langs:
  - csharp
  - vb
  name: NOT_EQUAL
  nameWithType: BinaryOperator.NOT_EQUAL
  fullName: CalcExpr.Expressions.BinaryOperator.NOT_EQUAL
  type: Field
  source:
    remote:
      path: src/CalcExpr/Expressions/BinaryOperator.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: NOT_EQUAL
    path: ../src/CalcExpr/Expressions/BinaryOperator.cs
    startLine: 31
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Expressions
  syntax:
    content: public const string NOT_EQUAL = "!="
    return:
      type: System.String
    content.vb: Public Const NOT_EQUAL As String = "!="
- uid: CalcExpr.Expressions.BinaryOperator.NOT_EQUAL_ALT
  commentId: F:CalcExpr.Expressions.BinaryOperator.NOT_EQUAL_ALT
  id: NOT_EQUAL_ALT
  parent: CalcExpr.Expressions.BinaryOperator
  langs:
  - csharp
  - vb
  name: NOT_EQUAL_ALT
  nameWithType: BinaryOperator.NOT_EQUAL_ALT
  fullName: CalcExpr.Expressions.BinaryOperator.NOT_EQUAL_ALT
  type: Field
  source:
    remote:
      path: src/CalcExpr/Expressions/BinaryOperator.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: NOT_EQUAL_ALT
    path: ../src/CalcExpr/Expressions/BinaryOperator.cs
    startLine: 32
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Expressions
  syntax:
    content: public const string NOT_EQUAL_ALT = "≠"
    return:
      type: System.String
    content.vb: Public Const NOT_EQUAL_ALT As String = "≠"
- uid: CalcExpr.Expressions.BinaryOperator.GREATER_OR_LESS_THAN
  commentId: F:CalcExpr.Expressions.BinaryOperator.GREATER_OR_LESS_THAN
  id: GREATER_OR_LESS_THAN
  parent: CalcExpr.Expressions.BinaryOperator
  langs:
  - csharp
  - vb
  name: GREATER_OR_LESS_THAN
  nameWithType: BinaryOperator.GREATER_OR_LESS_THAN
  fullName: CalcExpr.Expressions.BinaryOperator.GREATER_OR_LESS_THAN
  type: Field
  source:
    remote:
      path: src/CalcExpr/Expressions/BinaryOperator.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: GREATER_OR_LESS_THAN
    path: ../src/CalcExpr/Expressions/BinaryOperator.cs
    startLine: 33
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Expressions
  syntax:
    content: public const string GREATER_OR_LESS_THAN = "<>"
    return:
      type: System.String
    content.vb: Public Const GREATER_OR_LESS_THAN As String = "<>"
- uid: CalcExpr.Expressions.BinaryOperator.LESS_THAN
  commentId: F:CalcExpr.Expressions.BinaryOperator.LESS_THAN
  id: LESS_THAN
  parent: CalcExpr.Expressions.BinaryOperator
  langs:
  - csharp
  - vb
  name: LESS_THAN
  nameWithType: BinaryOperator.LESS_THAN
  fullName: CalcExpr.Expressions.BinaryOperator.LESS_THAN
  type: Field
  source:
    remote:
      path: src/CalcExpr/Expressions/BinaryOperator.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: LESS_THAN
    path: ../src/CalcExpr/Expressions/BinaryOperator.cs
    startLine: 34
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Expressions
  syntax:
    content: public const string LESS_THAN = "<"
    return:
      type: System.String
    content.vb: Public Const LESS_THAN As String = "<"
- uid: CalcExpr.Expressions.BinaryOperator.LESS_THAN_OR_EQUAL
  commentId: F:CalcExpr.Expressions.BinaryOperator.LESS_THAN_OR_EQUAL
  id: LESS_THAN_OR_EQUAL
  parent: CalcExpr.Expressions.BinaryOperator
  langs:
  - csharp
  - vb
  name: LESS_THAN_OR_EQUAL
  nameWithType: BinaryOperator.LESS_THAN_OR_EQUAL
  fullName: CalcExpr.Expressions.BinaryOperator.LESS_THAN_OR_EQUAL
  type: Field
  source:
    remote:
      path: src/CalcExpr/Expressions/BinaryOperator.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: LESS_THAN_OR_EQUAL
    path: ../src/CalcExpr/Expressions/BinaryOperator.cs
    startLine: 35
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Expressions
  syntax:
    content: public const string LESS_THAN_OR_EQUAL = "<="
    return:
      type: System.String
    content.vb: Public Const LESS_THAN_OR_EQUAL As String = "<="
- uid: CalcExpr.Expressions.BinaryOperator.LESS_THAN_OR_EQUAL_ALT
  commentId: F:CalcExpr.Expressions.BinaryOperator.LESS_THAN_OR_EQUAL_ALT
  id: LESS_THAN_OR_EQUAL_ALT
  parent: CalcExpr.Expressions.BinaryOperator
  langs:
  - csharp
  - vb
  name: LESS_THAN_OR_EQUAL_ALT
  nameWithType: BinaryOperator.LESS_THAN_OR_EQUAL_ALT
  fullName: CalcExpr.Expressions.BinaryOperator.LESS_THAN_OR_EQUAL_ALT
  type: Field
  source:
    remote:
      path: src/CalcExpr/Expressions/BinaryOperator.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: LESS_THAN_OR_EQUAL_ALT
    path: ../src/CalcExpr/Expressions/BinaryOperator.cs
    startLine: 36
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Expressions
  syntax:
    content: public const string LESS_THAN_OR_EQUAL_ALT = "≤"
    return:
      type: System.String
    content.vb: Public Const LESS_THAN_OR_EQUAL_ALT As String = "≤"
- uid: CalcExpr.Expressions.BinaryOperator.GREATER_THAN
  commentId: F:CalcExpr.Expressions.BinaryOperator.GREATER_THAN
  id: GREATER_THAN
  parent: CalcExpr.Expressions.BinaryOperator
  langs:
  - csharp
  - vb
  name: GREATER_THAN
  nameWithType: BinaryOperator.GREATER_THAN
  fullName: CalcExpr.Expressions.BinaryOperator.GREATER_THAN
  type: Field
  source:
    remote:
      path: src/CalcExpr/Expressions/BinaryOperator.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: GREATER_THAN
    path: ../src/CalcExpr/Expressions/BinaryOperator.cs
    startLine: 37
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Expressions
  syntax:
    content: public const string GREATER_THAN = ">"
    return:
      type: System.String
    content.vb: Public Const GREATER_THAN As String = ">"
- uid: CalcExpr.Expressions.BinaryOperator.GREATER_THAN_OR_EQUAL
  commentId: F:CalcExpr.Expressions.BinaryOperator.GREATER_THAN_OR_EQUAL
  id: GREATER_THAN_OR_EQUAL
  parent: CalcExpr.Expressions.BinaryOperator
  langs:
  - csharp
  - vb
  name: GREATER_THAN_OR_EQUAL
  nameWithType: BinaryOperator.GREATER_THAN_OR_EQUAL
  fullName: CalcExpr.Expressions.BinaryOperator.GREATER_THAN_OR_EQUAL
  type: Field
  source:
    remote:
      path: src/CalcExpr/Expressions/BinaryOperator.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: GREATER_THAN_OR_EQUAL
    path: ../src/CalcExpr/Expressions/BinaryOperator.cs
    startLine: 38
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Expressions
  syntax:
    content: public const string GREATER_THAN_OR_EQUAL = ">="
    return:
      type: System.String
    content.vb: Public Const GREATER_THAN_OR_EQUAL As String = ">="
- uid: CalcExpr.Expressions.BinaryOperator.GREATER_THAN_OR_EQUAL_ALT
  commentId: F:CalcExpr.Expressions.BinaryOperator.GREATER_THAN_OR_EQUAL_ALT
  id: GREATER_THAN_OR_EQUAL_ALT
  parent: CalcExpr.Expressions.BinaryOperator
  langs:
  - csharp
  - vb
  name: GREATER_THAN_OR_EQUAL_ALT
  nameWithType: BinaryOperator.GREATER_THAN_OR_EQUAL_ALT
  fullName: CalcExpr.Expressions.BinaryOperator.GREATER_THAN_OR_EQUAL_ALT
  type: Field
  source:
    remote:
      path: src/CalcExpr/Expressions/BinaryOperator.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: GREATER_THAN_OR_EQUAL_ALT
    path: ../src/CalcExpr/Expressions/BinaryOperator.cs
    startLine: 39
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Expressions
  syntax:
    content: public const string GREATER_THAN_OR_EQUAL_ALT = "≥"
    return:
      type: System.String
    content.vb: Public Const GREATER_THAN_OR_EQUAL_ALT As String = "≥"
- uid: CalcExpr.Expressions.BinaryOperator.Identifier
  commentId: F:CalcExpr.Expressions.BinaryOperator.Identifier
  id: Identifier
  parent: CalcExpr.Expressions.BinaryOperator
  langs:
  - csharp
  - vb
  name: Identifier
  nameWithType: BinaryOperator.Identifier
  fullName: CalcExpr.Expressions.BinaryOperator.Identifier
  type: Field
  source:
    remote:
      path: src/CalcExpr/Expressions/BinaryOperator.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: Identifier
    path: ../src/CalcExpr/Expressions/BinaryOperator.cs
    startLine: 41
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Expressions
  syntax:
    content: public readonly string Identifier
    return:
      type: System.String
    content.vb: Public ReadOnly Identifier As String
- uid: CalcExpr.Expressions.BinaryOperator.Left
  commentId: F:CalcExpr.Expressions.BinaryOperator.Left
  id: Left
  parent: CalcExpr.Expressions.BinaryOperator
  langs:
  - csharp
  - vb
  name: Left
  nameWithType: BinaryOperator.Left
  fullName: CalcExpr.Expressions.BinaryOperator.Left
  type: Field
  source:
    remote:
      path: src/CalcExpr/Expressions/BinaryOperator.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: Left
    path: ../src/CalcExpr/Expressions/BinaryOperator.cs
    startLine: 42
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Expressions
  syntax:
    content: public readonly IExpression Left
    return:
      type: CalcExpr.Expressions.IExpression
    content.vb: Public ReadOnly Left As IExpression
- uid: CalcExpr.Expressions.BinaryOperator.Right
  commentId: F:CalcExpr.Expressions.BinaryOperator.Right
  id: Right
  parent: CalcExpr.Expressions.BinaryOperator
  langs:
  - csharp
  - vb
  name: Right
  nameWithType: BinaryOperator.Right
  fullName: CalcExpr.Expressions.BinaryOperator.Right
  type: Field
  source:
    remote:
      path: src/CalcExpr/Expressions/BinaryOperator.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: Right
    path: ../src/CalcExpr/Expressions/BinaryOperator.cs
    startLine: 43
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Expressions
  syntax:
    content: public readonly IExpression Right
    return:
      type: CalcExpr.Expressions.IExpression
    content.vb: Public ReadOnly Right As IExpression
- uid: CalcExpr.Expressions.BinaryOperator.Evaluate
  commentId: M:CalcExpr.Expressions.BinaryOperator.Evaluate
  id: Evaluate
  parent: CalcExpr.Expressions.BinaryOperator
  langs:
  - csharp
  - vb
  name: Evaluate()
  nameWithType: BinaryOperator.Evaluate()
  fullName: CalcExpr.Expressions.BinaryOperator.Evaluate()
  type: Method
  source:
    remote:
      path: src/CalcExpr/Expressions/BinaryOperator.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: Evaluate
    path: ../src/CalcExpr/Expressions/BinaryOperator.cs
    startLine: 45
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Expressions
  summary: Evaluates and calculates the value of the <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Terminal Evaluate()
    return:
      type: CalcExpr.Expressions.Terminals.Terminal
      description: A new <xref href="CalcExpr.Expressions.Terminals.Terminal" data-throw-if-not-resolved="false"></xref> containing the value of the current <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function Evaluate() As Terminal
  overload: CalcExpr.Expressions.BinaryOperator.Evaluate*
  implements:
  - CalcExpr.Expressions.IExpression.Evaluate
- uid: CalcExpr.Expressions.BinaryOperator.Evaluate(CalcExpr.Context.ExpressionContext)
  commentId: M:CalcExpr.Expressions.BinaryOperator.Evaluate(CalcExpr.Context.ExpressionContext)
  id: Evaluate(CalcExpr.Context.ExpressionContext)
  parent: CalcExpr.Expressions.BinaryOperator
  langs:
  - csharp
  - vb
  name: Evaluate(ExpressionContext)
  nameWithType: BinaryOperator.Evaluate(ExpressionContext)
  fullName: CalcExpr.Expressions.BinaryOperator.Evaluate(CalcExpr.Context.ExpressionContext)
  type: Method
  source:
    remote:
      path: src/CalcExpr/Expressions/BinaryOperator.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: Evaluate
    path: ../src/CalcExpr/Expressions/BinaryOperator.cs
    startLine: 48
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Expressions
  summary: Evaluates and calculates the value of the <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Terminal Evaluate(ExpressionContext context)
    parameters:
    - id: context
      type: CalcExpr.Context.ExpressionContext
      description: The values for each variable that could appear in the <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref>.
    return:
      type: CalcExpr.Expressions.Terminals.Terminal
      description: A new <xref href="CalcExpr.Expressions.Terminals.Terminal" data-throw-if-not-resolved="false"></xref> containing the value of the current <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function Evaluate(context As ExpressionContext) As Terminal
  overload: CalcExpr.Expressions.BinaryOperator.Evaluate*
  implements:
  - CalcExpr.Expressions.IExpression.Evaluate(CalcExpr.Context.ExpressionContext)
- uid: CalcExpr.Expressions.BinaryOperator.StepEvaluate
  commentId: M:CalcExpr.Expressions.BinaryOperator.StepEvaluate
  id: StepEvaluate
  parent: CalcExpr.Expressions.BinaryOperator
  langs:
  - csharp
  - vb
  name: StepEvaluate()
  nameWithType: BinaryOperator.StepEvaluate()
  fullName: CalcExpr.Expressions.BinaryOperator.StepEvaluate()
  type: Method
  source:
    remote:
      path: src/CalcExpr/Expressions/BinaryOperator.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: StepEvaluate
    path: ../src/CalcExpr/Expressions/BinaryOperator.cs
    startLine: 56
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Expressions
  summary: Evaluates and calculates one step towards the value of the <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public IExpression StepEvaluate()
    return:
      type: CalcExpr.Expressions.IExpression
      description: >-
        A new <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref> containing the partially evaluated value of the current 

        <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function StepEvaluate() As IExpression
  overload: CalcExpr.Expressions.BinaryOperator.StepEvaluate*
  implements:
  - CalcExpr.Expressions.IExpression.StepEvaluate
- uid: CalcExpr.Expressions.BinaryOperator.StepEvaluate(CalcExpr.Context.ExpressionContext)
  commentId: M:CalcExpr.Expressions.BinaryOperator.StepEvaluate(CalcExpr.Context.ExpressionContext)
  id: StepEvaluate(CalcExpr.Context.ExpressionContext)
  parent: CalcExpr.Expressions.BinaryOperator
  langs:
  - csharp
  - vb
  name: StepEvaluate(ExpressionContext)
  nameWithType: BinaryOperator.StepEvaluate(ExpressionContext)
  fullName: CalcExpr.Expressions.BinaryOperator.StepEvaluate(CalcExpr.Context.ExpressionContext)
  type: Method
  source:
    remote:
      path: src/CalcExpr/Expressions/BinaryOperator.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: StepEvaluate
    path: ../src/CalcExpr/Expressions/BinaryOperator.cs
    startLine: 59
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Expressions
  summary: Evaluates and calculates one step towards the value of the <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public IExpression StepEvaluate(ExpressionContext context)
    parameters:
    - id: context
      type: CalcExpr.Context.ExpressionContext
      description: The values for each variable that could appear in the <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref>.
    return:
      type: CalcExpr.Expressions.IExpression
      description: >-
        A new <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref> containing the partially evaluated value of the current 

        <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function StepEvaluate(context As ExpressionContext) As IExpression
  overload: CalcExpr.Expressions.BinaryOperator.StepEvaluate*
  implements:
  - CalcExpr.Expressions.IExpression.StepEvaluate(CalcExpr.Context.ExpressionContext)
- uid: CalcExpr.Expressions.BinaryOperator.Equals(System.Object)
  commentId: M:CalcExpr.Expressions.BinaryOperator.Equals(System.Object)
  id: Equals(System.Object)
  parent: CalcExpr.Expressions.BinaryOperator
  langs:
  - csharp
  - vb
  name: Equals(object?)
  nameWithType: BinaryOperator.Equals(object?)
  fullName: CalcExpr.Expressions.BinaryOperator.Equals(object?)
  type: Method
  source:
    remote:
      path: src/CalcExpr/Expressions/BinaryOperator.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: Equals
    path: ../src/CalcExpr/Expressions/BinaryOperator.cs
    startLine: 73
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Expressions
  summary: Determines whether the specified object is equal to the current object.
  example: []
  syntax:
    content: public override bool Equals(object? obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare with the current object.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the specified object  is equal to the current object; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: CalcExpr.Expressions.BinaryOperator.Equals*
  nameWithType.vb: BinaryOperator.Equals(Object)
  fullName.vb: CalcExpr.Expressions.BinaryOperator.Equals(Object)
  name.vb: Equals(Object)
- uid: CalcExpr.Expressions.BinaryOperator.GetHashCode
  commentId: M:CalcExpr.Expressions.BinaryOperator.GetHashCode
  id: GetHashCode
  parent: CalcExpr.Expressions.BinaryOperator
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: BinaryOperator.GetHashCode()
  fullName: CalcExpr.Expressions.BinaryOperator.GetHashCode()
  type: Method
  source:
    remote:
      path: src/CalcExpr/Expressions/BinaryOperator.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: GetHashCode
    path: ../src/CalcExpr/Expressions/BinaryOperator.cs
    startLine: 77
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Expressions
  summary: Serves as the default hash function.
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A hash code for the current object.
    content.vb: Public Overrides Function GetHashCode() As Integer
  overridden: System.Object.GetHashCode
  overload: CalcExpr.Expressions.BinaryOperator.GetHashCode*
- uid: CalcExpr.Expressions.BinaryOperator.ToString
  commentId: M:CalcExpr.Expressions.BinaryOperator.ToString
  id: ToString
  parent: CalcExpr.Expressions.BinaryOperator
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: BinaryOperator.ToString()
  fullName: CalcExpr.Expressions.BinaryOperator.ToString()
  type: Method
  source:
    remote:
      path: src/CalcExpr/Expressions/BinaryOperator.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: ToString
    path: ../src/CalcExpr/Expressions/BinaryOperator.cs
    startLine: 80
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Expressions
  summary: Returns a string that represents the current object.
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A string that represents the current object.
    content.vb: Public Overrides Function ToString() As String
  overridden: System.Object.ToString
  overload: CalcExpr.Expressions.BinaryOperator.ToString*
  implements:
  - CalcExpr.Expressions.IExpression.ToString
- uid: CalcExpr.Expressions.BinaryOperator.ToString(System.String)
  commentId: M:CalcExpr.Expressions.BinaryOperator.ToString(System.String)
  id: ToString(System.String)
  parent: CalcExpr.Expressions.BinaryOperator
  langs:
  - csharp
  - vb
  name: ToString(string?)
  nameWithType: BinaryOperator.ToString(string?)
  fullName: CalcExpr.Expressions.BinaryOperator.ToString(string?)
  type: Method
  source:
    remote:
      path: src/CalcExpr/Expressions/BinaryOperator.cs
      branch: dev
      repo: https://github.com/andrewk17111/CalcExpr.NET.git
    id: ToString
    path: ../src/CalcExpr/Expressions/BinaryOperator.cs
    startLine: 83
  assemblies:
  - CalcExpr
  namespace: CalcExpr.Expressions
  summary: >-
    Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents the current <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref> using the specified 

    format <xref href="System.String" data-throw-if-not-resolved="false"></xref> for number formats.
  example: []
  syntax:
    content: public string ToString(string? format)
    parameters:
    - id: format
      type: System.String
      description: ''
    return:
      type: System.String
      description: >-
        A <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents the current <xref href="CalcExpr.Expressions.IExpression" data-throw-if-not-resolved="false"></xref> using the specified format 

        <xref href="System.String" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function ToString(format As String) As String
  overload: CalcExpr.Expressions.BinaryOperator.ToString*
  implements:
  - CalcExpr.Expressions.IExpression.ToString(System.String)
  nameWithType.vb: BinaryOperator.ToString(String)
  fullName.vb: CalcExpr.Expressions.BinaryOperator.ToString(String)
  name.vb: ToString(String)
references:
- uid: CalcExpr.Expressions.BinaryOperator
  commentId: T:CalcExpr.Expressions.BinaryOperator
  href: CalcExpr.Expressions.BinaryOperator.html
  name: BinaryOperator
  nameWithType: BinaryOperator
  fullName: CalcExpr.Expressions.BinaryOperator
- uid: CalcExpr.Expressions.IExpression
  commentId: T:CalcExpr.Expressions.IExpression
  parent: CalcExpr.Expressions
  href: CalcExpr.Expressions.IExpression.html
  name: IExpression
  nameWithType: IExpression
  fullName: CalcExpr.Expressions.IExpression
- uid: CalcExpr.Expressions
  commentId: N:CalcExpr.Expressions
  href: CalcExpr.html
  name: CalcExpr.Expressions
  nameWithType: CalcExpr.Expressions
  fullName: CalcExpr.Expressions
  spec.csharp:
  - uid: CalcExpr
    name: CalcExpr
    href: CalcExpr.html
  - name: .
  - uid: CalcExpr.Expressions
    name: Expressions
    href: CalcExpr.Expressions.html
  spec.vb:
  - uid: CalcExpr
    name: CalcExpr
    href: CalcExpr.html
  - name: .
  - uid: CalcExpr.Expressions
    name: Expressions
    href: CalcExpr.Expressions.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: CalcExpr.Expressions.BinaryOperator.#ctor*
  commentId: Overload:CalcExpr.Expressions.BinaryOperator.#ctor
  href: CalcExpr.Expressions.BinaryOperator.html#CalcExpr_Expressions_BinaryOperator__ctor_System_String_CalcExpr_Expressions_IExpression_CalcExpr_Expressions_IExpression_
  name: BinaryOperator
  nameWithType: BinaryOperator.BinaryOperator
  fullName: CalcExpr.Expressions.BinaryOperator.BinaryOperator
  nameWithType.vb: BinaryOperator.New
  fullName.vb: CalcExpr.Expressions.BinaryOperator.New
  name.vb: New
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: CalcExpr.Expressions.Terminals.Terminal
  commentId: T:CalcExpr.Expressions.Terminals.Terminal
  parent: CalcExpr.Expressions.Terminals
  href: CalcExpr.Expressions.Terminals.Terminal.html
  name: Terminal
  nameWithType: Terminal
  fullName: CalcExpr.Expressions.Terminals.Terminal
- uid: CalcExpr.Expressions.BinaryOperator.Evaluate*
  commentId: Overload:CalcExpr.Expressions.BinaryOperator.Evaluate
  href: CalcExpr.Expressions.BinaryOperator.html#CalcExpr_Expressions_BinaryOperator_Evaluate
  name: Evaluate
  nameWithType: BinaryOperator.Evaluate
  fullName: CalcExpr.Expressions.BinaryOperator.Evaluate
- uid: CalcExpr.Expressions.IExpression.Evaluate
  commentId: M:CalcExpr.Expressions.IExpression.Evaluate
  parent: CalcExpr.Expressions.IExpression
  href: CalcExpr.Expressions.IExpression.html#CalcExpr_Expressions_IExpression_Evaluate
  name: Evaluate()
  nameWithType: IExpression.Evaluate()
  fullName: CalcExpr.Expressions.IExpression.Evaluate()
  spec.csharp:
  - uid: CalcExpr.Expressions.IExpression.Evaluate
    name: Evaluate
    href: CalcExpr.Expressions.IExpression.html#CalcExpr_Expressions_IExpression_Evaluate
  - name: (
  - name: )
  spec.vb:
  - uid: CalcExpr.Expressions.IExpression.Evaluate
    name: Evaluate
    href: CalcExpr.Expressions.IExpression.html#CalcExpr_Expressions_IExpression_Evaluate
  - name: (
  - name: )
- uid: CalcExpr.Expressions.Terminals
  commentId: N:CalcExpr.Expressions.Terminals
  href: CalcExpr.html
  name: CalcExpr.Expressions.Terminals
  nameWithType: CalcExpr.Expressions.Terminals
  fullName: CalcExpr.Expressions.Terminals
  spec.csharp:
  - uid: CalcExpr
    name: CalcExpr
    href: CalcExpr.html
  - name: .
  - uid: CalcExpr.Expressions
    name: Expressions
    href: CalcExpr.Expressions.html
  - name: .
  - uid: CalcExpr.Expressions.Terminals
    name: Terminals
    href: CalcExpr.Expressions.Terminals.html
  spec.vb:
  - uid: CalcExpr
    name: CalcExpr
    href: CalcExpr.html
  - name: .
  - uid: CalcExpr.Expressions
    name: Expressions
    href: CalcExpr.Expressions.html
  - name: .
  - uid: CalcExpr.Expressions.Terminals
    name: Terminals
    href: CalcExpr.Expressions.Terminals.html
- uid: CalcExpr.Expressions.IExpression.Evaluate(CalcExpr.Context.ExpressionContext)
  commentId: M:CalcExpr.Expressions.IExpression.Evaluate(CalcExpr.Context.ExpressionContext)
  parent: CalcExpr.Expressions.IExpression
  href: CalcExpr.Expressions.IExpression.html#CalcExpr_Expressions_IExpression_Evaluate_CalcExpr_Context_ExpressionContext_
  name: Evaluate(ExpressionContext)
  nameWithType: IExpression.Evaluate(ExpressionContext)
  fullName: CalcExpr.Expressions.IExpression.Evaluate(CalcExpr.Context.ExpressionContext)
  spec.csharp:
  - uid: CalcExpr.Expressions.IExpression.Evaluate(CalcExpr.Context.ExpressionContext)
    name: Evaluate
    href: CalcExpr.Expressions.IExpression.html#CalcExpr_Expressions_IExpression_Evaluate_CalcExpr_Context_ExpressionContext_
  - name: (
  - uid: CalcExpr.Context.ExpressionContext
    name: ExpressionContext
    href: CalcExpr.Context.ExpressionContext.html
  - name: )
  spec.vb:
  - uid: CalcExpr.Expressions.IExpression.Evaluate(CalcExpr.Context.ExpressionContext)
    name: Evaluate
    href: CalcExpr.Expressions.IExpression.html#CalcExpr_Expressions_IExpression_Evaluate_CalcExpr_Context_ExpressionContext_
  - name: (
  - uid: CalcExpr.Context.ExpressionContext
    name: ExpressionContext
    href: CalcExpr.Context.ExpressionContext.html
  - name: )
- uid: CalcExpr.Context.ExpressionContext
  commentId: T:CalcExpr.Context.ExpressionContext
  parent: CalcExpr.Context
  href: CalcExpr.Context.ExpressionContext.html
  name: ExpressionContext
  nameWithType: ExpressionContext
  fullName: CalcExpr.Context.ExpressionContext
- uid: CalcExpr.Context
  commentId: N:CalcExpr.Context
  href: CalcExpr.html
  name: CalcExpr.Context
  nameWithType: CalcExpr.Context
  fullName: CalcExpr.Context
  spec.csharp:
  - uid: CalcExpr
    name: CalcExpr
    href: CalcExpr.html
  - name: .
  - uid: CalcExpr.Context
    name: Context
    href: CalcExpr.Context.html
  spec.vb:
  - uid: CalcExpr
    name: CalcExpr
    href: CalcExpr.html
  - name: .
  - uid: CalcExpr.Context
    name: Context
    href: CalcExpr.Context.html
- uid: CalcExpr.Expressions.BinaryOperator.StepEvaluate*
  commentId: Overload:CalcExpr.Expressions.BinaryOperator.StepEvaluate
  href: CalcExpr.Expressions.BinaryOperator.html#CalcExpr_Expressions_BinaryOperator_StepEvaluate
  name: StepEvaluate
  nameWithType: BinaryOperator.StepEvaluate
  fullName: CalcExpr.Expressions.BinaryOperator.StepEvaluate
- uid: CalcExpr.Expressions.IExpression.StepEvaluate
  commentId: M:CalcExpr.Expressions.IExpression.StepEvaluate
  parent: CalcExpr.Expressions.IExpression
  href: CalcExpr.Expressions.IExpression.html#CalcExpr_Expressions_IExpression_StepEvaluate
  name: StepEvaluate()
  nameWithType: IExpression.StepEvaluate()
  fullName: CalcExpr.Expressions.IExpression.StepEvaluate()
  spec.csharp:
  - uid: CalcExpr.Expressions.IExpression.StepEvaluate
    name: StepEvaluate
    href: CalcExpr.Expressions.IExpression.html#CalcExpr_Expressions_IExpression_StepEvaluate
  - name: (
  - name: )
  spec.vb:
  - uid: CalcExpr.Expressions.IExpression.StepEvaluate
    name: StepEvaluate
    href: CalcExpr.Expressions.IExpression.html#CalcExpr_Expressions_IExpression_StepEvaluate
  - name: (
  - name: )
- uid: CalcExpr.Expressions.IExpression.StepEvaluate(CalcExpr.Context.ExpressionContext)
  commentId: M:CalcExpr.Expressions.IExpression.StepEvaluate(CalcExpr.Context.ExpressionContext)
  parent: CalcExpr.Expressions.IExpression
  href: CalcExpr.Expressions.IExpression.html#CalcExpr_Expressions_IExpression_StepEvaluate_CalcExpr_Context_ExpressionContext_
  name: StepEvaluate(ExpressionContext)
  nameWithType: IExpression.StepEvaluate(ExpressionContext)
  fullName: CalcExpr.Expressions.IExpression.StepEvaluate(CalcExpr.Context.ExpressionContext)
  spec.csharp:
  - uid: CalcExpr.Expressions.IExpression.StepEvaluate(CalcExpr.Context.ExpressionContext)
    name: StepEvaluate
    href: CalcExpr.Expressions.IExpression.html#CalcExpr_Expressions_IExpression_StepEvaluate_CalcExpr_Context_ExpressionContext_
  - name: (
  - uid: CalcExpr.Context.ExpressionContext
    name: ExpressionContext
    href: CalcExpr.Context.ExpressionContext.html
  - name: )
  spec.vb:
  - uid: CalcExpr.Expressions.IExpression.StepEvaluate(CalcExpr.Context.ExpressionContext)
    name: StepEvaluate
    href: CalcExpr.Expressions.IExpression.html#CalcExpr_Expressions_IExpression_StepEvaluate_CalcExpr_Context_ExpressionContext_
  - name: (
  - uid: CalcExpr.Context.ExpressionContext
    name: ExpressionContext
    href: CalcExpr.Context.ExpressionContext.html
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: CalcExpr.Expressions.BinaryOperator.Equals*
  commentId: Overload:CalcExpr.Expressions.BinaryOperator.Equals
  href: CalcExpr.Expressions.BinaryOperator.html#CalcExpr_Expressions_BinaryOperator_Equals_System_Object_
  name: Equals
  nameWithType: BinaryOperator.Equals
  fullName: CalcExpr.Expressions.BinaryOperator.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: CalcExpr.Expressions.BinaryOperator.GetHashCode*
  commentId: Overload:CalcExpr.Expressions.BinaryOperator.GetHashCode
  href: CalcExpr.Expressions.BinaryOperator.html#CalcExpr_Expressions_BinaryOperator_GetHashCode
  name: GetHashCode
  nameWithType: BinaryOperator.GetHashCode
  fullName: CalcExpr.Expressions.BinaryOperator.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: CalcExpr.Expressions.BinaryOperator.ToString*
  commentId: Overload:CalcExpr.Expressions.BinaryOperator.ToString
  href: CalcExpr.Expressions.BinaryOperator.html#CalcExpr_Expressions_BinaryOperator_ToString
  name: ToString
  nameWithType: BinaryOperator.ToString
  fullName: CalcExpr.Expressions.BinaryOperator.ToString
- uid: CalcExpr.Expressions.IExpression.ToString
  commentId: M:CalcExpr.Expressions.IExpression.ToString
  parent: CalcExpr.Expressions.IExpression
  href: CalcExpr.Expressions.IExpression.html#CalcExpr_Expressions_IExpression_ToString
  name: ToString()
  nameWithType: IExpression.ToString()
  fullName: CalcExpr.Expressions.IExpression.ToString()
  spec.csharp:
  - uid: CalcExpr.Expressions.IExpression.ToString
    name: ToString
    href: CalcExpr.Expressions.IExpression.html#CalcExpr_Expressions_IExpression_ToString
  - name: (
  - name: )
  spec.vb:
  - uid: CalcExpr.Expressions.IExpression.ToString
    name: ToString
    href: CalcExpr.Expressions.IExpression.html#CalcExpr_Expressions_IExpression_ToString
  - name: (
  - name: )
- uid: CalcExpr.Expressions.IExpression.ToString(System.String)
  commentId: M:CalcExpr.Expressions.IExpression.ToString(System.String)
  parent: CalcExpr.Expressions.IExpression
  isExternal: true
  href: CalcExpr.Expressions.IExpression.html#CalcExpr_Expressions_IExpression_ToString_System_String_
  name: ToString(string)
  nameWithType: IExpression.ToString(string)
  fullName: CalcExpr.Expressions.IExpression.ToString(string)
  nameWithType.vb: IExpression.ToString(String)
  fullName.vb: CalcExpr.Expressions.IExpression.ToString(String)
  name.vb: ToString(String)
  spec.csharp:
  - uid: CalcExpr.Expressions.IExpression.ToString(System.String)
    name: ToString
    href: CalcExpr.Expressions.IExpression.html#CalcExpr_Expressions_IExpression_ToString_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: CalcExpr.Expressions.IExpression.ToString(System.String)
    name: ToString
    href: CalcExpr.Expressions.IExpression.html#CalcExpr_Expressions_IExpression_ToString_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
