using CalcExpr.Expressions;
using CalcExpr.Expressions.Collections;
using CalcExpr.Expressions.Terminals;
using CalcExpr.Tokenization.Tokens;
using TestCalcExpr.TestUtils;

namespace TestCalcExpr.TestData;

public static partial class TestCases
{
    public static readonly TestCase[] Collections =
    [
        new TestCase("[ 1,  2, 3  , 4, 5]  ",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 2), new SymbolToken(',', 3), new NumberToken("2", 5),
                new SymbolToken(',', 6), new NumberToken("3", 8), new SymbolToken(',', 11), new NumberToken("4", 13), new SymbolToken(',', 14),
                new NumberToken("5", 16), new CloseBracketToken(Bracket.Square, 17)],
            UtilFunctions.Range<Vector>(1, 5)),
        new TestCase("[ 1*1,  2*2, 3 *3  , 4*4, 5*5]  ",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 2), new SymbolToken('*', 3), new NumberToken("1", 4),
                new SymbolToken(',', 5), new NumberToken("2", 7), new SymbolToken('*', 8), new NumberToken("2", 9), new SymbolToken(',', 10),
                new NumberToken("3", 12), new SymbolToken('*', 14), new NumberToken("3", 15), new SymbolToken(',', 18), new NumberToken("4", 20),
                new SymbolToken('*', 21), new NumberToken("4", 22), new SymbolToken(',', 23), new NumberToken("5", 25), new SymbolToken('*', 26),
                new NumberToken("5", 27), new CloseBracketToken(Bracket.Square, 28)],
            new Vector(Enumerable.Range(1, 5).Select(x => new BinaryOperator("*", (Number)x, (Number)x))),
            new Vector(Enumerable.Range(1, 5).Select(x => (Number)(x * x))),
            Enumerable.Range(1, 4).Select(i => (IExpression)new Vector(
                Enumerable.Range(1, i).Select(x => (IExpression)(Number)(x * x))
                    .Union(Enumerable.Range(i + 1, 5 - i)
                        .Select(x => new BinaryOperator("*", (Number)x, (Number)x))))).ToArray()),
        new TestCase("+[1,2,3,4,5]",
            [new SymbolToken('+', 0), new OpenBracketToken(Bracket.Square, 1), new NumberToken("1", 2), new SymbolToken(',', 3),
                new NumberToken("2", 4), new SymbolToken(',', 5), new NumberToken("3", 6), new SymbolToken(',', 7),
                new NumberToken("4", 8), new SymbolToken(',', 9), new NumberToken("5", 10), new CloseBracketToken(Bracket.Square, 11)],
            new PrefixOperator("+", UtilFunctions.Range<Vector>(1, 5)),
            new Vector(Enumerable.Range(1, 5).Select(x => (Number)(+x)))),
        new TestCase("-[1,2,3,4,5]",
            [new SymbolToken('-', 0), new OpenBracketToken(Bracket.Square, 1), new NumberToken("1", 2), new SymbolToken(',', 3),
                new NumberToken("2", 4), new SymbolToken(',', 5), new NumberToken("3", 6), new SymbolToken(',', 7),
                new NumberToken("4", 8), new SymbolToken(',', 9), new NumberToken("5", 10), new CloseBracketToken(Bracket.Square, 11)],
            new PrefixOperator("-", UtilFunctions.Range<Vector>(1, 5)),
            new Vector(Enumerable.Range(1, 5).Select(x => (Number)(-x)))),
        new TestCase("~[1,2,3,4,5]",
            [new SymbolToken('~', 0), new OpenBracketToken(Bracket.Square, 1), new NumberToken("1", 2), new SymbolToken(',', 3),
                new NumberToken("2", 4), new SymbolToken(',', 5), new NumberToken("3", 6), new SymbolToken(',', 7),
                new NumberToken("4", 8), new SymbolToken(',', 9), new NumberToken("5", 10), new CloseBracketToken(Bracket.Square, 11)],
            new PrefixOperator("~", UtilFunctions.Range<Vector>(1, 5)),
            new Vector(Enumerable.Range(1, 5).Select(x => new PrefixOperator("~", (Number)x).Evaluate()))),
        new TestCase("!{1,2,3,4,5}",
            [new SymbolToken('!', 0), new OpenBracketToken(Bracket.Curly, 1), new NumberToken("1", 2), new SymbolToken(',', 3),
                new NumberToken("2", 4), new SymbolToken(',', 5), new NumberToken("3", 6), new SymbolToken(',', 7),
                new NumberToken("4", 8), new SymbolToken(',', 9), new NumberToken("5", 10), new CloseBracketToken(Bracket.Curly, 11)],
            new PrefixOperator("!", UtilFunctions.Range<Set>(1, 5)),
            new Set(Enumerable.Range(1, 5).Select(x => new PrefixOperator("!", (Number)x).Evaluate()))),
        new TestCase("--[1,2,3,4,5]",
            [new SymbolToken('-', 0), new SymbolToken('-', 1), new OpenBracketToken(Bracket.Square, 2), new NumberToken("1", 3),
                new SymbolToken(',', 4), new NumberToken("2", 5), new SymbolToken(',', 6), new NumberToken("3", 7),
                new SymbolToken(',', 8), new NumberToken("4", 9), new SymbolToken(',', 10), new NumberToken("5", 11),
                new CloseBracketToken(Bracket.Square, 12)],
            new PrefixOperator("--", UtilFunctions.Range<Vector>(1, 5)),
            new Vector(Enumerable.Range(1, 5).Select(x => new PrefixOperator("--", (Number)x).Evaluate()))),
        new TestCase("++[1,2,3,4,5]",
            [new SymbolToken('+', 0), new SymbolToken('+', 1), new OpenBracketToken(Bracket.Square, 2), new NumberToken("1", 3),
                new SymbolToken(',', 4), new NumberToken("2", 5), new SymbolToken(',', 6), new NumberToken("3", 7),
                new SymbolToken(',', 8), new NumberToken("4", 9), new SymbolToken(',', 10), new NumberToken("5", 11),
                new CloseBracketToken(Bracket.Square, 12)],
            new PrefixOperator("++", UtilFunctions.Range<Vector>(1, 5)),
            new Vector(Enumerable.Range(1, 5).Select(x => new PrefixOperator("++", (Number)x).Evaluate()))),
        new TestCase("[1,2,3,4,5]!",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new SymbolToken(',', 6), new NumberToken("4", 7),
                new SymbolToken(',', 8), new NumberToken("5", 9), new CloseBracketToken(Bracket.Square, 10), new SymbolToken('!', 11)],
            new PostfixOperator("!", UtilFunctions.Range<Vector>(1, 5)),
            new Vector(Enumerable.Range(1, 5).Select(x => new PostfixOperator("!", (Number)x).Evaluate()))),
        new TestCase("[1,2,3,4,5]%",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new SymbolToken(',', 6), new NumberToken("4", 7),
                new SymbolToken(',', 8), new NumberToken("5", 9), new CloseBracketToken(Bracket.Square, 10), new SymbolToken('%', 11)],
            new PostfixOperator("%", UtilFunctions.Range<Vector>(1, 5)),
            new Vector(Enumerable.Range(1, 5).Select(x => new PostfixOperator("%", (Number)x).Evaluate()))),
        new TestCase("[1,2,3,4,5]!!",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new SymbolToken(',', 6), new NumberToken("4", 7),
                new SymbolToken(',', 8), new NumberToken("5", 9), new CloseBracketToken(Bracket.Square, 10), new SymbolToken('!', 11),
                new SymbolToken('!', 12)],
            new PostfixOperator("!!", UtilFunctions.Range<Vector>(1, 5)),
            new Vector(Enumerable.Range(1, 5).Select(x => new PostfixOperator("!!", (Number)x).Evaluate()))),
        new TestCase("[1,2,3,4,5]#",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2),
                new NumberToken("2", 3), new SymbolToken(',', 4), new NumberToken("3", 5), new SymbolToken(',', 6),
                new NumberToken("4", 7), new SymbolToken(',', 8), new NumberToken("5", 9), new CloseBracketToken(Bracket.Square, 10),
                new SymbolToken('#', 11)],
            new PostfixOperator("#", UtilFunctions.Range<Vector>(1, 5)),
            new Vector(Enumerable.Range(1, 5).Select(x => new PostfixOperator("#", (Number)x).Evaluate()))),
        new TestCase("[1,2,3,4,5]--",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2),
                new NumberToken("2", 3), new SymbolToken(',', 4), new NumberToken("3", 5), new SymbolToken(',', 6),
                new NumberToken("4", 7), new SymbolToken(',', 8), new NumberToken("5", 9), new CloseBracketToken(Bracket.Square, 10),
                new SymbolToken('-', 11), new SymbolToken('-', 12)],
            new PostfixOperator("--", UtilFunctions.Range<Vector>(1, 5)),
            new Vector(Enumerable.Range(1, 5).Select(x => new PostfixOperator("--", (Number)x).Evaluate()))),
        new TestCase("{1,2,3,4,5}++",
            [new OpenBracketToken(Bracket.Curly, 0), new NumberToken("1", 1), new SymbolToken(',', 2),
                new NumberToken("2", 3), new SymbolToken(',', 4), new NumberToken("3", 5), new SymbolToken(',', 6),
                new NumberToken("4", 7), new SymbolToken(',', 8), new NumberToken("5", 9), new CloseBracketToken(Bracket.Curly, 10),
                new SymbolToken('+', 11), new SymbolToken('+', 12)],
            new PostfixOperator("++", UtilFunctions.Range<Set>(1, 5)),
            new Set(Enumerable.Range(1, 5).Select(x => new PostfixOperator("++", (Number)x).Evaluate()))),
        new TestCase("[1,2,3]+[7,8,9]",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2),
                new NumberToken("2", 3), new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6),
                new SymbolToken('+', 7), new OpenBracketToken(Bracket.Square, 8), new NumberToken("7", 9), new SymbolToken(',', 10),
                new NumberToken("8", 11), new SymbolToken(',', 12), new NumberToken("9", 13), new CloseBracketToken(Bracket.Square, 14)],
            new BinaryOperator("+", UtilFunctions.Range<Vector>(1, 3), UtilFunctions.Range<Vector>(7, 3)),
            new Vector(((int[])[1, 2, 3]).Select(x => new BinaryOperator("+", (Number)x, (Number)(x + 6)).Evaluate()))),
        new TestCase("[1,2,3]-[7,8,9]",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2),
                new NumberToken("2", 3), new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6),
                new SymbolToken('-', 7), new OpenBracketToken(Bracket.Square, 8), new NumberToken("7", 9), new SymbolToken(',', 10),
                new NumberToken("8", 11), new SymbolToken(',', 12), new NumberToken("9", 13), new CloseBracketToken(Bracket.Square, 14)],
            new BinaryOperator("-", UtilFunctions.Range<Vector>(1, 3), UtilFunctions.Range<Vector>(7, 3)),
            new Vector(((int[])[1, 2, 3]).Select(x => new BinaryOperator("-", (Number)x, (Number)(x + 6)).Evaluate()))),
        new TestCase("[1,2,3]*[7,8,9]",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2),
                new NumberToken("2", 3), new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6),
                new SymbolToken('*', 7), new OpenBracketToken(Bracket.Square, 8), new NumberToken("7", 9), new SymbolToken(',', 10),
                new NumberToken("8", 11), new SymbolToken(',', 12), new NumberToken("9", 13), new CloseBracketToken(Bracket.Square, 14)],
            new BinaryOperator("*", UtilFunctions.Range<Vector>(1, 3), UtilFunctions.Range<Vector>(7, 3)),
            new Vector(((int[])[1, 2, 3]).Select(x => new BinaryOperator("*", (Number)x, (Number)(x + 6)).Evaluate()))),
        new TestCase("[1,2,3]×[7,8,9]",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2),
                new NumberToken("2", 3), new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6),
                new SymbolToken('×', 7), new OpenBracketToken(Bracket.Square, 8), new NumberToken("7", 9), new SymbolToken(',', 10),
                new NumberToken("8", 11), new SymbolToken(',', 12), new NumberToken("9", 13), new CloseBracketToken(Bracket.Square, 14)],
            new BinaryOperator("×", UtilFunctions.Range<Vector>(1, 3), UtilFunctions.Range<Vector>(7, 3)),
            new Vector(((int[])[1, 2, 3]).Select(x => new BinaryOperator("×", (Number)x, (Number)(x + 6)).Evaluate()))),
        new TestCase("[1,2,3]/[7,8,9]",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6), new SymbolToken('/', 7),
                new OpenBracketToken(Bracket.Square, 8), new NumberToken("7", 9), new SymbolToken(',', 10), new NumberToken("8", 11),
                new SymbolToken(',', 12), new NumberToken("9", 13), new CloseBracketToken(Bracket.Square, 14)],
            new BinaryOperator("/", UtilFunctions.Range<Vector>(1, 3), UtilFunctions.Range<Vector>(7, 3)),
            new Vector(((int[])[1, 2, 3]).Select(x => new BinaryOperator("/", (Number)x, (Number)(x + 6)).Evaluate()))),
        new TestCase("[1,2,3]÷[7,8,9]",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6), new SymbolToken('÷', 7),
                new OpenBracketToken(Bracket.Square, 8), new NumberToken("7", 9), new SymbolToken(',', 10), new NumberToken("8", 11),
                new SymbolToken(',', 12), new NumberToken("9", 13), new CloseBracketToken(Bracket.Square, 14)],
            new BinaryOperator("÷", UtilFunctions.Range<Vector>(1, 3), UtilFunctions.Range<Vector>(7, 3)),
            new Vector(((int[])[1, 2, 3]).Select(x => new BinaryOperator("÷", (Number)x, (Number)(x + 6)).Evaluate()))),
        new TestCase("[1,2,3]^[7,8,9]",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6), new SymbolToken('^', 7),
                new OpenBracketToken(Bracket.Square, 8), new NumberToken("7", 9), new SymbolToken(',', 10), new NumberToken("8", 11),
                new SymbolToken(',', 12), new NumberToken("9", 13), new CloseBracketToken(Bracket.Square, 14)],
            new BinaryOperator("^", UtilFunctions.Range<Vector>(1, 3), UtilFunctions.Range<Vector>(7, 3)),
            new Vector(((int[])[1, 2, 3]).Select(x => new BinaryOperator("^", (Number)x, (Number)(x + 6)).Evaluate()))),
        new TestCase("[1,2,3]%[7,8,9]",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6), new SymbolToken('%', 7),
                new OpenBracketToken(Bracket.Square, 8), new NumberToken("7", 9), new SymbolToken(',', 10), new NumberToken("8", 11),
                new SymbolToken(',', 12), new NumberToken("9", 13), new CloseBracketToken(Bracket.Square, 14)],
            new BinaryOperator("%", UtilFunctions.Range<Vector>(1, 3), UtilFunctions.Range<Vector>(7, 3)),
            new Vector(((int[])[1, 2, 3]).Select(x => new BinaryOperator("%", (Number)x, (Number)(x + 6)).Evaluate()))),
        new TestCase("[1,2,3]%%[7,8,9]",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6), new SymbolToken('%', 7),
                new SymbolToken('%', 8), new OpenBracketToken(Bracket.Square, 9), new NumberToken("7", 10), new SymbolToken(',', 11),
                new NumberToken("8", 12), new SymbolToken(',', 13), new NumberToken("9", 14), new CloseBracketToken(Bracket.Square, 15)],
            new BinaryOperator("%%", UtilFunctions.Range<Vector>(1, 3), UtilFunctions.Range<Vector>(7, 3)),
            new Vector(((int[])[1, 2, 3]).Select(x => new BinaryOperator("%%", (Number)x, (Number)(x + 6)).Evaluate()))),
        new TestCase("[1,2,3]//[7,8,9]",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6), new SymbolToken('/', 7),
                new SymbolToken('/', 8), new OpenBracketToken(Bracket.Square, 9), new NumberToken("7", 10), new SymbolToken(',', 11),
                new NumberToken("8", 12), new SymbolToken(',', 13), new NumberToken("9", 14), new CloseBracketToken(Bracket.Square, 15)],
            new BinaryOperator("//", UtilFunctions.Range<Vector>(1, 3), UtilFunctions.Range<Vector>(7, 3)),
            new Vector(((int[])[1, 2, 3]).Select(x => new BinaryOperator("//", (Number)x, (Number)(x + 6)).Evaluate()))),
        new TestCase("[1,2,3]&&[7,8,9]",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6), new SymbolToken('&', 7),
                new SymbolToken('&', 8), new OpenBracketToken(Bracket.Square, 9), new NumberToken("7", 10), new SymbolToken(',', 11),
                new NumberToken("8", 12), new SymbolToken(',', 13), new NumberToken("9", 14), new CloseBracketToken(Bracket.Square, 15)],
            new BinaryOperator("&&", UtilFunctions.Range<Vector>(1, 3), UtilFunctions.Range<Vector>(7, 3)),
            new Vector(((int[])[1, 2, 3]).Select(x => new BinaryOperator("&&", (Number)x, (Number)(x + 6)).Evaluate()))),
        new TestCase("[1,2,3]∧[7,8,9]",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6), new SymbolToken('∧', 7),
                new OpenBracketToken(Bracket.Square, 8), new NumberToken("7", 9), new SymbolToken(',', 10), new NumberToken("8", 11),
                new SymbolToken(',', 12), new NumberToken("9", 13), new CloseBracketToken(Bracket.Square, 14)],
            new BinaryOperator("∧", UtilFunctions.Range<Vector>(1, 3), UtilFunctions.Range<Vector>(7, 3)),
            new Vector(((int[])[1, 2, 3]).Select(x => new BinaryOperator("∧", (Number)x, (Number)(x + 6)).Evaluate()))),
        new TestCase("[1,2,3]||[7,8,9]",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6), new SymbolToken('|', 7),
                new SymbolToken('|', 8), new OpenBracketToken(Bracket.Square, 9), new NumberToken("7", 10), new SymbolToken(',', 11),
                new NumberToken("8", 12), new SymbolToken(',', 13), new NumberToken("9", 14), new CloseBracketToken(Bracket.Square, 15)],
            new BinaryOperator("||", UtilFunctions.Range<Vector>(1, 3), UtilFunctions.Range<Vector>(7, 3)),
            new Vector(((int[])[1, 2, 3]).Select(x => new BinaryOperator("||", (Number)x, (Number)(x + 6)).Evaluate()))),
        new TestCase("[1,2,3]∨[7,8,9]",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6), new SymbolToken('∨', 7),
                new OpenBracketToken(Bracket.Square, 8), new NumberToken("7", 9), new SymbolToken(',', 10), new NumberToken("8", 11),
                new SymbolToken(',', 12), new NumberToken("9", 13), new CloseBracketToken(Bracket.Square, 14)],
            new BinaryOperator("∨", UtilFunctions.Range<Vector>(1, 3), UtilFunctions.Range<Vector>(7, 3)),
            new Vector(((int[])[1, 2, 3]).Select(x => new BinaryOperator("∨", (Number)x, (Number)(x + 6)).Evaluate()))),
        new TestCase("[1,2,3]⊕[7,8,9]",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6), new SymbolToken('⊕', 7),
                new OpenBracketToken(Bracket.Square, 8), new NumberToken("7", 9), new SymbolToken(',', 10), new NumberToken("8", 11),
                new SymbolToken(',', 12), new NumberToken("9", 13), new CloseBracketToken(Bracket.Square, 14)],
            new BinaryOperator("⊕", UtilFunctions.Range<Vector>(1, 3), UtilFunctions.Range<Vector>(7, 3)),
            new Vector(((int[])[1, 2, 3]).Select(x => new BinaryOperator("⊕", (Number)x, (Number)(x + 6)).Evaluate()))),
        new TestCase("[1,2,3]==[1,2,3]",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6), new SymbolToken('=', 7),
                new SymbolToken('=', 8), new OpenBracketToken(Bracket.Square, 9), new NumberToken("1", 10), new SymbolToken(',', 11),
                new NumberToken("2", 12), new SymbolToken(',', 13), new NumberToken("3", 14), new CloseBracketToken(Bracket.Square, 15)],
            new BinaryOperator("==", UtilFunctions.Range<Vector>(1, 3), UtilFunctions.Range<Vector>(1, 3)), Logical.TRUE),
        new TestCase("[1,2,3]==[7,8,9]",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6), new SymbolToken('=', 7),
                new SymbolToken('=', 8), new OpenBracketToken(Bracket.Square, 9), new NumberToken("7", 10), new SymbolToken(',', 11),
                new NumberToken("8", 12), new SymbolToken(',', 13), new NumberToken("9", 14), new CloseBracketToken(Bracket.Square, 15)],
            new BinaryOperator("==", UtilFunctions.Range<Vector>(1, 3), UtilFunctions.Range<Vector>(7, 3)), Logical.FALSE),
        new TestCase("[1,2,3]!=[7,8,9]",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6), new SymbolToken('!', 7),
                new SymbolToken('=', 8), new OpenBracketToken(Bracket.Square, 9), new NumberToken("7", 10), new SymbolToken(',', 11),
                new NumberToken("8", 12), new SymbolToken(',', 13), new NumberToken("9", 14), new CloseBracketToken(Bracket.Square, 15)],
            new BinaryOperator("!=", UtilFunctions.Range<Vector>(1, 3), UtilFunctions.Range<Vector>(7, 3)), Logical.TRUE),
        new TestCase("[1,2,3]<[7,8,9]",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6), new SymbolToken('<', 7),
                new OpenBracketToken(Bracket.Square, 8), new NumberToken("7", 9), new SymbolToken(',', 10), new NumberToken("8", 11),
                new SymbolToken(',', 12), new NumberToken("9", 13), new CloseBracketToken(Bracket.Square, 14)],
            new BinaryOperator("<", UtilFunctions.Range<Vector>(1, 3), UtilFunctions.Range<Vector>(7, 3)),
            new Vector(((int[])[1, 2, 3]).Select(x => new BinaryOperator("<", (Number)x, (Number)(x + 6)).Evaluate()))),
        new TestCase("[1,2,3]<=[7,8,9]",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6), new SymbolToken('<', 7),
                new SymbolToken('=', 8), new OpenBracketToken(Bracket.Square, 9), new NumberToken("7", 10), new SymbolToken(',', 11),
                new NumberToken("8", 12), new SymbolToken(',', 13), new NumberToken("9", 14), new CloseBracketToken(Bracket.Square, 15)],
            new BinaryOperator("<=", UtilFunctions.Range<Vector>(1, 3), UtilFunctions.Range<Vector>(7, 3)),
            new Vector(((int[])[1, 2, 3]).Select(x => new BinaryOperator("<=", (Number)x, (Number)(x + 6)).Evaluate()))),
        new TestCase("[1,2,3]>[7,8,9]",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6), new SymbolToken('>', 7),
                new OpenBracketToken(Bracket.Square, 8), new NumberToken("7", 9), new SymbolToken(',', 10), new NumberToken("8", 11),
                new SymbolToken(',', 12), new NumberToken("9", 13), new CloseBracketToken(Bracket.Square, 14)],
            new BinaryOperator(">", UtilFunctions.Range<Vector>(1, 3), UtilFunctions.Range<Vector>(7, 3)),
            new Vector(((int[])[1, 2, 3]).Select(x => new BinaryOperator(">", (Number)x, (Number)(x + 6)).Evaluate()))),
        new TestCase("[1,2,3]>=[7,8,9]",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6), new SymbolToken('>', 7),
                new SymbolToken('=', 8), new OpenBracketToken(Bracket.Square, 9), new NumberToken("7", 10), new SymbolToken(',', 11),
                new NumberToken("8", 12), new SymbolToken(',', 13), new NumberToken("9", 14), new CloseBracketToken(Bracket.Square, 15)],
            new BinaryOperator(">=", UtilFunctions.Range<Vector>(1, 3), UtilFunctions.Range<Vector>(7, 3)),
            new Vector(((int[])[1, 2, 3]).Select(x => new BinaryOperator(">=", (Number)x, (Number)(x + 6)).Evaluate()))),
        new TestCase("[1,2,3]+5",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6), new SymbolToken('+', 7),
                new NumberToken("5", 8)],
            new BinaryOperator("+", UtilFunctions.Range<Vector>(1, 3), (Number)5),
            new Vector(((int[])[1, 2, 3]).Select(x => new BinaryOperator("+", (Number)x, (Number)5).Evaluate()))),
        new TestCase("[1,2,3]-5",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6), new SymbolToken('-', 7),
                new NumberToken("5", 8)],
            new BinaryOperator("-", UtilFunctions.Range<Vector>(1, 3), (Number)5),
            new Vector(((int[])[1, 2, 3]).Select(x => new BinaryOperator("-", (Number)x, (Number)5).Evaluate()))),
        new TestCase("{1,2,3}*5",
            [new OpenBracketToken(Bracket.Curly, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Curly, 6), new SymbolToken('*', 7),
                new NumberToken("5", 8)],
            new BinaryOperator("*", UtilFunctions.Range<Set>(1, 3), (Number)5),
            new Set(((int[])[1, 2, 3]).Select(x => new BinaryOperator("*", (Number)x, (Number)5).Evaluate()))),
        new TestCase("[1,2,3]×5",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6), new SymbolToken('×', 7),
                new NumberToken("5", 8)],
            new BinaryOperator("×", UtilFunctions.Range<Vector>(1, 3), (Number)5),
            new Vector(((int[])[1, 2, 3]).Select(x => new BinaryOperator("×", (Number)x, (Number)5).Evaluate()))),
        new TestCase("[1,2,3]/5",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6), new SymbolToken('/', 7),
                new NumberToken("5", 8)],
            new BinaryOperator("/", UtilFunctions.Range<Vector>(1, 3), (Number)5),
            new Vector(((int[])[1, 2, 3]).Select(x => new BinaryOperator("/", (Number)x, (Number)5).Evaluate()))),
        new TestCase("[1,2,3]÷5",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6), new SymbolToken('÷', 7),
                new NumberToken("5", 8)],
            new BinaryOperator("÷", UtilFunctions.Range<Vector>(1, 3), (Number)5),
            new Vector(((int[])[1, 2, 3]).Select(x => new BinaryOperator("÷", (Number)x, (Number)5).Evaluate()))),
        new TestCase("[1,2,3]^5",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6), new SymbolToken('^', 7),
                new NumberToken("5", 8)],
            new BinaryOperator("^", UtilFunctions.Range<Vector>(1, 3), (Number)5),
            new Vector(((int[])[1, 2, 3]).Select(x => new BinaryOperator("^", (Number)x, (Number)5).Evaluate()))),
        new TestCase("[1,2,3]%5",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6),
                new SymbolToken('%', 7), new NumberToken("5", 8)],
            new BinaryOperator("%", UtilFunctions.Range<Vector>(1, 3), (Number)5),
            new Vector(((int[])[1, 2, 3]).Select(x => new BinaryOperator("%", (Number)x, (Number)5).Evaluate()))),
        new TestCase("{1,2,3}%%5",
            [new OpenBracketToken(Bracket.Curly, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Curly, 6), new SymbolToken('%', 7),
                new SymbolToken('%', 8), new NumberToken("5", 9)],
            new BinaryOperator("%%", UtilFunctions.Range<Set>(1, 3), (Number)5),
            new Set(((int[])[1, 2, 3]).Select(x => new BinaryOperator("%%", (Number)x, (Number)5).Evaluate()))),
        new TestCase("[1,2,3]//5",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6), new SymbolToken('/', 7),
                new SymbolToken('/', 8), new NumberToken("5", 9)],
            new BinaryOperator("//", UtilFunctions.Range<Vector>(1, 3), (Number)5),
            new Vector(((int[])[1, 2, 3]).Select(x => new BinaryOperator("//", (Number)x, (Number)5).Evaluate()))),
        new TestCase("[1,2,3]&&5",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6), new SymbolToken('&', 7),
                new SymbolToken('&', 8), new NumberToken("5", 9)],
            new BinaryOperator("&&", UtilFunctions.Range<Vector>(1, 3), (Number)5),
            new Vector(((int[])[1, 2, 3]).Select(x => new BinaryOperator("&&", (Number)x, (Number)5).Evaluate()))),
        new TestCase("[1,2,3]∧5",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6), new SymbolToken('∧', 7),
                new NumberToken("5", 8)],
            new BinaryOperator("∧", UtilFunctions.Range<Vector>(1, 3), (Number)5),
            new Vector(((int[])[1, 2, 3]).Select(x => new BinaryOperator("∧", (Number)x, (Number)5).Evaluate()))),
        new TestCase("[1,2,3]||5",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6), new SymbolToken('|', 7),
                new SymbolToken('|', 8), new NumberToken("5", 9)],
            new BinaryOperator("||", UtilFunctions.Range<Vector>(1, 3), (Number)5),
            new Vector(((int[])[1, 2, 3]).Select(x => new BinaryOperator("||", (Number)x, (Number)5).Evaluate()))),
        new TestCase("[1,2,3]∨5",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6), new SymbolToken('∨', 7),
                new NumberToken("5", 8)],
            new BinaryOperator("∨", UtilFunctions.Range<Vector>(1, 3), (Number)5),
            new Vector(((int[])[1, 2, 3]).Select(x => new BinaryOperator("∨", (Number)x, (Number)5).Evaluate()))),
        new TestCase("[1,2,3]⊕5",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6), new SymbolToken('⊕', 7),
                new NumberToken("5", 8)],
            new BinaryOperator("⊕", UtilFunctions.Range<Vector>(1, 3), (Number)5),
            new Vector(((int[])[1, 2, 3]).Select(x => new BinaryOperator("⊕", (Number)x, (Number)5).Evaluate()))),
        new TestCase("{1,2,3}==5",
            [new OpenBracketToken(Bracket.Curly, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Curly, 6), new SymbolToken('=', 7),
                new SymbolToken('=', 8), new NumberToken("5", 9)],
            new BinaryOperator("==", UtilFunctions.Range<Set>(1, 3), (Number)5),
            new Set([Logical.FALSE, Logical.FALSE, Logical.FALSE])),
        new TestCase("[1,2,3]!=5",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6), new SymbolToken('!', 7),
                new SymbolToken('=', 8), new NumberToken("5", 9)],
            new BinaryOperator("!=", UtilFunctions.Range<Vector>(1, 3), (Number)5),
            new Vector([Logical.TRUE, Logical.TRUE, Logical.TRUE])),
        new TestCase("[1,2,3]<5",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6), new SymbolToken('<', 7),
                new NumberToken("5", 8)],
            new BinaryOperator("<", UtilFunctions.Range<Vector>(1, 3), (Number)5),
            new Vector(((int[])[1, 2, 3]).Select(x => new BinaryOperator("<", (Number)x, (Number)5).Evaluate()))),
        new TestCase("[1,2,3]<=5",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6), new SymbolToken('<', 7),
                new SymbolToken('=', 8), new NumberToken("5", 9)],
            new BinaryOperator("<=", UtilFunctions.Range<Vector>(1, 3), (Number)5),
            new Vector(((int[])[1, 2, 3]).Select(x => new BinaryOperator("<=", (Number)x, (Number)5).Evaluate()))),
        new TestCase("[1,2,3]>5",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6), new SymbolToken('>', 7),
                new NumberToken("5", 8)],
            new BinaryOperator(">", UtilFunctions.Range<Vector>(1, 3), (Number)5),
            new Vector(((int[])[1, 2, 3]).Select(x => new BinaryOperator(">", (Number)x, (Number)5).Evaluate()))),
        new TestCase("{1,2,3}>=5",
            [new OpenBracketToken(Bracket.Curly, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Curly, 6), new SymbolToken('>', 7),
                new SymbolToken('=', 8), new NumberToken("5", 9)],
            new BinaryOperator(">=", UtilFunctions.Range<Set>(1, 3), (Number)5),
            new Set(((int[])[1, 2, 3]).Select(x => new BinaryOperator(">=", (Number)x, (Number)5).Evaluate()))),
        new TestCase("{1,2,3}=={1,2,3}",
            [new OpenBracketToken(Bracket.Curly, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Curly, 6), new SymbolToken('=', 7),
                new SymbolToken('=', 8), new OpenBracketToken(Bracket.Curly, 10), new NumberToken("1", 11), new SymbolToken(',', 12),
                new NumberToken("2", 13), new SymbolToken(',', 14), new NumberToken("3", 15), new CloseBracketToken(Bracket.Curly, 16)],
            new BinaryOperator("==", UtilFunctions.Range<Set>(1, 3), UtilFunctions.Range<Set>(1, 3)),
            Logical.TRUE),
        new TestCase("{1,2,3}=={7,8,9}",
            [new OpenBracketToken(Bracket.Curly, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Curly, 6), new SymbolToken('=', 7),
                new SymbolToken('=', 8), new OpenBracketToken(Bracket.Curly, 10), new NumberToken("7", 11), new SymbolToken(',', 12),
                new NumberToken("8", 13), new SymbolToken(',', 14), new NumberToken("9", 15), new CloseBracketToken(Bracket.Curly, 16)],
            new BinaryOperator("==", UtilFunctions.Range<Set>(1, 3), UtilFunctions.Range<Set>(7, 3)),
            Logical.FALSE),
        new TestCase("{1,2,3}!={7,8,9}",
            [new OpenBracketToken(Bracket.Curly, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Curly, 6), new SymbolToken('!', 7),
                new SymbolToken('=', 8), new OpenBracketToken(Bracket.Curly, 10), new NumberToken("7", 11), new SymbolToken(',', 12),
                new NumberToken("8", 13), new SymbolToken(',', 14), new NumberToken("9", 15), new CloseBracketToken(Bracket.Curly, 16)],
            new BinaryOperator("!=", UtilFunctions.Range<Set>(1, 3), UtilFunctions.Range<Set>(7, 3)),
            Logical.TRUE),
        new TestCase("{1,2,3}<{7,8,9}",
            [new OpenBracketToken(Bracket.Curly, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Curly, 6), new SymbolToken('<', 7),
                new OpenBracketToken(Bracket.Curly, 8), new NumberToken("7", 9), new SymbolToken(',', 10), new NumberToken("8", 11),
                new SymbolToken(',', 12), new NumberToken("9", 13), new CloseBracketToken(Bracket.Curly, 14)],
            new BinaryOperator("<", UtilFunctions.Range<Set>(1, 3), UtilFunctions.Range<Set>(7, 3)),
            new Set(((int[])[1, 2, 3]).Select(x => new BinaryOperator("<", (Number)x, (Number)(x + 6)).Evaluate()))),
        new TestCase("{1,2,3}<={7,8,9}",
            [new OpenBracketToken(Bracket.Curly, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Curly, 6), new SymbolToken('<', 7),
                new SymbolToken('=', 8), new OpenBracketToken(Bracket.Curly, 10), new NumberToken("7", 11), new SymbolToken(',', 12),
                new NumberToken("8", 13), new SymbolToken(',', 14), new NumberToken("9", 15), new CloseBracketToken(Bracket.Curly, 16)],
            new BinaryOperator("<=", UtilFunctions.Range<Set>(1, 3), UtilFunctions.Range<Set>(7, 3)),
            new Set(((int[])[1, 2, 3]).Select(x => new BinaryOperator("<=", (Number)x, (Number)(x + 6)).Evaluate()))),
        new TestCase("{1,2,3}>{7,8,9}",
            [new OpenBracketToken(Bracket.Curly, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Curly, 6), new SymbolToken('>', 7),
                new OpenBracketToken(Bracket.Curly, 8), new NumberToken("7", 9), new SymbolToken(',', 10), new NumberToken("8", 11),
                new SymbolToken(',', 12), new NumberToken("9", 13), new CloseBracketToken(Bracket.Curly, 14)],
            new BinaryOperator(">", UtilFunctions.Range<Set>(1, 3), UtilFunctions.Range<Set>(7, 3)),
            new Set(((int[])[1, 2, 3]).Select(x => new BinaryOperator(">", (Number)x, (Number)(x + 6)).Evaluate()))),
        new TestCase("{1,2,3}>={7,8,9}",
            [new OpenBracketToken(Bracket.Curly, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Curly, 6), new SymbolToken('>', 7),
                new SymbolToken('=', 8), new OpenBracketToken(Bracket.Curly, 10), new NumberToken("7", 11), new SymbolToken(',', 12),
                new NumberToken("8", 13), new SymbolToken(',', 14), new NumberToken("9", 15), new CloseBracketToken(Bracket.Curly, 16)],
            new BinaryOperator(">=", UtilFunctions.Range<Set>(1, 3), UtilFunctions.Range<Set>(7, 3)),
            new Set(((int[])[1, 2, 3]).Select(x => new BinaryOperator(">=", (Number)x, (Number)(x + 6)).Evaluate()))),
        new TestCase("[1,2,3]=={1,2,3}",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6), new SymbolToken('=', 7),
                new SymbolToken('=', 8), new OpenBracketToken(Bracket.Curly, 10), new NumberToken("1", 11), new SymbolToken(',', 12),
                new NumberToken("2", 13), new SymbolToken(',', 14), new NumberToken("3", 15), new CloseBracketToken(Bracket.Curly, 16)],
            new BinaryOperator("==", UtilFunctions.Range<Vector>(1, 3), UtilFunctions.Range<Set>(1, 3)),
            Logical.FALSE),
        new TestCase("[1,2,3][0] ",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6), new OpenBracketToken(Bracket.Square, 7),
                new NumberToken("0", 8), new CloseBracketToken(Bracket.Square, 9)],
            new Indexer(UtilFunctions.Range<Vector>(1, 3), (Number)0), (Number)1),
        new TestCase("{1,2,3}[1]",
            [new OpenBracketToken(Bracket.Curly, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Curly, 6), new OpenBracketToken(Bracket.Square, 7),
                new NumberToken("1", 8), new CloseBracketToken(Bracket.Square, 9)],
            new Indexer(UtilFunctions.Range<Set>(1, 3), (Number)1), (Number)2),
        new TestCase("[1,2,3][2]",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6), new OpenBracketToken(Bracket.Square, 7),
                new NumberToken("2", 8), new CloseBracketToken(Bracket.Square, 9)],
            new Indexer(UtilFunctions.Range<Vector>(1, 3), (Number)2), (Number)3),
        new TestCase("[1,2,3] [4] ",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new SymbolToken(',', 2), new NumberToken("2", 3),
                new SymbolToken(',', 4), new NumberToken("3", 5), new CloseBracketToken(Bracket.Square, 6), new OpenBracketToken(Bracket.Square, 8),
                new NumberToken("4", 9), new CloseBracketToken(Bracket.Square, 10)],
            new Indexer(UtilFunctions.Range<Vector>(1, 3), (Number)4), Undefined.UNDEFINED),
        new TestCase("3[2]",
            [new NumberToken("3", 0), new OpenBracketToken(Bracket.Square, 1), new NumberToken("2", 2), new CloseBracketToken(Bracket.Square, 3)],
            new Indexer((Number)3, (Number)2), Undefined.UNDEFINED),
        new TestCase("-[2]",
            [new SymbolToken('-', 0), new OpenBracketToken(Bracket.Square, 1), new NumberToken("2", 2), new CloseBracketToken(Bracket.Square, 3)],
            new PrefixOperator("-", new Vector([(Number)2])), new Vector([(Number)(-2)])),
    ];
}
