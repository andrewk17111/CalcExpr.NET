using CalcExpr.Expressions;
using CalcExpr.Expressions.Collections;
using CalcExpr.Expressions.Components;
using CalcExpr.Expressions.Functions;
using CalcExpr.Expressions.Terminals;
using CalcExpr.FunctionAttributes.ConditionalAttributes;
using TestCalcExpr.TestUtils;

namespace TestCalcExpr.TestData;

public static partial class TestCases
{
    public readonly static TestCase[] Expressions =
    [
        new TestCase(" .1", [], new Number(0.1)),
        new TestCase(" 0.1", [], new Number(0.1)),
        new TestCase(" 1.", [], new Number(1)),
        new TestCase(" 1", [], new Number(1)),
        new TestCase(" +1", [], new PrefixOperator("+", new Number(1)), new Number(1)),
        new TestCase(" -1", [], new PrefixOperator("-", new Number(1)), new Number(-1)),
        new TestCase(" !1", [], new PrefixOperator("!", new Number(1)), new Number(0)),
        new TestCase(" !0", [], new PrefixOperator("!", new Number(0)), new Number(1)),
        new TestCase(" ~2", [], new PrefixOperator("~", new Number(2)), Logical.FALSE),
        new TestCase(" ¬0", [], new PrefixOperator("¬", new Number(0)), Logical.TRUE),
        new TestCase(" 5!", [], new PostfixOperator("!", new Number(5)), new Number(120)),
        new TestCase(" 5#", [], new PostfixOperator("#", new Number(5)), new Number(2310)),
        new TestCase(" 5!! ", [], new PostfixOperator("!!", new Number(5)), new Number(15)),
        new TestCase(" 1%", [], new PostfixOperator("%", new Number(1)), new Number(0.01)),
        new TestCase("~!1 ", [], new PrefixOperator("~", new PrefixOperator("!", new Number(1))), Logical.TRUE,
            new PrefixOperator("~", new Number(0))),
        new TestCase("2!% ", [], new PostfixOperator("%", new PostfixOperator("!", new Number(2))),
            new Number(0.02), new PostfixOperator("%", new Number(2))),
        new TestCase("-5% ", [], new PrefixOperator("-", new PostfixOperator("%", new Number(5))),
            new Number(-0.05), new PrefixOperator("-", new Number(0.05))),
        new TestCase(" 3!!!", [], new PostfixOperator("!", new PostfixOperator("!!", new Number(3))),
            new Number(6), new PostfixOperator("!", new Number(3))),
        new TestCase(" 1+2.0", [], new BinaryOperator("+", new Number(1), new Number(2)), new Number(3)),
        new TestCase(" 0 + 0 * 2", [], new BinaryOperator("+", new Number(0),
                new BinaryOperator("*", new Number(0), new Number(2))),
            new Number(0), new BinaryOperator("+", new Number(0), new Number(0))),
        new TestCase(" 1.0-2", [], new BinaryOperator("-", new Number(1), new Number(2)), new Number(-1)),
        new TestCase(" 2*3", [], new BinaryOperator("*", new Number(2), new Number(3)), new Number(6)),
        new TestCase(" 6×7", [], new BinaryOperator("×", new Number(6), new Number(7)), new Number(42)),
        new TestCase(" 1/2", [], new BinaryOperator("/", new Number(1), new Number(2)), new Number(0.5)),
        new TestCase(" 2÷2", [], new BinaryOperator("÷", new Number(2), new Number(2)), new Number(1)),
        new TestCase(" 2^3 ", [], new BinaryOperator("^", new Number(2), new Number(3)), new Number(8)),
        new TestCase("13%13", [], new BinaryOperator("%", new Number(13), new Number(13)), new Number(0)),
        new TestCase("12.6%13", [], new BinaryOperator("%", new Number(12.6), new Number(13)), new Number(12.6)),
        new TestCase("13.5%13", [], new BinaryOperator("%", new Number(13.5), new Number(13)), new Number(0.5)),
        new TestCase("-13%13", [], new BinaryOperator("%", new PrefixOperator("-", new Number(13)), new Number(13)),
            new Number(0), new BinaryOperator("%", new Number(-13), new Number(13))),
        new TestCase("-12.6%13", [], new BinaryOperator("%", new PrefixOperator("-", new Number(12.6)),
            new Number(13)), new Number(0.4), new BinaryOperator("%", new Number(-12.6), new Number(13))),
        new TestCase("-13.5%13", [], new BinaryOperator("%", new PrefixOperator("-", new Number(13.5)),
            new Number(13)), new Number(12.5), new BinaryOperator("%", new Number(-13.5), new Number(13))),
        new TestCase("13%12.6", [], new BinaryOperator("%", new Number(13), new Number(12.6)), new Number(0.4)),
        new TestCase("12.6%12.6", [], new BinaryOperator("%", new Number(12.6), new Number(12.6)), new Number(0)),
        new TestCase("13.5%12.6", [], new BinaryOperator("%", new Number(13.5), new Number(12.6)), new Number(0.9)),
        new TestCase("-13%12.6", [], new BinaryOperator("%", new PrefixOperator("-", new Number(13)),
            new Number(12.6)), new Number(12.2), new BinaryOperator("%", new Number(-13), new Number(12.6))),
        new TestCase("-12.6%12.6", [], new BinaryOperator("%", new PrefixOperator("-", new Number(12.6)),
            new Number(12.6)), new Number(0), new BinaryOperator("%", new Number(-12.6), new Number(12.6))),
        new TestCase("-13.5%12.6", [], new BinaryOperator("%", new PrefixOperator("-", new Number(13.5)),
            new Number(12.6)), new Number(11.7), new BinaryOperator("%", new Number(-13.5), new Number(12.6))),
        new TestCase("13%13.5", [], new BinaryOperator("%", new Number(13), new Number(13.5)), new Number(13)),
        new TestCase("12.6%13.5", [], new BinaryOperator("%", new Number(12.6), new Number(13.5)), new Number(12.6)),
        new TestCase("13.5%13.5", [], new BinaryOperator("%", new Number(13.5), new Number(13.5)), new Number(0)),
        new TestCase("-13%13.5", [], new BinaryOperator("%", new PrefixOperator("-", new Number(13)),
            new Number(13.5)), new Number(0.5), new BinaryOperator("%", new Number(-13), new Number(13.5))),
        new TestCase("-12.6%13.5", [], new BinaryOperator("%", new PrefixOperator("-", new Number(12.6)),
            new Number(13.5)), new Number(0.9), new BinaryOperator("%", new Number(-12.6), new Number(13.5))),
        new TestCase("-13.5%13.5", [], new BinaryOperator("%", new PrefixOperator("-", new Number(13.5)),
            new Number(13.5)), new Number(0), new BinaryOperator("%", new Number(-13.5), new Number(13.5))),
        new TestCase("13%(-13)", [], new BinaryOperator("%", new Number(13),
                new Parentheses(new PrefixOperator("-", new Number(13)))),
            new Number(0), new BinaryOperator("%", new Number(13), new Parentheses(new Number(-13))),
            new BinaryOperator("%", new Number(13), new Number(-13))),
        new TestCase("12.6%(-13)", [], new BinaryOperator("%", new Number(12.6),
                new Parentheses(new PrefixOperator("-", new Number(13)))),
            new Number(12.6), new BinaryOperator("%", new Number(12.6), new Parentheses(new Number(-13))),
            new BinaryOperator("%", new Number(12.6), new Number(-13))),
        new TestCase("-13%(-13)", [], new BinaryOperator("%", new PrefixOperator("-", new Number(13)),
                new Parentheses(new PrefixOperator("-", new Number(13)))), new Number(0),
            new BinaryOperator("%", new Number(-13), new Parentheses(new PrefixOperator("-", new Number(13)))),
            new BinaryOperator("%", new Number(-13), new Parentheses(new Number(-13))),
            new BinaryOperator("%", new Number(-13), new Number(-13))),
        new TestCase("-12.6%(-13)", [], new BinaryOperator("%", new PrefixOperator("-", new Number(12.6)),
                new Parentheses(new PrefixOperator("-", new Number(13)))), new Number(0.4),
            new BinaryOperator("%", new Number(-12.6), new Parentheses(new PrefixOperator("-", new Number(13)))),
            new BinaryOperator("%", new Number(-12.6), new Parentheses(new Number(-13))),
            new BinaryOperator("%", new Number(-12.6), new Number(-13))),
        new TestCase("13%(-12.6)", [], new BinaryOperator("%", new Number(13),
                new Parentheses(new PrefixOperator("-", new Number(12.6)))),
            new Number(0.4), new BinaryOperator("%", new Number(13), new Parentheses(new Number(-12.6))),
            new BinaryOperator("%", new Number(13), new Number(-12.6))),
        new TestCase("12.6%(-12.6)", [], new BinaryOperator("%", new Number(12.6),
                new Parentheses(new PrefixOperator("-", new Number(12.6)))),
            new Number(0), new BinaryOperator("%", new Number(12.6), new Parentheses(new Number(-12.6))),
            new BinaryOperator("%", new Number(12.6), new Number(-12.6))),
        new TestCase("13.5%(-12.6)", [], new BinaryOperator("%", new Number(13.5),
                new Parentheses(new PrefixOperator("-", new Number(12.6)))),
            new Number(0.9), new BinaryOperator("%", new Number(13.5), new Parentheses(new Number(-12.6))),
            new BinaryOperator("%", new Number(13.5), new Number(-12.6))),
        new TestCase("13%(-13.5)", [], new BinaryOperator("%", new Number(13),
                new Parentheses(new PrefixOperator("-", new Number(13.5)))),
            new Number(13), new BinaryOperator("%", new Number(13), new Parentheses(new Number(-13.5))),
            new BinaryOperator("%", new Number(13), new Number(-13.5))),
        new TestCase("12.6%(-13.5)", [], new BinaryOperator("%", new Number(12.6),
                new Parentheses(new PrefixOperator("-", new Number(13.5)))),
            new Number(12.6), new BinaryOperator("%", new Number(12.6), new Parentheses(new Number(-13.5))),
            new BinaryOperator("%", new Number(12.6), new Number(-13.5))),
        new TestCase("13.5%(-13.5)", [], new BinaryOperator("%", new Number(13.5),
                new Parentheses(new PrefixOperator("-", new Number(13.5)))),
            new Number(0), new BinaryOperator("%", new Number(13.5), new Parentheses(new Number(-13.5))),
            new BinaryOperator("%", new Number(13.5), new Number(-13.5))),
        new TestCase("13%%13", [], new BinaryOperator("%%", new Number(13), new Number(13)), new Number(0)),
        new TestCase("12.6%%13", [], new BinaryOperator("%%", new Number(12.6), new Number(13)), new Number(12.6)),
        new TestCase("13.5%%13", [], new BinaryOperator("%%", new Number(13.5), new Number(13)), new Number(0.5)),
        new TestCase("-13%%13", [], new BinaryOperator("%%", new PrefixOperator("-", new Number(13)), new Number(13)),
            new Number(0), new BinaryOperator("%%", new Number(-13), new Number(13))),
        new TestCase("-12.6%%13", [], new BinaryOperator("%%", new PrefixOperator("-", new Number(12.6)),
            new Number(13)), new Number(-12.6), new BinaryOperator("%%", new Number(-12.6), new Number(13))),
        new TestCase("-13.5%%13", [], new BinaryOperator("%%", new PrefixOperator("-", new Number(13.5)),
            new Number(13)), new Number(-0.5), new BinaryOperator("%%", new Number(-13.5), new Number(13))),
        new TestCase("13%%12.6", [], new BinaryOperator("%%", new Number(13), new Number(12.6)), new Number(0.4)),
        new TestCase("12.6%%12.6", [], new BinaryOperator("%%", new Number(12.6), new Number(12.6)), new Number(0)),
        new TestCase("13.5%%12.6", [], new BinaryOperator("%%", new Number(13.5), new Number(12.6)), new Number(0.9)),
        new TestCase("-13%%12.6", [], new BinaryOperator("%%", new PrefixOperator("-", new Number(13)),
            new Number(12.6)), new Number(-0.4), new BinaryOperator("%%", new Number(-13), new Number(12.6))),
        new TestCase("-12.6%%12.6", [], new BinaryOperator("%%", new PrefixOperator("-", new Number(12.6)),
            new Number(12.6)), new Number(0), new BinaryOperator("%%", new Number(-12.6), new Number(12.6))),
        new TestCase("-13.5%%12.6", [], new BinaryOperator("%%", new PrefixOperator("-", new Number(13.5)),
            new Number(12.6)), new Number(-0.9), new BinaryOperator("%%", new Number(-13.5), new Number(12.6))),
        new TestCase("13%%13.5", [], new BinaryOperator("%%", new Number(13), new Number(13.5)), new Number(13)),
        new TestCase("12.6%%13.5", [], new BinaryOperator("%%", new Number(12.6), new Number(13.5)), new Number(12.6)),
        new TestCase("13.5%%13.5", [], new BinaryOperator("%%", new Number(13.5), new Number(13.5)), new Number(0)),
        new TestCase("-13%%13.5", [], new BinaryOperator("%%", new PrefixOperator("-", new Number(13)),
            new Number(13.5)), new Number(-13), new BinaryOperator("%%", new Number(-13), new Number(13.5))),
        new TestCase("-12.6%%13.5", [], new BinaryOperator("%%", new PrefixOperator("-", new Number(12.6)),
            new Number(13.5)), new Number(-12.6), new BinaryOperator("%%", new Number(-12.6), new Number(13.5))),
        new TestCase("-13.5%%13.5", [], new BinaryOperator("%%", new PrefixOperator("-", new Number(13.5)),
            new Number(13.5)), new Number(0), new BinaryOperator("%%", new Number(-13.5), new Number(13.5))),
        new TestCase("13%%(-13)", [], new BinaryOperator("%%", new Number(13),
                new Parentheses(new PrefixOperator("-", new Number(13)))),
            new Number(0), new BinaryOperator("%%", new Number(13), new Parentheses(new Number(-13))),
            new BinaryOperator("%%", new Number(13), new Number(-13))),
        new TestCase("12.6%%(-13)", [], new BinaryOperator("%%", new Number(12.6),
                new Parentheses(new PrefixOperator("-", new Number(13)))),
            new Number(12.6), new BinaryOperator("%%", new Number(12.6), new Parentheses(new Number(-13))),
                new BinaryOperator("%%", new Number(12.6), new Number(-13))),
        new TestCase("-13%%(-13)", [], new BinaryOperator("%%", new PrefixOperator("-", new Number(13)),
                new Parentheses(new PrefixOperator("-", new Number(13)))),
            new Number(0), new BinaryOperator("%%", new Number(-13),
                new Parentheses(new PrefixOperator("-", new Number(13)))),
            new BinaryOperator("%%", new Number(-13), new Parentheses(new Number(-13))),
            new BinaryOperator("%%", new Number(-13), new Number(-13))),
        new TestCase("-12.6%%(-13)", [], new BinaryOperator("%%", new PrefixOperator("-", new Number(12.6)),
                new Parentheses(new PrefixOperator("-", new Number(13)))),
            new Number(-12.6), new BinaryOperator("%%", new Number(-12.6),
                new Parentheses(new PrefixOperator("-", new Number(13)))),
            new BinaryOperator("%%", new Number(-12.6), new Parentheses(new Number(-13))),
            new BinaryOperator("%%", new Number(-12.6), new Number(-13))),
        new TestCase("13%%(-12.6)", [], new BinaryOperator("%%", new Number(13),
                new Parentheses(new PrefixOperator("-", new Number(12.6)))),
            new Number(0.4), new BinaryOperator("%%", new Number(13), new Parentheses(new Number(-12.6))),
            new BinaryOperator("%%", new Number(13), new Number(-12.6))),
        new TestCase("12.6%%(-12.6)", [], new BinaryOperator("%%", new Number(12.6),
                new Parentheses(new PrefixOperator("-", new Number(12.6)))),
            new Number(0), new BinaryOperator("%%", new Number(12.6), new Parentheses(new Number(-12.6))),
            new BinaryOperator("%%", new Number(12.6), new Number(-12.6))),
        new TestCase("13.5%%(-12.6)", [], new BinaryOperator("%%", new Number(13.5),
                new Parentheses(new PrefixOperator("-", new Number(12.6)))),
            new Number(0.9), new BinaryOperator("%%", new Number(13.5), new Parentheses(new Number(-12.6))),
            new BinaryOperator("%%", new Number(13.5), new Number(-12.6))),
        new TestCase("-13%%(-12.6)", [], new BinaryOperator("%%", new PrefixOperator("-", new Number(13)),
                new Parentheses(new PrefixOperator("-", new Number(12.6)))),
            new Number(-0.4), new BinaryOperator("%%", new Number(-13),
                new Parentheses(new PrefixOperator("-", new Number(12.6)))),
            new BinaryOperator("%%", new Number(-13), new Parentheses(new Number(-12.6))),
            new BinaryOperator("%%", new Number(-13), new Number(-12.6))),
        new TestCase("-12.6%%(-12.6)", [], new BinaryOperator("%%", new PrefixOperator("-", new Number(12.6)),
                new Parentheses(new PrefixOperator("-", new Number(12.6)))),
            new Number(0), new BinaryOperator("%%", new Number(-12.6),
                new Parentheses(new PrefixOperator("-", new Number(12.6)))),
            new BinaryOperator("%%", new Number(-12.6), new Parentheses(new Number(-12.6))),
            new BinaryOperator("%%", new Number(-12.6), new Number(-12.6))),
        new TestCase("-13.5%%(-12.6)", [], new BinaryOperator("%%", new PrefixOperator("-", new Number(13.5)),
                new Parentheses(new PrefixOperator("-", new Number(12.6)))),
            new Number(-0.9), new BinaryOperator("%%", new Number(-13.5),
                new Parentheses(new PrefixOperator("-", new Number(12.6)))),
            new BinaryOperator("%%", new Number(-13.5), new Parentheses(new Number(-12.6))),
            new BinaryOperator("%%", new Number(-13.5), new Number(-12.6))),
        new TestCase("13%%(-13.5)", [], new BinaryOperator("%%", new Number(13),
                new Parentheses(new PrefixOperator("-", new Number(13.5)))),
            new Number(13), new BinaryOperator("%%", new Number(13), new Parentheses(new Number(-13.5))),
            new BinaryOperator("%%", new Number(13), new Number(-13.5))),
        new TestCase("12.6%%(-13.5)", [], new BinaryOperator("%%", new Number(12.6),
                new Parentheses(new PrefixOperator("-", new Number(13.5)))),
            new Number(12.6), new BinaryOperator("%%", new Number(12.6), new Parentheses(new Number(-13.5))),
            new BinaryOperator("%%", new Number(12.6), new Number(-13.5))),
        new TestCase("13.5%%(-13.5)", [], new BinaryOperator("%%", new Number(13.5),
                new Parentheses(new PrefixOperator("-", new Number(13.5)))),
            new Number(0), new BinaryOperator("%%", new Number(13.5), new Parentheses(new Number(-13.5))),
            new BinaryOperator("%%", new Number(13.5), new Number(-13.5))),
        new TestCase("-13%%(-13.5)", [], new BinaryOperator("%%", new PrefixOperator("-", new Number(13)),
                new Parentheses(new PrefixOperator("-", new Number(13.5)))),
            new Number(-13), new BinaryOperator("%%", new Number(-13),
                new Parentheses(new PrefixOperator("-", new Number(13.5)))),
            new BinaryOperator("%%", new Number(-13), new Parentheses(new Number(-13.5))),
            new BinaryOperator("%%", new Number(-13), new Number(-13.5))),
        new TestCase("-12.6%%(-13.5)", [], new BinaryOperator("%%", new PrefixOperator("-", new Number(12.6)),
                new Parentheses(new PrefixOperator("-", new Number(13.5)))),
            new Number(-12.6), new BinaryOperator("%%", new Number(-12.6),
                new Parentheses(new PrefixOperator("-", new Number(13.5)))),
            new BinaryOperator("%%", new Number(-12.6), new Parentheses(new Number(-13.5))),
            new BinaryOperator("%%", new Number(-12.6), new Number(-13.5))),
        new TestCase("-13.5%%(-13.5)", [], new BinaryOperator("%%", new PrefixOperator("-", new Number(13.5)),
                new Parentheses(new PrefixOperator("-", new Number(13.5)))),
            new Number(0), new BinaryOperator("%%", new Number(-13.5), new Parentheses(new PrefixOperator("-",
                new Number(13.5)))), new BinaryOperator("%%", new Number(-13.5), new Parentheses(new Number(-13.5))),
            new BinaryOperator("%%", new Number(-13.5), new Number(-13.5))),
        new TestCase("12.6//13", [], new BinaryOperator("//", new Number(12.6), new Number(13)), new Number(0)),
        new TestCase("13.5//13", [], new BinaryOperator("//", new Number(13.5), new Number(13)), new Number(1)),
        new TestCase("-13//13", [], new BinaryOperator("//", new PrefixOperator("-", new Number(13)), new Number(13)),
            new Number(-1), new BinaryOperator("//", new Number(-13), new Number(13))),
        new TestCase("-12.6//13", [], new BinaryOperator("//", new PrefixOperator("-", new Number(12.6)),
            new Number(13)), new Number(-1), new BinaryOperator("//", new Number(-12.6), new Number(13))),
        new TestCase("-13.5//13", [], new BinaryOperator("//", new PrefixOperator("-", new Number(13.5)),
            new Number(13)), new Number(-2), new BinaryOperator("//", new Number(-13.5), new Number(13))),
        new TestCase("13//12.6", [], new BinaryOperator("//", new Number(13), new Number(12.6)), new Number(1)),
        new TestCase("13.5//12.6", [], new BinaryOperator("//", new Number(13.5), new Number(12.6)), new Number(1)),
        new TestCase("-13//12.6", [], new BinaryOperator("//", new PrefixOperator("-", new Number(13)),
            new Number(12.6)), new Number(-2), new BinaryOperator("//", new Number(-13), new Number(12.6))),
        new TestCase("-13.5//12.6", [], new BinaryOperator("//", new PrefixOperator("-", new Number(13.5)),
            new Number(12.6)), new Number(-2), new BinaryOperator("//", new Number(-13.5), new Number(12.6))),
        new TestCase("13//13.5", [], new BinaryOperator("//", new Number(13), new Number(13.5)), new Number(0)),
        new TestCase("12.6//13.5", [], new BinaryOperator("//", new Number(12.6), new Number(13.5)), new Number(0)),
        new TestCase("-13//13.5", [], new BinaryOperator("//", new PrefixOperator("-", new Number(13)),
            new Number(13.5)), new Number(-1), new BinaryOperator("//", new Number(-13), new Number(13.5))),
        new TestCase("-12.6//13.5", [], new BinaryOperator("//", new PrefixOperator("-", new Number(12.6)),
            new Number(13.5)), new Number(-1), new BinaryOperator("//", new Number(-12.6), new Number(13.5))),
        new TestCase("-13.5//13.5", [], new BinaryOperator("//", new PrefixOperator("-", new Number(13.5)),
            new Number(13.5)), new Number(-1), new BinaryOperator("//", new Number(-13.5), new Number(13.5))),
        new TestCase("13//(-13)", [], new BinaryOperator("//", new Number(13),
                new Parentheses(new PrefixOperator("-", new Number(13)))),
            new Number(-1), new BinaryOperator("//", new Number(13), new Parentheses(new Number(-13))),
            new BinaryOperator("//", new Number(13), new Number(-13))),
        new TestCase("12.6//-13", [], new BinaryOperator("//", new Number(12.6), new PrefixOperator("-",
            new Number(13))), new Number(0), new BinaryOperator("//", new Number(12.6), new Number(-13))),
        new TestCase("-13//-13", [], new BinaryOperator("//", new PrefixOperator("-", new Number(13)),
                new PrefixOperator("-", new Number(13))),
            new Number(1), new BinaryOperator("//", new Number(-13), new PrefixOperator("-", new Number(13))),
            new BinaryOperator("//", new Number(-13), new Number(-13))),
        new TestCase("-12.6//-13", [], new BinaryOperator("//", new PrefixOperator("-", new Number(12.6)),
                new PrefixOperator("-", new Number(13))),
            new Number(1), new BinaryOperator("//", new Number(-12.6), new PrefixOperator("-", new Number(13))),
            new BinaryOperator("//", new Number(-12.6), new Number(-13))),
        new TestCase("13//-12.6", [], new BinaryOperator("//", new Number(13),
                new PrefixOperator("-", new Number(12.6))),
            new Number(-1), new BinaryOperator("//", new Number(13), new Number(-12.6))),
        new TestCase("13.5//-12.6", [], new BinaryOperator("//", new Number(13.5),
                new PrefixOperator("-", new Number(12.6))),
            new Number(-1), new BinaryOperator("//", new Number(13.5), new Number(-12.6))),
        new TestCase("-13//-12.6", [], new BinaryOperator("//", new PrefixOperator("-", new Number(13)),
                new PrefixOperator("-", new Number(12.6))),
            new Number(2), new BinaryOperator("//", new Number(-13), new PrefixOperator("-", new Number(12.6))),
            new BinaryOperator("//", new Number(-13), new Number(-12.6))),
        new TestCase("-13.5//-12.6", [], new BinaryOperator("//", new PrefixOperator("-", new Number(13.5)),
                new PrefixOperator("-", new Number(12.6))),
            new Number(2), new BinaryOperator("//", new Number(-13.5), new PrefixOperator("-", new Number(12.6))),
            new BinaryOperator("//", new Number(-13.5), new Number(-12.6))),
        new TestCase("13//-13.5", [], new BinaryOperator("//", new Number(13),
                new PrefixOperator("-", new Number(13.5))),
            new Number(0), new BinaryOperator("//", new Number(13), new Number(-13.5))),
        new TestCase("12.6//-13.5", [], new BinaryOperator("//", new Number(12.6),
                new PrefixOperator("-", new Number(13.5))),
            new Number(0), new BinaryOperator("//", new Number(12.6), new Number(-13.5))),
        new TestCase("-13//-13.5", [], new BinaryOperator("//", new PrefixOperator("-", new Number(13)),
                new PrefixOperator("-", new Number(13.5))),
            new Number(1), new BinaryOperator("//", new Number(-13), new PrefixOperator("-", new Number(13.5))),
            new BinaryOperator("//", new Number(-13), new Number(-13.5))),
        new TestCase("-12.6//-13.5", [], new BinaryOperator("//", new PrefixOperator("-", new Number(12.6)),
                new PrefixOperator("-", new Number(13.5))),
            new Number(1), new BinaryOperator("//", new Number(-12.6), new PrefixOperator("-", new Number(13.5))),
            new BinaryOperator("//", new Number(-12.6), new Number(-13.5))),
        new TestCase(" 1&&2", [], new BinaryOperator("&&", new Number(1), new Number(2)), Logical.TRUE),
        new TestCase(" 1&&0", [], new BinaryOperator("&&", new Number(1), new Number(0)), Logical.FALSE),
        new TestCase(" 0∧1", [], new BinaryOperator("∧", new Number(0), new Number(1)), Logical.FALSE),
        new TestCase(" 0∧0", [], new BinaryOperator("∧", new Number(0), new Number(0)), Logical.FALSE),
        new TestCase(" 1||2", [], new BinaryOperator("||", new Number(1), new Number(2)), Logical.TRUE),
        new TestCase(" 0||2", [], new BinaryOperator("||", new Number(0), new Number(2)), Logical.TRUE),
        new TestCase(" 1 ∨0", [], new BinaryOperator("∨", new Number(1), new Number(0)), Logical.TRUE),
        new TestCase(" 0 ∨0", [], new BinaryOperator("∨", new Number(0), new Number(0)), Logical.FALSE),
        new TestCase(" 1 ⊕5", [], new BinaryOperator("⊕", new Number(1), new Number(5)), Logical.FALSE),
        new TestCase(" 4 ⊕0", [], new BinaryOperator("⊕", new Number(4), new Number(0)), Logical.TRUE),
        new TestCase(" 0 ⊕2", [], new BinaryOperator("⊕", new Number(0), new Number(2)), Logical.TRUE),
        new TestCase(" 0 ⊕0", [], new BinaryOperator("⊕", new Number(0), new Number(0)), Logical.FALSE),
        new TestCase(" 1 ==2", [], new BinaryOperator("==", new Number(1), new Number(2)), Logical.FALSE),
        new TestCase(" pi ==π", [], new BinaryOperator("==", new Constant("pi"), new Constant("π")), Logical.TRUE,
            new BinaryOperator("==", new Number(Math.PI), new Constant("π")),
            new BinaryOperator("==", new Number(Math.PI), new Number(Math.PI))),
        new TestCase(" 1 !=2", [], new BinaryOperator("!=", new Number(1), new Number(2)), Logical.TRUE),
        new TestCase(" infinity ≠inf", [], new BinaryOperator("≠", new Infinity("infinity"), new Infinity("inf")),
            Logical.FALSE),
        new TestCase(" 2 <>2", [], new BinaryOperator("<>", new Number(2), new Number(2)), Logical.FALSE),
        new TestCase(" 1 <2", [], new BinaryOperator("<", new Number(1), new Number(2)), Logical.TRUE),
        new TestCase(" 1>2", [], new BinaryOperator(">", new Number(1), new Number(2)), Logical.FALSE),
        new TestCase(" 1 <=2", [], new BinaryOperator("<=", new Number(1), new Number(2)), Logical.TRUE),
        new TestCase(" 1 ≤1", [], new BinaryOperator("≤", new Number(1), new Number(1)), Logical.TRUE),
        new TestCase(" 1 >=2", [], new BinaryOperator(">=", new Number(1), new Number(2)), Logical.FALSE),
        new TestCase(" 2 ≥2", [], new BinaryOperator("≥", new Number(2), new Number(2)), Logical.TRUE),
        new TestCase(" 1+2-3*4  /5^7&&8||9⊕10==11", [], new BinaryOperator("||", new BinaryOperator("&&",
            new BinaryOperator("-", new BinaryOperator("+", new Number(1), new Number(2)), new BinaryOperator("/",
                new BinaryOperator("*", new Number(3), new Number(4)), new BinaryOperator("^", new Number(5),
                    new Number(7)))), new Number(8)), new BinaryOperator("⊕", new Number(9), new BinaryOperator("==",
                new Number(10), new Number(11)))),
            Logical.TRUE, new BinaryOperator("||", new BinaryOperator("&&", new BinaryOperator("-", new Number(3),
                new BinaryOperator("/", new BinaryOperator("*", new Number(3), new Number(4)), new BinaryOperator("^",
                    new Number(5), new Number(7)))), new Number(8)),
                new BinaryOperator("⊕", new Number(9), new BinaryOperator("==", new Number(10), new Number(11)))),
            new BinaryOperator("||", new BinaryOperator("&&", new BinaryOperator("-", new Number(3),
                    new BinaryOperator("/", new Number(12), new BinaryOperator("^", new Number(5), new Number(7)))),
                new Number(8)), new BinaryOperator("⊕", new Number(9), new BinaryOperator("==", new Number(10),
                    new Number(11)))),
            new BinaryOperator("||", new BinaryOperator("&&", new BinaryOperator("-", new Number(3),
                new BinaryOperator("/", new Number(12), new Number(78125))), new Number(8)), new BinaryOperator("⊕",
                    new Number(9), new BinaryOperator("==", new Number(10), new Number(11)))),
            new BinaryOperator("||", new BinaryOperator("&&", new BinaryOperator("-", new Number(3),
                    new Number((double)12 / 78125)), new Number(8)), new BinaryOperator("⊕", new Number(9),
                new BinaryOperator("==", new Number(10), new Number(11)))),
            new BinaryOperator("||", new BinaryOperator("&&", new Number(3 - ((double)12 / 78125)), new Number(8)),
                new BinaryOperator("⊕", new Number(9), new BinaryOperator("==", new Number(10), new Number(11)))),
            new BinaryOperator("||", Logical.TRUE, new BinaryOperator("⊕", new Number(9), new BinaryOperator("==",
                new Number(10), new Number(11)))),
            new BinaryOperator("||", Logical.TRUE, new BinaryOperator("⊕", new Number(9), Logical.FALSE)),
            new BinaryOperator("||", Logical.TRUE, Logical.TRUE)),
        new TestCase("+1+-2.0", [], new BinaryOperator("+", new PrefixOperator("+", new Number(1)),
                new PrefixOperator("-", new Number(2))),
            new Number(-1), new BinaryOperator("+", new Number(1), new PrefixOperator("-", new Number(2))),
            new BinaryOperator("+", new Number(1), new Number(-2)), new Number(-1)),
        new TestCase("1.0!-2%", [], new BinaryOperator("-", new PostfixOperator("!", new Number(1)),
                new PostfixOperator("%", new Number(2))),
            new Number(0.98), new BinaryOperator("-", new Number(1), new PostfixOperator("%", new Number(2))),
            new BinaryOperator("-", new Number(1), new Number(0.02)), new Number(0.98)),
        new TestCase("!¬2*-  +3", [], new BinaryOperator("*", new PrefixOperator("!", new PrefixOperator("¬",
                new Number(2))), new PrefixOperator("-", new PrefixOperator("+", new Number(3)))),
            new Number(-3), new BinaryOperator("*", new PrefixOperator("!", Logical.FALSE),
                new PrefixOperator("-", new PrefixOperator("+", new Number(3)))),
            new BinaryOperator("*", new Number(1), new PrefixOperator("-", new PrefixOperator("+",
                new Number(3)))), new BinaryOperator("*", new Number(1), new PrefixOperator("-", new Number(3))),
            new BinaryOperator("*", new Number(1), new Number(-3))),
        new TestCase("1%%/2!!", [], new BinaryOperator("/", new PostfixOperator("%", new PostfixOperator("%",
                new Number(1))), new PostfixOperator("!!", new Number(2))),
            new Number(0.00005), new BinaryOperator("/", new PostfixOperator("%", new Number(0.01)),
                new PostfixOperator("!!", new Number(2))),
            new BinaryOperator("/", new Number(0.0001), new PostfixOperator("!!", new Number(2))),
            new BinaryOperator("/", new Number(0.0001), new Number(2)), new Number(0.00005)),
        new TestCase("-13!%(!12)%", [], new BinaryOperator("%", new PrefixOperator("-", new PostfixOperator("!",
                new Number(13))), new PostfixOperator("%", new Parentheses(new PrefixOperator("!",
                    new Number(12))))), new Number(411680.94),
            new BinaryOperator("%", new PrefixOperator("-", new Number(6227020800)), new PostfixOperator("%",
                new Parentheses(new PrefixOperator("!", new Number(12))))),
            new BinaryOperator("%", new Number(-6227020800), new PostfixOperator("%", new Parentheses(
                new PrefixOperator("!", new Number(12))))),
            new BinaryOperator("%", new Number(-6227020800), new PostfixOperator("%", new Parentheses(
                new Number(176214841)))),
            new BinaryOperator("%", new Number(-6227020800), new PostfixOperator("%", new Number(176214841))),
            new BinaryOperator("%", new Number(-6227020800), new Number(1762148.41))),
        new TestCase("1+((2-τ)*(4 /-pi))^7&& abc_1||9⊕10==  11", [], new BinaryOperator("||", new BinaryOperator("&&",
            new BinaryOperator("+", new Number(1), new BinaryOperator("^", new Parentheses(new BinaryOperator("*",
                new Parentheses(new BinaryOperator("-", new Number(2), new Constant("τ"))), new Parentheses(
                    new BinaryOperator("/", new Number(4), new PrefixOperator("-", new Constant("pi")))))),
                new Number(7))), new Variable("abc_1")), new BinaryOperator("⊕", new Number(9),
                    new BinaryOperator("==", new Number(10), new Number(11)))),
            Logical.TRUE, new BinaryOperator("||", new BinaryOperator("&&", new BinaryOperator("+", new Number(1),
                new BinaryOperator("^", new Parentheses(new BinaryOperator("*", new Parentheses(new BinaryOperator("-",
                    new Number(2), new Number(Math.Tau))), new Parentheses(new BinaryOperator("/", new Number(4),
                        new PrefixOperator("-", new Constant("pi")))))), new Number(7))), new Variable("abc_1")),
                new BinaryOperator("⊕", new Number(9), new BinaryOperator("==", new Number(10), new Number(11)))),
            new BinaryOperator("||", new BinaryOperator("&&", new BinaryOperator("+", new Number(1),
                    new BinaryOperator("^", new Parentheses(new BinaryOperator("*", new Parentheses(
                        new Number(2 - Math.Tau)), new Parentheses(new BinaryOperator("/", new Number(4),
                            new PrefixOperator("-", new Constant("pi")))))), new Number(7))),
                    new Variable("abc_1")),
                new BinaryOperator("⊕", new Number(9), new BinaryOperator("==", new Number(10), new Number(11)))),
            new BinaryOperator("||", new BinaryOperator("&&", new BinaryOperator("+", new Number(1),
                new BinaryOperator("^", new Parentheses(new BinaryOperator("*", new Number(2 - Math.Tau),
                    new Parentheses(new BinaryOperator("/", new Number(4), new PrefixOperator("-",
                        new Constant("pi")))))), new Number(7))), new Variable("abc_1")), new BinaryOperator("⊕",
                            new Number(9), new BinaryOperator("==", new Number(10), new Number(11)))),
            new BinaryOperator("||", new BinaryOperator("&&", new BinaryOperator("+", new Number(1),
                    new BinaryOperator("^", new Parentheses(new BinaryOperator("*", new Number(2 - Math.Tau),
                        new Parentheses(new BinaryOperator("/", new Number(4), new PrefixOperator("-",
                            new Number(Math.PI)))))), new Number(7))), new Variable("abc_1")),
                new BinaryOperator("⊕", new Number(9), new BinaryOperator("==", new Number(10), new Number(11)))),
            new BinaryOperator("||", new BinaryOperator("&&", new BinaryOperator("+", new Number(1),
                new BinaryOperator("^", new Parentheses(new BinaryOperator("*", new Number(2 - Math.Tau),
                    new Parentheses(new BinaryOperator("/", new Number(4), new Number(-Math.PI))))), new Number(7))),
                new Variable("abc_1")), new BinaryOperator("⊕", new Number(9), new BinaryOperator("==", new Number(10),
                    new Number(11)))),
            new BinaryOperator("||", new BinaryOperator("&&", new BinaryOperator("+", new Number(1),
                    new BinaryOperator("^", new Parentheses(new BinaryOperator("*", new Number(2 - Math.Tau),
                        new Parentheses(new Number(4 / -Math.PI)))), new Number(7))), new Variable("abc_1")),
                new BinaryOperator("⊕", new Number(9), new BinaryOperator("==", new Number(10), new Number(11)))),
            new BinaryOperator("||", new BinaryOperator("&&", new BinaryOperator("+", new Number(1),
                new BinaryOperator("^", new Parentheses(new BinaryOperator("*", new Number(2 - Math.Tau),
                    new Number(4 / -Math.PI))), new Number(7))), new Variable("abc_1")), new BinaryOperator("⊕",
                        new Number(9), new BinaryOperator("==", new Number(10), new Number(11)))),
            new BinaryOperator("||", new BinaryOperator("&&", new BinaryOperator("+", new Number(1),
                    new BinaryOperator("^", new Parentheses(new Number((8 - 4 * Math.Tau) / -Math.PI)), new Number(7))),
                new Variable("abc_1")), new BinaryOperator("⊕", new Number(9), new BinaryOperator("==", new Number(10),
                    new Number(11)))),
            new BinaryOperator("||", new BinaryOperator("&&", new BinaryOperator("+", new Number(1),
                    new BinaryOperator("^", new Number((8 - 4 * Math.Tau) / -Math.PI), new Number(7))),
                new Variable("abc_1")), new BinaryOperator("⊕", new Number(9), new BinaryOperator("==", new Number(10),
                    new Number(11)))),
            new BinaryOperator("||", new BinaryOperator("&&", new BinaryOperator("+", new Number(1),
                new Number(Math.Pow((8 - 4 * Math.Tau) / -Math.PI, 7))), new Variable("abc_1")), new BinaryOperator("⊕",
                    new Number(9), new BinaryOperator("==", new Number(10), new Number(11)))),
            new BinaryOperator("||", new BinaryOperator("&&",
                    new Number(1 + Math.Pow((8 - 4 * Math.Tau) / -Math.PI, 7)), new Variable("abc_1")),
                new BinaryOperator("⊕", new Number(9), new BinaryOperator("==", new Number(10), new Number(11)))),
            new BinaryOperator("||", new BinaryOperator("&&",
                new Number(1 + Math.Pow((8 - 4 * Math.Tau) / -Math.PI, 7)), new Number(1)), new BinaryOperator("⊕",
                    new Number(9), new BinaryOperator("==", new Number(10), new Number(11)))),
            new BinaryOperator("||", Logical.TRUE, new BinaryOperator("⊕", new Number(9), new BinaryOperator("==",
                new Number(10), new Number(11)))),
            new BinaryOperator("||", Logical.TRUE, new BinaryOperator("⊕", new Number(9), Logical.FALSE)),
            new BinaryOperator("||", Logical.TRUE, Logical.TRUE)),
        new TestCase("∞", [], new Infinity("∞")),
        new TestCase("inf", [], new Infinity("inf")),
        new TestCase("infinity ", [], new Infinity("infinity")),
        new TestCase("-∞", [], new PrefixOperator("-", new Infinity("∞")), new Infinity("∞", false)),
        new TestCase("-inf", [], new PrefixOperator("-", new Infinity("inf")), new Infinity("inf", false)),
        new TestCase("-infinity ", [], new PrefixOperator("-", new Infinity("infinity")), new Infinity("infinity", false)),
        new TestCase("π", [], new Constant("π"), new Number(Math.PI)),
        new TestCase("pi", [], new Constant("pi"), new Number(Math.PI)),
        new TestCase("τ", [], new Constant("τ"), new Number(Math.Tau)),
        new TestCase("tau", [], new Constant("tau"), new Number(Math.Tau)),
        new TestCase("e", [], new Constant("e"), new Number(Math.E)),
        new TestCase("true", [], new Logical(true)),
        new TestCase("false", [], new Logical(false)),
        new TestCase("undefined", [], Undefined.UNDEFINED),
        new TestCase("dne", [], Undefined.DNE),
        new TestCase("AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz ", [],
            new Variable("AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"), new Number(2)),
        new TestCase("ΑαΒβΓγΔδΕεΖζΗηΘθΙιΚκΛλΜμΝνΞξΟοΠπΡρΣσςΤτΥυΦφΧχΨψΩω", [],
            new Variable("ΑαΒβΓγΔδΕεΖζΗηΘθΙιΚκΛλΜμΝνΞξΟοΠπΡρΣσςΤτΥυΦφΧχΨψΩω"), new Number(3)),
        new TestCase("abc_123", [], new Variable("abc_123"), new Number(4)),
        new TestCase("αβγ_123", [], new Variable("αβγ_123"), new Number(5)),
        new TestCase("abcd_αβγ_xyz", [], new Variable("abcd_αβγ_xyz"), new Number(6)),
        new TestCase("abcd_αβγ_xyz=3", [], new AssignmentOperator(new Variable("abcd_αβγ_xyz"), new Number(3)),
            new Number(3)),
        new TestCase("abcd_αβγ_xyz=π", [], new AssignmentOperator(new Variable("abcd_αβγ_xyz"), new Constant("π")),
            new Number(Math.PI), new AssignmentOperator(new Variable("abcd_αβγ_xyz"), new Number(Math.PI))),
        new TestCase("abcd_αβγ_xyz=inf", [], new AssignmentOperator(new Variable("abcd_αβγ_xyz"), new Infinity("inf")),
            new Infinity("inf")),
        new TestCase("--1", [], new PrefixOperator("--", new Number(1)), new Number(0)),
        new TestCase("++1", [], new PrefixOperator("++", new Number(1)), new Number(2)),
        new TestCase("1--", [], new PostfixOperator("--", new Number(1)), new Number(1)),
        new TestCase("1++", [], new PostfixOperator("++", new Number(1)), new Number(1)),
        new TestCase("---1", [], new PrefixOperator("--", new PrefixOperator("-", new Number(1))),
            new Number(-2), new PrefixOperator("--", new Number(-1))),
        new TestCase("+++1", [], new PrefixOperator("++", new PrefixOperator("+", new Number(1))), new Number(2),
            new PrefixOperator("++", new Number(1))),
        new TestCase("(x=3)-x", [], new BinaryOperator("-", new Parentheses(new AssignmentOperator(new Variable("x"),
                new Number(3))), new Variable("x")),
            new Number(0), new BinaryOperator("-", new Parentheses(new Number(3)), new Variable("x")),
            new BinaryOperator("-", new Number(3), new Variable("x")),
            new BinaryOperator("-", new Number(3), new Number(3))),
        new TestCase("p(3)", [], new FunctionCall("p", [new Number(3)]), new Number(4)),
        new TestCase("f(3)", [], new FunctionCall("f", [new Number(3)]), new Number(3)),
        new TestCase("g(1, 2, 3)", [], new FunctionCall("g", [new Number(1), new Number(2), new Number(3)]), new Number(5)),
        new TestCase("g(abc_1, 2, 3+4*1)", [], new FunctionCall("g", [new Variable("abc_1"),
            new Number(2),
            new BinaryOperator("+", new Number(3), new BinaryOperator("*", new Number(4), new Number(1)))]),
            new Number(9), new FunctionCall("g", [new Number(1),
                new Number(2),
                new BinaryOperator("+", new Number(3), new BinaryOperator("*", new Number(4), new Number(1)))]),
            new FunctionCall("g", [new Number(1),
                new Number(2),
                new BinaryOperator("+", new Number(3), new Number(4))]),
            new FunctionCall("g", [new Number(1), new Number(2), new Number(7)])),
        new TestCase("is_num(3)", [], new FunctionCall("is_num", [new Number(3)]), Logical.TRUE),
        new TestCase("is_num(infinity)", [], new FunctionCall("is_num", [new Infinity("infinity")]), Logical.FALSE),
        new TestCase("is_num(3+4)", [], new FunctionCall("is_num", [new BinaryOperator("+", new Number(3), new Number(4))]),
            Logical.FALSE),
        new TestCase("l(1, 2, 3, 4)", [], new FunctionCall("l",
            [new Number(1), new Number(2), new Number(3), new Number(4)]), new Number(10)),
        new TestCase("triangle(4)", [], new FunctionCall("triangle", [new Number(4)]), new Number(10)),
        new TestCase("dist = ([IsNumber]x, [NotUndefined  ]  y) => (((x - 0)^2)+((y)^2)) ^ (1/2)", [],
            new AssignmentOperator(new Variable("dist"), new LambdaFunction([new Parameter("x",
                [new IsNumberAttribute()]),
                new Parameter("y", [new NotUndefinedAttribute()])],
                new BinaryOperator("^", new Parentheses(
                new BinaryOperator("+", new Parentheses(new BinaryOperator("^", new Parentheses(new BinaryOperator("-",
                        new Variable("x"), new Number(0))), new Number(2))), new Parentheses(new BinaryOperator("^",
                    new Parentheses(new Variable("y")), new Number(2))))), new Parentheses(new BinaryOperator("/",
                        new Number(1), new Number(2)))))), new LambdaFunction(["x", "y"],
            new BinaryOperator("^", new Parentheses(new BinaryOperator("+", new Parentheses(new BinaryOperator("^",
                    new Parentheses(new BinaryOperator("-", new Variable("x"), new Number(0))), new Number(2))),
                new Parentheses(new BinaryOperator("^", new Parentheses(new Variable("y")), new Number(2))))),
                    new Parentheses(new BinaryOperator("/", new Number(1), new Number(2)))))),
        new TestCase("get_pi = () => pi", [], new AssignmentOperator(new Variable("get_pi"),
            new LambdaFunction([], new Constant("pi"))), new LambdaFunction([], new Constant("pi"))),
        new TestCase("trig = [IsNumber, Minimum(0)] n => triangle(n)", [], new AssignmentOperator(new Variable("trig"),
                new LambdaFunction([new Parameter("n", [new IsNumberAttribute(), new MaximumAttribute(0)])],
                    new FunctionCall("triangle", [new Variable("n")]))),
            new LambdaFunction(["n"], new FunctionCall("triangle", [new Variable("n")]))),
        new TestCase("inc(1)+n", [], new BinaryOperator("+", new FunctionCall("inc", [new Number(1)]),
                new Variable("n")), new Number(7), new BinaryOperator("+", new Number(2), new Variable("n")),
            new BinaryOperator("+", new Number(2), new Number(5))),
        new TestCase("and(1, 2)", [], new FunctionCall("and", [new Number(1), new Number(2)]), Logical.TRUE),
        new TestCase("or(1, 2)", [], new FunctionCall("or", [new Number(1), new Number(2)]), Logical.TRUE),
        new TestCase("xor(1, 2)", [], new FunctionCall("xor", [new Number(1), new Number(2)]), Logical.FALSE),
        new TestCase("sin([pi,pi/2])", [], new FunctionCall("sin",
                [new Vector([new Constant("pi"), new BinaryOperator("/", new Constant("pi"), (Number)2)])]),
            new Vector([(Number)0, (Number)1]),
            new FunctionCall("sin",
                [new Vector([(Number)Double.Pi, new BinaryOperator("/", new Constant("pi"), (Number)2)])]),
            new FunctionCall("sin",
                [new Vector([(Number)Double.Pi, new BinaryOperator("/", (Number)Double.Pi, (Number)2)])]),
            new FunctionCall("sin", [new Vector([(Number)Double.Pi, (Number)(Double.Pi / 2)])])),
        new TestCase("tan([0,pi])", [], new FunctionCall("tan", [new Vector([(Number)0, new Constant("pi")])]),
            new Vector([(Number)0, (Number)0]),
            new FunctionCall("tan", [new Vector([(Number)0, (Number)Double.Pi])])),
        new TestCase("∅", [], new Constant("∅"), new Set()),
        new TestCase("empty", [], new Constant("empty"), new Set()),
        new TestCase("empty_set", [], new Constant("empty_set"), new Set()),
        new TestCase("[1] + [0] + 4", [], new BinaryOperator("+", new BinaryOperator("+", new Vector([(Number)1]),
                new Vector([(Number)0])), (Number)4),
            new Vector([(Number)5]), new BinaryOperator("+", new Vector([(Number)1]), (Number)4)),
        new TestCase("[1] [0] + 4", [], new BinaryOperator("+", new Indexer(new Vector([(Number)1]), (Number)0), (Number)4),
            (Number)5, new BinaryOperator("+", (Number)1, (Number)4)),
        new TestCase("3-infinity", [], new BinaryOperator("-", (Number)3, Infinity.POSITIVE), Infinity.NEGATIVE),
        new TestCase("true+true", [], new BinaryOperator("+", Logical.TRUE, Logical.TRUE), (Number)2),
        new TestCase("false+true", [], new BinaryOperator("+", Logical.FALSE, Logical.TRUE), Number.ONE),
        new TestCase("true-true", [], new BinaryOperator("-", Logical.TRUE, Logical.TRUE), Number.ZERO),
        new TestCase("infinity^infinity", [], new BinaryOperator("^", Infinity.POSITIVE, Infinity.POSITIVE),
            Undefined.UNDEFINED),
        new TestCase("infinity^-infinity", [], new BinaryOperator("^", Infinity.POSITIVE,
                new PrefixOperator("-", Infinity.POSITIVE)),
            Number.ZERO,
            new BinaryOperator("^", Infinity.POSITIVE, Infinity.NEGATIVE)),
        new TestCase("-infinity^infinity", [], new BinaryOperator("^", new PrefixOperator("-", Infinity.POSITIVE),
                Infinity.POSITIVE),
            Undefined.UNDEFINED,
            new BinaryOperator("^", Infinity.NEGATIVE, Infinity.POSITIVE)),
        new TestCase("-infinity^-infinity", [], new BinaryOperator("^", new PrefixOperator("-", Infinity.POSITIVE),
                new PrefixOperator("-", Infinity.POSITIVE)),
            Number.ZERO,
            new BinaryOperator("^", Infinity.NEGATIVE, new PrefixOperator("-", Infinity.POSITIVE)),
            new BinaryOperator("^", Infinity.NEGATIVE, Infinity.NEGATIVE)),
    ];

    public readonly static Dictionary<string, Terminal> ContextVariables = new Dictionary<string, Terminal>()
    {
        { "abc_1", new Number(1) },
        { "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz", new Number(2) },
        { "ΑαΒβΓγΔδΕεΖζΗηΘθΙιΚκΛλΜμΝνΞξΟοΠπΡρΣσςΤτΥυΦφΧχΨψΩω", new Number(3) },
        { "abc_123", new Number(4) },
        { "αβγ_123", new Number(5) },
        { "abcd_αβγ_xyz", new Number(6) },
        { "p", new NativeFunction(TestValues.P) },
        { "n", new Number(5) }
    };

    public readonly static Dictionary<string, Function> ContextFunctions = new Dictionary<string, Function>
    {
        { "f", new NativeFunction(TestValues.F) },
        { "g", new NativeFunction(TestValues.G) },
        { "l", new LambdaFunction(["a", "b", "c", "d"], new BinaryOperator("+", new BinaryOperator("+",
            new BinaryOperator("+", new Variable("a"), new Variable("b")), new Variable("c")), new Variable("d"))) },
        { "triangle", new LambdaFunction(["n"], new BinaryOperator("/", new BinaryOperator("*",
            new Variable("n"), new Parentheses(new BinaryOperator("+", new Variable("n"), new Number(1)))),
            new Number(2))) },
        { "inc", new LambdaFunction(["n"], new AssignmentOperator(new Variable("n"),
            new BinaryOperator("+", new Variable("n"), new Number(1)))) }
    };
}
