using CalcExpr.Expressions;
using CalcExpr.Expressions.Collections;
using CalcExpr.Expressions.Components;
using CalcExpr.Expressions.Functions;
using CalcExpr.Expressions.Terminals;
using CalcExpr.FunctionAttributes.ConditionalAttributes;
using CalcExpr.Tokenization.Tokens;
using TestCalcExpr.TestUtils;

namespace TestCalcExpr.TestData;

public static partial class TestCases
{
    public readonly static TestCase[] Expressions =
    [
        new TestCase(" .1", [new NumberToken(".1", 1)], new Number(0.1)),
        new TestCase(" 0.1", [new NumberToken("0.1", 1)], new Number(0.1)),
        new TestCase(" 1.", [new NumberToken("1.", 1)], new Number(1)),
        new TestCase(" 1", [new NumberToken("1", 1)], new Number(1)),
        new TestCase(" +1", [new SymbolToken('+', 1), new NumberToken("1", 2)], new PrefixOperator("+", new Number(1)), new Number(1)),
        new TestCase(" -1", [new SymbolToken('-', 1), new NumberToken("1", 2)], new PrefixOperator("-", new Number(1)), new Number(-1)),
        new TestCase(" !1", [new SymbolToken('!', 1), new NumberToken("1", 2)], new PrefixOperator("!", new Number(1)), new Number(0)),
        new TestCase(" !0", [new SymbolToken('!', 1), new NumberToken("0", 2)], new PrefixOperator("!", new Number(0)), new Number(1)),
        new TestCase(" ~2", [new SymbolToken('~', 1), new NumberToken("2", 2)], new PrefixOperator("~", new Number(2)), Logical.FALSE),
        new TestCase(" ¬0", [new SymbolToken('¬', 1), new NumberToken("0", 2)], new PrefixOperator("¬", new Number(0)), Logical.TRUE),
        new TestCase(" 5!", [new NumberToken("5", 1), new SymbolToken('!', 2)], new PostfixOperator("!", new Number(5)), new Number(120)),
        new TestCase(" 5#", [new NumberToken("5", 1), new SymbolToken('#', 2)], new PostfixOperator("#", new Number(5)), new Number(2310)),
        new TestCase(" 5!! ", [new NumberToken("5", 1), new SymbolToken('!', 2), new SymbolToken('!', 3)], new PostfixOperator("!!", new Number(5)), new Number(15)),
        new TestCase(" 1%", [new NumberToken("1", 1), new SymbolToken('%', 2)], new PostfixOperator("%", new Number(1)), new Number(0.01)),
        new TestCase("~!1 ", [new SymbolToken('~', 0), new SymbolToken('!', 1), new NumberToken("1", 2)],
            new PrefixOperator("~", new PrefixOperator("!", new Number(1))), Logical.TRUE,
            new PrefixOperator("~", new Number(0))),
        new TestCase("2!% ", [new NumberToken("2", 0), new SymbolToken('!', 1), new SymbolToken('%', 2)],
            new PostfixOperator("%", new PostfixOperator("!", new Number(2))),
            new Number(0.02), new PostfixOperator("%", new Number(2))),
        new TestCase("-5% ", [new SymbolToken('-', 0), new NumberToken("5", 1), new SymbolToken('%', 2)],
            new PrefixOperator("-", new PostfixOperator("%", new Number(5))), new Number(-0.05), new PrefixOperator("-", new Number(0.05))),
        new TestCase(" 3!!!", [new NumberToken("3", 1), new SymbolToken('!', 2), new SymbolToken('!', 3), new SymbolToken('!', 4)],
            new PostfixOperator("!", new PostfixOperator("!!", new Number(3))), new Number(6), new PostfixOperator("!", new Number(3))),
        new TestCase(" 1+2.0", [new NumberToken("1", 1), new SymbolToken('+', 2), new NumberToken("2.0", 3)],
            new BinaryOperator("+", new Number(1), new Number(2)), new Number(3)),
        new TestCase(" 0 + 0 * 2", [new NumberToken("0", 1), new SymbolToken('+', 3), new NumberToken("0", 5), new SymbolToken('*', 7), new NumberToken("2", 9)],
            new BinaryOperator("+", new Number(0), new BinaryOperator("*", new Number(0), new Number(2))), new Number(0),
            new BinaryOperator("+", new Number(0), new Number(0))),
        new TestCase(" 1.0-2", [new NumberToken("1.0", 1), new SymbolToken('-', 4), new NumberToken("2", 5)],
            new BinaryOperator("-", new Number(1), new Number(2)), new Number(-1)),
        new TestCase(" 2*3", [new NumberToken("2", 1), new SymbolToken('*', 2), new NumberToken("3", 3)],
            new BinaryOperator("*", new Number(2), new Number(3)), new Number(6)),
        new TestCase(" 6×7", [new NumberToken("6", 1), new SymbolToken('×', 2), new NumberToken("7", 3)],
            new BinaryOperator("×", new Number(6), new Number(7)), new Number(42)),
        new TestCase(" 1/2", [new NumberToken("1", 1), new SymbolToken('/', 2), new NumberToken("2", 3)],
            new BinaryOperator("/", new Number(1), new Number(2)), new Number(0.5)),
        new TestCase(" 2÷2", [new NumberToken("2", 1), new SymbolToken('÷', 2), new NumberToken("2", 3)],
            new BinaryOperator("÷", new Number(2), new Number(2)), new Number(1)),
        new TestCase(" 2^3 ", [new NumberToken("2", 1), new SymbolToken('^', 2), new NumberToken("3", 3)],
            new BinaryOperator("^", new Number(2), new Number(3)), new Number(8)),
        new TestCase("13%12.6", [new NumberToken("13", 0), new SymbolToken('%', 2), new NumberToken("12.6", 3)],
            new BinaryOperator("%", new Number(13), new Number(12.6)), new Number(0.4)),
        new TestCase("12.6%12.6", [new NumberToken("12.6", 0), new SymbolToken('%', 4), new NumberToken("12.6", 5)],
            new BinaryOperator("%", new Number(12.6), new Number(12.6)), new Number(0)),
        new TestCase("13.5%12.6", [new NumberToken("13.5", 0), new SymbolToken('%', 4), new NumberToken("12.6", 5)],
            new BinaryOperator("%", new Number(13.5), new Number(12.6)), new Number(0.9)),
        new TestCase("-13%12.6", [new SymbolToken('-', 0), new NumberToken("13", 1), new SymbolToken('%', 3), new NumberToken("12.6", 4)],
            new BinaryOperator("%", new PrefixOperator("-", new Number(13)),
            new Number(12.6)), new Number(12.2), new BinaryOperator("%", new Number(-13), new Number(12.6))),
        new TestCase("-12.6%12.6", [new SymbolToken('-', 0), new NumberToken("12.6", 1), new SymbolToken('%', 5), new NumberToken("12.6", 6)],
            new BinaryOperator("%", new PrefixOperator("-", new Number(12.6)),
            new Number(12.6)), new Number(0), new BinaryOperator("%", new Number(-12.6), new Number(12.6))),
        new TestCase("-13.5%12.6", [new SymbolToken('-', 0), new NumberToken("13.5", 1), new SymbolToken('%', 5), new NumberToken("12.6", 6)],
            new BinaryOperator("%", new PrefixOperator("-", new Number(13.5)),
            new Number(12.6)), new Number(11.7), new BinaryOperator("%", new Number(-13.5), new Number(12.6))),
        new TestCase("13%13.5", [new NumberToken("13", 0), new SymbolToken('%', 2), new NumberToken("13.5", 3)],
            new BinaryOperator("%", new Number(13), new Number(13.5)), new Number(13)),
        new TestCase("12.6%13.5", [new NumberToken("12.6", 0), new SymbolToken('%', 4), new NumberToken("13.5", 5)],
            new BinaryOperator("%", new Number(12.6), new Number(13.5)), new Number(12.6)),
        new TestCase("13.5%13.5", [new NumberToken("13.5", 0), new SymbolToken('%', 4), new NumberToken("13.5", 5)],
            new BinaryOperator("%", new Number(13.5), new Number(13.5)), new Number(0)),
        new TestCase("-13%13.5", [new SymbolToken('-', 0), new NumberToken("13", 1), new SymbolToken('%', 3), new NumberToken("13.5", 4)],
            new BinaryOperator("%", new PrefixOperator("-", new Number(13)),
            new Number(13.5)), new Number(0.5), new BinaryOperator("%", new Number(-13), new Number(13.5))),
        new TestCase("-12.6%13.5", [new SymbolToken('-', 0), new NumberToken("12.6", 1), new SymbolToken('%', 5), new NumberToken("13.5", 6)],
            new BinaryOperator("%", new PrefixOperator("-", new Number(12.6)),
            new Number(13.5)), new Number(0.9), new BinaryOperator("%", new Number(-12.6), new Number(13.5))),
        new TestCase("-13.5%13.5", [new SymbolToken('-', 0), new NumberToken("13.5", 1), new SymbolToken('%', 5), new NumberToken("13.5", 6)],
            new BinaryOperator("%", new PrefixOperator("-", new Number(13.5)),
            new Number(13.5)), new Number(0), new BinaryOperator("%", new Number(-13.5), new Number(13.5))),
        new TestCase("13%(-13)", [new NumberToken("13", 0), new SymbolToken('%', 2), new OpenBracketToken(Bracket.Parenthesis, 3),
                new SymbolToken('-', 4), new NumberToken("13", 5), new CloseBracketToken(Bracket.Parenthesis, 7)],
            new BinaryOperator("%", new Number(13),
                new Parentheses(new PrefixOperator("-", new Number(13)))),
            new Number(0), new BinaryOperator("%", new Number(13), new Parentheses(new Number(-13))),
            new BinaryOperator("%", new Number(13), new Number(-13))),
        new TestCase("12.6%(-13)", [new NumberToken("12.6", 0), new SymbolToken('%', 4), new OpenBracketToken(Bracket.Parenthesis, 5),
                new SymbolToken('-', 6), new NumberToken("13", 7), new CloseBracketToken(Bracket.Parenthesis, 9)],
            new BinaryOperator("%", new Number(12.6),
                new Parentheses(new PrefixOperator("-", new Number(13)))),
            new Number(12.6), new BinaryOperator("%", new Number(12.6), new Parentheses(new Number(-13))),
            new BinaryOperator("%", new Number(12.6), new Number(-13))),
        new TestCase("-13%(-13)", [new SymbolToken('-', 0), new NumberToken("13", 1), new SymbolToken('%', 3),
                new OpenBracketToken(Bracket.Parenthesis, 4), new SymbolToken('-', 5), new NumberToken("13", 6),
                new CloseBracketToken(Bracket.Parenthesis, 8)],
            new BinaryOperator("%", new PrefixOperator("-", new Number(13)),
                new Parentheses(new PrefixOperator("-", new Number(13)))), new Number(0),
            new BinaryOperator("%", new Number(-13), new Parentheses(new PrefixOperator("-", new Number(13)))),
            new BinaryOperator("%", new Number(-13), new Parentheses(new Number(-13))),
            new BinaryOperator("%", new Number(-13), new Number(-13))),
        new TestCase("-12.6%(-13)", [new SymbolToken('-', 0), new NumberToken("12.6", 1), new SymbolToken('%', 5),
                new OpenBracketToken(Bracket.Parenthesis, 6), new SymbolToken('-', 7), new NumberToken("13", 8),
                new CloseBracketToken(Bracket.Parenthesis, 10)],
            new BinaryOperator("%", new PrefixOperator("-", new Number(12.6)),
                new Parentheses(new PrefixOperator("-", new Number(13)))), new Number(0.4),
            new BinaryOperator("%", new Number(-12.6), new Parentheses(new PrefixOperator("-", new Number(13)))),
            new BinaryOperator("%", new Number(-12.6), new Parentheses(new Number(-13))),
            new BinaryOperator("%", new Number(-12.6), new Number(-13))),
        new TestCase("13%(-12.6)", [new NumberToken("13", 0), new SymbolToken('%', 2), new OpenBracketToken(Bracket.Parenthesis, 3),
                new SymbolToken('-', 4), new NumberToken("12.6", 5), new CloseBracketToken(Bracket.Parenthesis, 9)],
            new BinaryOperator("%", new Number(13),
                new Parentheses(new PrefixOperator("-", new Number(12.6)))),
            new Number(0.4), new BinaryOperator("%", new Number(13), new Parentheses(new Number(-12.6))),
            new BinaryOperator("%", new Number(13), new Number(-12.6))),
        new TestCase("12.6%(-12.6)", [new NumberToken("12.6", 0), new SymbolToken('%', 4), new OpenBracketToken(Bracket.Parenthesis, 5),
                new SymbolToken('-', 6), new NumberToken("12.6", 7), new CloseBracketToken(Bracket.Parenthesis, 11)],
            new BinaryOperator("%", new Number(12.6),
                new Parentheses(new PrefixOperator("-", new Number(12.6)))),
            new Number(0), new BinaryOperator("%", new Number(12.6), new Parentheses(new Number(-12.6))),
            new BinaryOperator("%", new Number(12.6), new Number(-12.6))),
        new TestCase("13.5%(-12.6)", [new NumberToken("13.5", 0), new SymbolToken('%', 4), new OpenBracketToken(Bracket.Parenthesis, 5),
                new SymbolToken('-', 6), new NumberToken("12.6", 7), new CloseBracketToken(Bracket.Parenthesis, 11)],
            new BinaryOperator("%", new Number(13.5),
                new Parentheses(new PrefixOperator("-", new Number(12.6)))),
            new Number(0.9), new BinaryOperator("%", new Number(13.5), new Parentheses(new Number(-12.6))),
            new BinaryOperator("%", new Number(13.5), new Number(-12.6))),
        new TestCase("13%%12.6", [new NumberToken("13", 0), new SymbolToken('%', 2), new SymbolToken('%', 3), new NumberToken("12.6", 4)],
            new BinaryOperator("%%", new Number(13), new Number(12.6)), new Number(0.4)),
        new TestCase("12.6%%13", [new NumberToken("12.6", 0), new SymbolToken('%', 4), new SymbolToken('%', 5), new NumberToken("13", 6)],
            new BinaryOperator("%%", new Number(12.6), new Number(13)), new Number(12.6)),
        new TestCase("13.5%%13", [new NumberToken("13.5", 0), new SymbolToken('%', 4), new SymbolToken('%', 5), new NumberToken("13", 6)],
            new BinaryOperator("%%", new Number(13.5), new Number(13)), new Number(0.5)),
        new TestCase("-13%%13", [new SymbolToken('-', 0), new NumberToken("13", 1), new SymbolToken('%', 3), new SymbolToken('%', 4),
                new NumberToken("13", 5)],
            new BinaryOperator("%%", new PrefixOperator("-", new Number(13)), new Number(13)),
            new Number(0), new BinaryOperator("%%", new Number(-13), new Number(13))),
        new TestCase("-12.6%%13", [new SymbolToken('-', 0), new NumberToken("12.6", 1), new SymbolToken('%', 5), new SymbolToken('%', 6),
                new NumberToken("13", 7)],
            new BinaryOperator("%%", new PrefixOperator("-", new Number(12.6)),
            new Number(13)), new Number(-12.6), new BinaryOperator("%%", new Number(-12.6), new Number(13))),
        new TestCase("-13.5%%13", [new SymbolToken('-', 0), new NumberToken("13.5", 1), new SymbolToken('%', 5), new SymbolToken('%', 6),
                new NumberToken("13", 7)],
            new BinaryOperator("%%", new PrefixOperator("-", new Number(13.5)),
            new Number(13)), new Number(-0.5), new BinaryOperator("%%", new Number(-13.5), new Number(13))),
        new TestCase("13%%12.6", [new NumberToken("13", 0), new SymbolToken('%', 2), new SymbolToken('%', 3), new NumberToken("12.6", 4)],
            new BinaryOperator("%%", new Number(13), new Number(12.6)), new Number(0.4)),
        new TestCase("12.6%%12.6", [new NumberToken("12.6", 0), new SymbolToken('%', 4), new SymbolToken('%', 5), new NumberToken("12.6", 6)],
            new BinaryOperator("%%", new Number(12.6), new Number(12.6)), new Number(0)),
        new TestCase("13.5%%12.6", [new NumberToken("13.5", 0), new SymbolToken('%', 4), new SymbolToken('%', 5), new NumberToken("12.6", 6)],
            new BinaryOperator("%%", new Number(13.5), new Number(12.6)), new Number(0.9)),
        new TestCase("-13%%12.6", [new SymbolToken('-', 0), new NumberToken("13", 1), new SymbolToken('%', 3), new SymbolToken('%', 4),
                new NumberToken("12.6", 5)],
            new BinaryOperator("%%", new PrefixOperator("-", new Number(13)),
            new Number(12.6)), new Number(-0.4), new BinaryOperator("%%", new Number(-13), new Number(12.6))),
        new TestCase("-12.6%%12.6", [new SymbolToken('-', 0), new NumberToken("12.6", 1), new SymbolToken('%', 5), new SymbolToken('%', 6),
                new NumberToken("12.6", 7)],
            new BinaryOperator("%%", new PrefixOperator("-", new Number(12.6)),
            new Number(12.6)), new Number(0), new BinaryOperator("%%", new Number(-12.6), new Number(12.6))),
        new TestCase("-13.5%%12.6", [new SymbolToken('-', 0), new NumberToken("13.5", 1), new SymbolToken('%', 5), new SymbolToken('%', 6),
                new NumberToken("12.6", 7)],
            new BinaryOperator("%%", new PrefixOperator("-", new Number(13.5)),
            new Number(12.6)), new Number(-0.9), new BinaryOperator("%%", new Number(-13.5), new Number(12.6))),
        new TestCase("13%%13.5", [new NumberToken("13", 0), new SymbolToken('%', 2), new SymbolToken('%', 3), new NumberToken("13.5", 4)],
            new BinaryOperator("%%", new Number(13), new Number(13.5)), new Number(13)),
        new TestCase("12.6%%13.5", [new NumberToken("12.6", 0), new SymbolToken('%', 4), new SymbolToken('%', 5), new NumberToken("13.5", 6)],
            new BinaryOperator("%%", new Number(12.6), new Number(13.5)), new Number(12.6)),
        new TestCase("13.5%%13.5", [new NumberToken("13.5", 0), new SymbolToken('%', 4), new SymbolToken('%', 5), new NumberToken("13.5", 6)],
            new BinaryOperator("%%", new Number(13.5), new Number(13.5)), new Number(0)),
        new TestCase("-13%%13.5", [new SymbolToken('-', 0), new NumberToken("13", 1), new SymbolToken('%', 3), new SymbolToken('%', 4),
                new NumberToken("13.5", 5)],
            new BinaryOperator("%%", new PrefixOperator("-", new Number(13)),
            new Number(13.5)), new Number(-13), new BinaryOperator("%%", new Number(-13), new Number(13.5))),
        new TestCase("-12.6%%13.5", [new SymbolToken('-', 0), new NumberToken("12.6", 1), new SymbolToken('%', 5), new SymbolToken('%', 6),
                new NumberToken("13.5", 7)],
            new BinaryOperator("%%", new PrefixOperator("-", new Number(12.6)),
            new Number(13.5)), new Number(-12.6), new BinaryOperator("%%", new Number(-12.6), new Number(13.5))),
        new TestCase("-13.5%%13.5", [new SymbolToken('-', 0), new NumberToken("13.5", 1), new SymbolToken('%', 5), new SymbolToken('%', 6),
                new NumberToken("13.5", 7)],
            new BinaryOperator("%%", new PrefixOperator("-", new Number(13.5)),
            new Number(13.5)), new Number(0), new BinaryOperator("%%", new Number(-13.5), new Number(13.5))),
        new TestCase("13%%(-13)", [new NumberToken("13", 0), new SymbolToken('%', 2), new SymbolToken('%', 3),
                new OpenBracketToken(Bracket.Parenthesis, 4), new SymbolToken('-', 5), new NumberToken("13", 6),
                new CloseBracketToken(Bracket.Parenthesis, 8)],
            new BinaryOperator("%%", new Number(13),
                new Parentheses(new PrefixOperator("-", new Number(13)))),
            new Number(0), new BinaryOperator("%%", new Number(13), new Parentheses(new Number(-13))),
            new BinaryOperator("%%", new Number(13), new Number(-13))),
        new TestCase("12.6%%(-13)", [new NumberToken("12.6", 0), new SymbolToken('%', 4), new SymbolToken('%', 5),
                new OpenBracketToken(Bracket.Parenthesis, 6), new SymbolToken('-', 7), new NumberToken("13", 8),
                new CloseBracketToken(Bracket.Parenthesis, 10)],
            new BinaryOperator("%%", new Number(12.6),
                new Parentheses(new PrefixOperator("-", new Number(13)))),
            new Number(12.6), new BinaryOperator("%%", new Number(12.6), new Parentheses(new Number(-13))),
                new BinaryOperator("%%", new Number(12.6), new Number(-13))),
        new TestCase("-13%%(-13)", [new SymbolToken('-', 0), new NumberToken("13", 1), new SymbolToken('%', 3), new SymbolToken('%', 4),
                new OpenBracketToken(Bracket.Parenthesis, 5), new SymbolToken('-', 6), new NumberToken("13", 7),
                new CloseBracketToken(Bracket.Parenthesis, 9)],
            new BinaryOperator("%%", new PrefixOperator("-", new Number(13)),
                new Parentheses(new PrefixOperator("-", new Number(13)))),
            new Number(0), new BinaryOperator("%%", new Number(-13),
                new Parentheses(new PrefixOperator("-", new Number(13)))),
            new BinaryOperator("%%", new Number(-13), new Parentheses(new Number(-13))),
            new BinaryOperator("%%", new Number(-13), new Number(-13))),
        new TestCase("-12.6%%(-13)", [new SymbolToken('-', 0), new NumberToken("12.6", 1), new SymbolToken('%', 5), new SymbolToken('%', 6),
                new OpenBracketToken(Bracket.Parenthesis, 7), new SymbolToken('-', 8), new NumberToken("13", 9),
                new CloseBracketToken(Bracket.Parenthesis, 11)],
            new BinaryOperator("%%", new PrefixOperator("-", new Number(12.6)),
                new Parentheses(new PrefixOperator("-", new Number(13)))),
            new Number(-12.6), new BinaryOperator("%%", new Number(-12.6),
                new Parentheses(new PrefixOperator("-", new Number(13)))),
            new BinaryOperator("%%", new Number(-12.6), new Parentheses(new Number(-13))),
            new BinaryOperator("%%", new Number(-12.6), new Number(-13))),
        new TestCase("13%%(-12.6)", [new NumberToken("13", 0), new SymbolToken('%', 2), new SymbolToken('%', 3),
                new OpenBracketToken(Bracket.Parenthesis, 4), new SymbolToken('-', 5), new NumberToken("12.6", 6),
                new CloseBracketToken(Bracket.Parenthesis, 10)],
            new BinaryOperator("%%", new Number(13),
                new Parentheses(new PrefixOperator("-", new Number(12.6)))),
            new Number(0.4), new BinaryOperator("%%", new Number(13), new Parentheses(new Number(-12.6))),
            new BinaryOperator("%%", new Number(13), new Number(-12.6))),
        new TestCase("12.6%%(-12.6)", [new NumberToken("12.6", 0), new SymbolToken('%', 4), new SymbolToken('%', 5),
                new OpenBracketToken(Bracket.Parenthesis, 6), new SymbolToken('-', 7), new NumberToken("12.6", 8),
                new CloseBracketToken(Bracket.Parenthesis, 12)],
            new BinaryOperator("%%", new Number(12.6),
                new Parentheses(new PrefixOperator("-", new Number(12.6)))),
            new Number(0), new BinaryOperator("%%", new Number(12.6), new Parentheses(new Number(-12.6))),
            new BinaryOperator("%%", new Number(12.6), new Number(-12.6))),
        new TestCase("13.5%%(-12.6)", [new NumberToken("13.5", 0), new SymbolToken('%', 4), new SymbolToken('%', 5),
                new OpenBracketToken(Bracket.Parenthesis, 6), new SymbolToken('-', 7), new NumberToken("12.6", 8),
                new CloseBracketToken(Bracket.Parenthesis, 12)],
            new BinaryOperator("%%", new Number(13.5),
                new Parentheses(new PrefixOperator("-", new Number(12.6)))),
            new Number(0.9), new BinaryOperator("%%", new Number(13.5), new Parentheses(new Number(-12.6))),
            new BinaryOperator("%%", new Number(13.5), new Number(-12.6))),
        new TestCase("-13%%(-12.6)", [new SymbolToken('-', 0), new NumberToken("13", 1), new SymbolToken('%', 3), new SymbolToken('%', 4),
                new OpenBracketToken(Bracket.Parenthesis, 5), new SymbolToken('-', 6), new NumberToken("12.6", 7),
                new CloseBracketToken(Bracket.Parenthesis, 11)],
            new BinaryOperator("%%", new PrefixOperator("-", new Number(13)),
                new Parentheses(new PrefixOperator("-", new Number(12.6)))),
            new Number(-0.4), new BinaryOperator("%%", new Number(-13),
                new Parentheses(new PrefixOperator("-", new Number(12.6)))),
            new BinaryOperator("%%", new Number(-13), new Parentheses(new Number(-12.6))),
            new BinaryOperator("%%", new Number(-13), new Number(-12.6))),
        new TestCase("-12.6%%(-12.6)", [new SymbolToken('-', 0), new NumberToken("12.6", 1), new SymbolToken('%', 5), new SymbolToken('%', 6),
                new OpenBracketToken(Bracket.Parenthesis, 7), new SymbolToken('-', 8), new NumberToken("12.6", 9),
                new CloseBracketToken(Bracket.Parenthesis, 13)],
            new BinaryOperator("%%", new PrefixOperator("-", new Number(12.6)),
                new Parentheses(new PrefixOperator("-", new Number(12.6)))),
            new Number(0), new BinaryOperator("%%", new Number(-12.6),
                new Parentheses(new PrefixOperator("-", new Number(12.6)))),
            new BinaryOperator("%%", new Number(-12.6), new Parentheses(new Number(-12.6))),
            new BinaryOperator("%%", new Number(-12.6), new Number(-12.6))),
        new TestCase("-13.5%%(-12.6)", [new SymbolToken('-', 0), new NumberToken("13.5", 1), new SymbolToken('%', 4), new SymbolToken('%', 5),
                new OpenBracketToken(Bracket.Parenthesis, 6), new SymbolToken('-', 7), new NumberToken("12.6", 8),
                new CloseBracketToken(Bracket.Parenthesis, 12)],
            new BinaryOperator("%%", new PrefixOperator("-", new Number(13.5)),
                new Parentheses(new PrefixOperator("-", new Number(12.6)))),
            new Number(-0.9), new BinaryOperator("%%", new Number(-13.5),
                new Parentheses(new PrefixOperator("-", new Number(12.6)))),
            new BinaryOperator("%%", new Number(-13.5), new Parentheses(new Number(-12.6))),
            new BinaryOperator("%%", new Number(-13.5), new Number(-12.6))),
        new TestCase("13%%(-13.5)", [new NumberToken("13", 0), new SymbolToken('%', 2), new SymbolToken('%', 3),
                new OpenBracketToken(Bracket.Parenthesis, 4), new SymbolToken('-', 5), new NumberToken("13.5", 6),
                new CloseBracketToken(Bracket.Parenthesis, 10)],
            new BinaryOperator("%%", new Number(13),
                new Parentheses(new PrefixOperator("-", new Number(13.5)))),
            new Number(13), new BinaryOperator("%%", new Number(13), new Parentheses(new Number(-13.5))),
            new BinaryOperator("%%", new Number(13), new Number(-13.5))),
        new TestCase("12.6%%(-13.5)", [new NumberToken("12.6", 0), new SymbolToken('%', 4), new SymbolToken('%', 5),
                new OpenBracketToken(Bracket.Parenthesis, 6), new SymbolToken('-', 7), new NumberToken("13.5", 8),
                new CloseBracketToken(Bracket.Parenthesis, 12)],
            new BinaryOperator("%%", new Number(12.6),
                new Parentheses(new PrefixOperator("-", new Number(13.5)))),
            new Number(12.6), new BinaryOperator("%%", new Number(12.6), new Parentheses(new Number(-13.5))),
            new BinaryOperator("%%", new Number(12.6), new Number(-13.5))),
        new TestCase("13.5%%(-13.5)", [new NumberToken("13.5", 0), new SymbolToken('%', 4), new SymbolToken('%', 5),
                new OpenBracketToken(Bracket.Parenthesis, 6), new SymbolToken('-', 7), new NumberToken("13.5", 8),
                new CloseBracketToken(Bracket.Parenthesis, 12)],
            new BinaryOperator("%%", new Number(13.5),
                new Parentheses(new PrefixOperator("-", new Number(13.5)))),
            new Number(0), new BinaryOperator("%%", new Number(13.5), new Parentheses(new Number(-13.5))),
            new BinaryOperator("%%", new Number(13.5), new Number(-13.5))),
        new TestCase("-13%%(-13.5)", [new SymbolToken('-', 0), new NumberToken("13", 1), new SymbolToken('%', 3), new SymbolToken('%', 4),
                new OpenBracketToken(Bracket.Parenthesis, 5), new SymbolToken('-', 6), new NumberToken("13.5", 7),
                new CloseBracketToken(Bracket.Parenthesis, 11)],
            new BinaryOperator("%%", new PrefixOperator("-", new Number(13)),
                new Parentheses(new PrefixOperator("-", new Number(13.5)))),
            new Number(-13), new BinaryOperator("%%", new Number(-13),
                new Parentheses(new PrefixOperator("-", new Number(13.5)))),
            new BinaryOperator("%%", new Number(-13), new Parentheses(new Number(-13.5))),
            new BinaryOperator("%%", new Number(-13), new Number(-13.5))),
        new TestCase("-12.6%%(-13.5)", [new SymbolToken('-', 0), new NumberToken("12.6", 1), new SymbolToken('%', 5), new SymbolToken('%', 6),
                new OpenBracketToken(Bracket.Parenthesis, 7), new SymbolToken('-', 8), new NumberToken("13.5", 9),
                new CloseBracketToken(Bracket.Parenthesis, 13)],
            new BinaryOperator("%%", new PrefixOperator("-", new Number(12.6)),
                new Parentheses(new PrefixOperator("-", new Number(13.5)))),
            new Number(-12.6), new BinaryOperator("%%", new Number(-12.6),
                new Parentheses(new PrefixOperator("-", new Number(13.5)))),
            new BinaryOperator("%%", new Number(-12.6), new Parentheses(new Number(-13.5))),
            new BinaryOperator("%%", new Number(-12.6), new Number(-13.5))),
        new TestCase("-13.5%%(-13.5)", [new SymbolToken('-', 0), new NumberToken("13.5", 1), new SymbolToken('%', 5), new SymbolToken('%', 6),
                new OpenBracketToken(Bracket.Parenthesis, 7), new SymbolToken('-', 8), new NumberToken("13.5", 9),
                new CloseBracketToken(Bracket.Parenthesis, 13)],
            new BinaryOperator("%%", new PrefixOperator("-", new Number(13.5)),
                new Parentheses(new PrefixOperator("-", new Number(13.5)))),
            new Number(0), new BinaryOperator("%%", new Number(-13.5), new Parentheses(new PrefixOperator("-",
                new Number(13.5)))), new BinaryOperator("%%", new Number(-13.5), new Parentheses(new Number(-13.5))),
            new BinaryOperator("%%", new Number(-13.5), new Number(-13.5))),
        new TestCase("12.6//13", [new NumberToken("12.6", 0), new SymbolToken('/', 4), new SymbolToken('/', 5), new NumberToken("13", 6)],
            new BinaryOperator("//", new Number(12.6), new Number(13)), new Number(0)),
        new TestCase("13.5//13", [new NumberToken("13.5", 0), new SymbolToken('/', 4), new SymbolToken('/', 5), new NumberToken("13", 6)],
            new BinaryOperator("//", new Number(13.5), new Number(13)), new Number(1)),
        new TestCase("-13//13",
            [new SymbolToken('-', 0), new NumberToken("13", 1), new SymbolToken('/', 3), new SymbolToken('/', 4), new NumberToken("13", 5)],
            new BinaryOperator("//", new PrefixOperator("-", new Number(13)), new Number(13)), new Number(-1),
            new BinaryOperator("//", new Number(-13), new Number(13))),
        new TestCase("-12.6//13",
            [new SymbolToken('-', 0), new NumberToken("12.6", 1), new SymbolToken('/', 5), new SymbolToken('/', 6), new NumberToken("13", 7)],
            new BinaryOperator("//", new PrefixOperator("-", new Number(12.6)), new Number(13)), new Number(-1),
            new BinaryOperator("//", new Number(-12.6), new Number(13))),
        new TestCase("-13.5//13",
            [new SymbolToken('-', 0), new NumberToken("13.5", 1), new SymbolToken('/', 5), new SymbolToken('/', 6), new NumberToken("13", 7)],
            new BinaryOperator("//", new PrefixOperator("-", new Number(13.5)), new Number(13)), new Number(-2),
            new BinaryOperator("//", new Number(-13.5), new Number(13))),
        new TestCase("13//12.6", [new NumberToken("13", 0), new SymbolToken('/', 2), new SymbolToken('/', 3), new NumberToken("12.6", 4)],
            new BinaryOperator("//", new Number(13), new Number(12.6)), new Number(1)),
        new TestCase("13.5//12.6", [new NumberToken("13.5", 0), new SymbolToken('/', 4), new SymbolToken('/', 5), new NumberToken("12.6", 6)],
            new BinaryOperator("//", new Number(13.5), new Number(12.6)), new Number(1)),
        new TestCase("-13//12.6",
            [new SymbolToken('-', 0), new NumberToken("13", 1), new SymbolToken('/', 3), new SymbolToken('/', 4), new NumberToken("12.6", 5)],
            new BinaryOperator("//", new PrefixOperator("-", new Number(13)), new Number(12.6)), new Number(-2),
            new BinaryOperator("//", new Number(-13), new Number(12.6))),
        new TestCase("-13.5//12.6",
            [new SymbolToken('-', 0), new NumberToken("13.5", 1), new SymbolToken('/', 5), new SymbolToken('/', 6), new NumberToken("12.6", 7)],
            new BinaryOperator("//", new PrefixOperator("-", new Number(13.5)), new Number(12.6)), new Number(-2),
            new BinaryOperator("//", new Number(-13.5), new Number(12.6))),
        new TestCase("13//13.5", [new NumberToken("13", 0), new SymbolToken('/', 2), new SymbolToken('/', 3), new NumberToken("13.5", 4)],
            new BinaryOperator("//", new Number(13), new Number(13.5)), new Number(0)),
        new TestCase("12.6//13.5", [new NumberToken("12.6", 0), new SymbolToken('/', 4), new SymbolToken('/', 5), new NumberToken("13.5", 6)],
            new BinaryOperator("//", new Number(12.6), new Number(13.5)), new Number(0)),
        new TestCase("-13//13.5",
            [new SymbolToken('-', 0), new NumberToken("13", 1), new SymbolToken('/', 3), new SymbolToken('/', 4), new NumberToken("13.5", 5)],
            new BinaryOperator("//", new PrefixOperator("-", new Number(13)), new Number(13.5)), new Number(-1),
            new BinaryOperator("//", new Number(-13), new Number(13.5))),
        new TestCase("-12.6//13.5",
            [new SymbolToken('-', 0), new NumberToken("12.6", 1), new SymbolToken('/', 5), new SymbolToken('/', 6), new NumberToken("13.5", 7)],
            new BinaryOperator("//", new PrefixOperator("-", new Number(12.6)), new Number(13.5)), new Number(-1),
            new BinaryOperator("//", new Number(-12.6), new Number(13.5))),
        new TestCase("-13.5//13.5",
            [new SymbolToken('-', 0), new NumberToken("13.5", 1), new SymbolToken('/', 5), new SymbolToken('/', 6), new NumberToken("13.5", 7)],
            new BinaryOperator("//", new PrefixOperator("-", new Number(13.5)), new Number(13.5)), new Number(-1),
            new BinaryOperator("//", new Number(-13.5), new Number(13.5))),
        new TestCase("13//(-13)",
            [new NumberToken("13", 0), new SymbolToken('/', 2), new SymbolToken('/', 3), new OpenBracketToken(Bracket.Parenthesis, 4),
                new SymbolToken('-', 5), new NumberToken("13", 6), new CloseBracketToken(Bracket.Parenthesis, 8)],
            new BinaryOperator("//", new Number(13), new Parentheses(new PrefixOperator("-", new Number(13)))), new Number(-1),
            new BinaryOperator("//", new Number(13), new Parentheses(new Number(-13))), new BinaryOperator("//", new Number(13), new Number(-13))),
        new TestCase("12.6//-13",
            [new NumberToken("12.6", 0), new SymbolToken('/', 4), new SymbolToken('/', 5), new SymbolToken('-', 6), new NumberToken("13", 7)],
            new BinaryOperator("//", new Number(12.6), new PrefixOperator("-", new Number(13))), new Number(0),
            new BinaryOperator("//", new Number(12.6), new Number(-13))),
        new TestCase("-13//-13",
            [new SymbolToken('-', 0), new NumberToken("13", 1), new SymbolToken('/', 3), new SymbolToken('/', 4), new SymbolToken('-', 5),
                new NumberToken("13", 6)],
            new BinaryOperator("//", new PrefixOperator("-", new Number(13)), new PrefixOperator("-", new Number(13))), new Number(1),
            new BinaryOperator("//", new Number(-13), new PrefixOperator("-", new Number(13))),
            new BinaryOperator("//", new Number(-13), new Number(-13))),
        new TestCase("-12.6//-13",
            [new SymbolToken('-', 0), new NumberToken("12.6", 1), new SymbolToken('/', 5), new SymbolToken('/', 6), new SymbolToken('-', 7),
                new NumberToken("13", 8)],
            new BinaryOperator("//", new PrefixOperator("-", new Number(12.6)), new PrefixOperator("-", new Number(13))), new Number(1),
            new BinaryOperator("//", new Number(-12.6), new PrefixOperator("-", new Number(13))),
            new BinaryOperator("//", new Number(-12.6), new Number(-13))),
        new TestCase("13//-12.6",
            [new NumberToken("13", 0), new SymbolToken('/', 2), new SymbolToken('/', 3), new SymbolToken('-', 4), new NumberToken("12.6", 5)],
            new BinaryOperator("//", new Number(13), new PrefixOperator("-", new Number(12.6))), new Number(-1),
            new BinaryOperator("//", new Number(13), new Number(-12.6))),
        new TestCase("-13//-12.6",
            [new SymbolToken('-', 0), new NumberToken("13", 1), new SymbolToken('/', 3), new SymbolToken('/', 4), new SymbolToken('-', 5),
                new NumberToken("12.6", 6)],
            new BinaryOperator("//", new PrefixOperator("-", new Number(13)), new PrefixOperator("-", new Number(12.6))), new Number(2),
            new BinaryOperator("//", new Number(-13), new PrefixOperator("-", new Number(12.6))),
            new BinaryOperator("//", new Number(-13), new Number(-12.6))),
        new TestCase("-13.5//-12.6",
            [new SymbolToken('-', 0), new NumberToken("13.5", 1), new SymbolToken('/', 5), new SymbolToken('/', 6), new SymbolToken('-', 7),
                new NumberToken("12.6", 8)],
            new BinaryOperator("//", new PrefixOperator("-", new Number(13.5)), new PrefixOperator("-", new Number(12.6))), new Number(2),
            new BinaryOperator("//", new Number(-13.5), new PrefixOperator("-", new Number(12.6))),
            new BinaryOperator("//", new Number(-13.5), new Number(-12.6))),
        new TestCase("13//-13.5",
            [new NumberToken("13", 0), new SymbolToken('/', 2), new SymbolToken('/', 3), new SymbolToken('-', 4), new NumberToken("13.5", 5)],
            new BinaryOperator("//", new Number(13), new PrefixOperator("-", new Number(13.5))), new Number(0),
            new BinaryOperator("//", new Number(13), new Number(-13.5))),
        new TestCase("12.6//-13.5",
            [new NumberToken("12.6", 0), new SymbolToken('/', 4), new SymbolToken('/', 5), new SymbolToken('-', 6), new NumberToken("13.5", 7)],
            new BinaryOperator("//", new Number(12.6), new PrefixOperator("-", new Number(13.5))), new Number(0),
            new BinaryOperator("//", new Number(12.6), new Number(-13.5))),
        new TestCase("-13//-13.5",
            [new SymbolToken('-', 0), new NumberToken("13", 1), new SymbolToken('/', 3), new SymbolToken('/', 4), new SymbolToken('-', 5),
                new NumberToken("13.5", 6)],
            new BinaryOperator("//", new PrefixOperator("-", new Number(13)), new PrefixOperator("-", new Number(13.5))), new Number(1),
            new BinaryOperator("//", new Number(-13), new PrefixOperator("-", new Number(13.5))),
            new BinaryOperator("//", new Number(-13), new Number(-13.5))),
        new TestCase("-12.6//-13.5",
            [new SymbolToken('-', 0), new NumberToken("12.6", 1), new SymbolToken('/', 5), new SymbolToken('/', 6), new SymbolToken('-', 7),
                new NumberToken("13.5", 8)],
            new BinaryOperator("//", new PrefixOperator("-", new Number(12.6)), new PrefixOperator("-", new Number(13.5))), new Number(1),
            new BinaryOperator("//", new Number(-12.6), new PrefixOperator("-", new Number(13.5))),
            new BinaryOperator("//", new Number(-12.6), new Number(-13.5))),
        new TestCase(" 1&&2", [new NumberToken("1", 1), new SymbolToken('&', 2), new SymbolToken('&', 3), new NumberToken("2", 4)],
            new BinaryOperator("&&", new Number(1), new Number(2)), Logical.TRUE),
        new TestCase(" 1&&0", [new NumberToken("1", 1), new SymbolToken('&', 2), new SymbolToken('&', 3), new NumberToken("0", 4)],
            new BinaryOperator("&&", new Number(1), new Number(0)), Logical.FALSE),
        new TestCase(" 0∧1", [new NumberToken("0", 1), new SymbolToken('∧', 2), new NumberToken("1", 3)],
            new BinaryOperator("∧", new Number(0), new Number(1)), Logical.FALSE),
        new TestCase(" 0∧0", [new NumberToken("0", 1), new SymbolToken('∧', 2), new NumberToken("0", 3)],
            new BinaryOperator("∧", new Number(0), new Number(0)), Logical.FALSE),
        new TestCase(" 1||2", [new NumberToken("1", 1), new SymbolToken('|', 2), new SymbolToken('|', 3), new NumberToken("2", 4)],
            new BinaryOperator("||", new Number(1), new Number(2)), Logical.TRUE),
        new TestCase(" 0||2", [new NumberToken("0", 1), new SymbolToken('|', 2), new SymbolToken('|', 3), new NumberToken("2", 4)],
            new BinaryOperator("||", new Number(0), new Number(2)), Logical.TRUE),
        new TestCase(" 1 ∨0", [new NumberToken("1", 1), new SymbolToken('∨', 3), new NumberToken("0", 4)],
            new BinaryOperator("∨", new Number(1), new Number(0)), Logical.TRUE),
        new TestCase(" 0 ∨0", [new NumberToken("0", 1), new SymbolToken('∨', 3), new NumberToken("0", 4)],
            new BinaryOperator("∨", new Number(0), new Number(0)), Logical.FALSE),
        new TestCase(" 1 ⊕5", [new NumberToken("1", 1), new SymbolToken('⊕', 3), new NumberToken("5", 4)],
            new BinaryOperator("⊕", new Number(1), new Number(5)), Logical.FALSE),
        new TestCase(" 4 ⊕0", [new NumberToken("4", 1), new SymbolToken('⊕', 3), new NumberToken("0", 4)],
            new BinaryOperator("⊕", new Number(4), new Number(0)), Logical.TRUE),
        new TestCase(" 0 ⊕2", [new NumberToken("0", 1), new SymbolToken('⊕', 3), new NumberToken("2", 4)],
            new BinaryOperator("⊕", new Number(0), new Number(2)), Logical.TRUE),
        new TestCase(" 0 ⊕0", [new NumberToken("0", 1), new SymbolToken('⊕', 3), new NumberToken("0", 4)],
            new BinaryOperator("⊕", new Number(0), new Number(0)), Logical.FALSE),
        new TestCase(" 1 ==2", [new NumberToken("1", 1), new SymbolToken('=', 3), new SymbolToken('=', 4), new NumberToken("2", 5)],
            new BinaryOperator("==", new Number(1), new Number(2)), Logical.FALSE),
        new TestCase(" pi ==π", [new WordToken("pi", 1), new SymbolToken('=', 2), new SymbolToken('=', 3), new WordToken("π", 4)],
            new BinaryOperator("==", new Constant("pi"), new Constant("π")), Logical.TRUE,
            new BinaryOperator("==", new Number(Math.PI), new Constant("π")),
            new BinaryOperator("==", new Number(Math.PI), new Number(Math.PI))),
        new TestCase(" 1 !=2", [new NumberToken("1", 1), new SymbolToken('!', 3), new SymbolToken('=', 4), new NumberToken("2", 5)],
            new BinaryOperator("!=", new Number(1), new Number(2)), Logical.TRUE),
        new TestCase(" infinity ≠inf", [new WordToken("infinity", 1), new SymbolToken('≠', 9), new WordToken("inf", 10)],
            new BinaryOperator("≠", new Infinity("infinity"), new Infinity("inf")), Logical.FALSE),
        new TestCase(" 2 <>2", [new NumberToken("2", 1), new SymbolToken('<', 3), new SymbolToken('>', 4),
                new NumberToken("2", 5)],
            new BinaryOperator("<>", new Number(2), new Number(2)), Logical.FALSE),
        new TestCase(" 1 <2", [new NumberToken("1", 1), new SymbolToken('<', 3), new NumberToken("2", 4)],
            new BinaryOperator("<", new Number(1), new Number(2)), Logical.TRUE),
        new TestCase(" 1>2", [new NumberToken("1", 1), new SymbolToken('>', 2), new NumberToken("2", 3)],
            new BinaryOperator(">", new Number(1), new Number(2)), Logical.FALSE),
        new TestCase(" 1 <=2", [new NumberToken("1", 1), new SymbolToken('<', 3), new SymbolToken('=', 4), new NumberToken("2", 5)],
            new BinaryOperator("<=", new Number(1), new Number(2)), Logical.TRUE),
        new TestCase(" 1 ≤1", [new NumberToken("1", 1), new SymbolToken('≤', 3), new NumberToken("1", 4)],
            new BinaryOperator("≤", new Number(1), new Number(1)), Logical.TRUE),
        new TestCase(" 1 >=2", [new NumberToken("1", 1), new SymbolToken('>', 3), new SymbolToken('=', 4), new NumberToken("2", 5)],
            new BinaryOperator(">=", new Number(1), new Number(2)), Logical.FALSE),
        new TestCase(" 2 ≥2", [new NumberToken("2", 1), new SymbolToken('≥', 3), new NumberToken("2", 4)],
            new BinaryOperator("≥", new Number(2), new Number(2)), Logical.TRUE),
        new TestCase(" 1+2-3*4  /5^7&&8||9⊕10==11",
            [new NumberToken("1", 1), new SymbolToken('+', 2), new NumberToken("2", 3), new SymbolToken('-', 4), new NumberToken("3", 5),
                new SymbolToken('*', 6), new NumberToken("4", 7), new SymbolToken('/', 10), new NumberToken("5", 11), new SymbolToken('^', 12),
                new NumberToken("7", 13), new SymbolToken('&', 14), new SymbolToken('&', 15), new NumberToken("8", 16), new SymbolToken('|', 17),
                new SymbolToken('|', 18), new NumberToken("9", 19), new SymbolToken('⊕', 20), new NumberToken("10", 21), new SymbolToken('=', 23),
                new SymbolToken('=', 24), new NumberToken("11", 25)],
            new BinaryOperator("||", new BinaryOperator("&&",
            new BinaryOperator("-", new BinaryOperator("+", new Number(1), new Number(2)), new BinaryOperator("/",
                new BinaryOperator("*", new Number(3), new Number(4)), new BinaryOperator("^", new Number(5),
                    new Number(7)))), new Number(8)), new BinaryOperator("⊕", new Number(9), new BinaryOperator("==",
                new Number(10), new Number(11)))),
            Logical.TRUE, new BinaryOperator("||", new BinaryOperator("&&", new BinaryOperator("-", new Number(3),
                new BinaryOperator("/", new BinaryOperator("*", new Number(3), new Number(4)), new BinaryOperator("^",
                    new Number(5), new Number(7)))), new Number(8)),
                new BinaryOperator("⊕", new Number(9), new BinaryOperator("==", new Number(10), new Number(11)))),
            new BinaryOperator("||", new BinaryOperator("&&", new BinaryOperator("-", new Number(3),
                    new BinaryOperator("/", new Number(12), new BinaryOperator("^", new Number(5), new Number(7)))),
                new Number(8)), new BinaryOperator("⊕", new Number(9), new BinaryOperator("==", new Number(10),
                    new Number(11)))),
            new BinaryOperator("||", new BinaryOperator("&&", new BinaryOperator("-", new Number(3),
                new BinaryOperator("/", new Number(12), new Number(78125))), new Number(8)), new BinaryOperator("⊕",
                    new Number(9), new BinaryOperator("==", new Number(10), new Number(11)))),
            new BinaryOperator("||", new BinaryOperator("&&", new BinaryOperator("-", new Number(3),
                    new Number((double)12 / 78125)), new Number(8)), new BinaryOperator("⊕", new Number(9),
                new BinaryOperator("==", new Number(10), new Number(11)))),
            new BinaryOperator("||", new BinaryOperator("&&", new Number(3 - ((double)12 / 78125)), new Number(8)),
                new BinaryOperator("⊕", new Number(9), new BinaryOperator("==", new Number(10), new Number(11)))),
            new BinaryOperator("||", Logical.TRUE, new BinaryOperator("⊕", new Number(9), new BinaryOperator("==",
                new Number(10), new Number(11)))),
            new BinaryOperator("||", Logical.TRUE, new BinaryOperator("⊕", new Number(9), Logical.FALSE)),
            new BinaryOperator("||", Logical.TRUE, Logical.TRUE)),
        new TestCase("+1+-2.0",
            [new SymbolToken('+', 0), new NumberToken("1", 1), new SymbolToken('+', 2), new SymbolToken('-', 3), new NumberToken("2.0", 4)],
            new BinaryOperator("+", new PrefixOperator("+", new Number(1)),
                new PrefixOperator("-", new Number(2))),
            new Number(-1), new BinaryOperator("+", new Number(1), new PrefixOperator("-", new Number(2))),
            new BinaryOperator("+", new Number(1), new Number(-2)), new Number(-1)),
        new TestCase("1.0!-2%",
            [new NumberToken("1.0", 0), new SymbolToken('!', 3), new SymbolToken('-', 4), new NumberToken("2", 5),new SymbolToken('%', 6)],
            new BinaryOperator("-", new PostfixOperator("!", new Number(1)),
                new PostfixOperator("%", new Number(2))),
            new Number(0.98), new BinaryOperator("-", new Number(1), new PostfixOperator("%", new Number(2))),
            new BinaryOperator("-", new Number(1), new Number(0.02)), new Number(0.98)),
        new TestCase("!¬2*-  +3",
            [new SymbolToken('!', 0), new SymbolToken('¬', 1), new NumberToken("2", 2), new SymbolToken('*', 3), new SymbolToken('-', 4),
                new SymbolToken('+', 7), new NumberToken("3", 8)],
            new BinaryOperator("*", new PrefixOperator("!", new PrefixOperator("¬",
                new Number(2))), new PrefixOperator("-", new PrefixOperator("+", new Number(3)))),
            new Number(-3), new BinaryOperator("*", new PrefixOperator("!", Logical.FALSE),
                new PrefixOperator("-", new PrefixOperator("+", new Number(3)))),
            new BinaryOperator("*", new Number(1), new PrefixOperator("-", new PrefixOperator("+",
                new Number(3)))), new BinaryOperator("*", new Number(1), new PrefixOperator("-", new Number(3))),
            new BinaryOperator("*", new Number(1), new Number(-3))),
        new TestCase("1%%/2!!",
            [new NumberToken("1", 0), new SymbolToken('%', 1), new SymbolToken('%', 2), new SymbolToken('/', 3), new NumberToken("2", 4),
                new SymbolToken('!', 5), new SymbolToken('!', 6)],
            new BinaryOperator("/", new PostfixOperator("%", new PostfixOperator("%",
                new Number(1))), new PostfixOperator("!!", new Number(2))),
            new Number(0.00005), new BinaryOperator("/", new PostfixOperator("%", new Number(0.01)),
                new PostfixOperator("!!", new Number(2))),
            new BinaryOperator("/", new Number(0.0001), new PostfixOperator("!!", new Number(2))),
            new BinaryOperator("/", new Number(0.0001), new Number(2)), new Number(0.00005)),
        new TestCase("-13!%(!12)%",
            [new SymbolToken('-', 0), new NumberToken("13", 1), new SymbolToken('!', 3), new SymbolToken('%', 4),
                new OpenBracketToken(Bracket.Parenthesis, 5), new SymbolToken('!', 6), new NumberToken("12", 7),
                new CloseBracketToken(Bracket.Parenthesis, 9), new SymbolToken('%', 10)],
            new BinaryOperator("%", new PrefixOperator("-", new PostfixOperator("!",
                new Number(13))), new PostfixOperator("%", new Parentheses(new PrefixOperator("!",
                    new Number(12))))), new Number(411680.94),
            new BinaryOperator("%", new PrefixOperator("-", new Number(6227020800)), new PostfixOperator("%",
                new Parentheses(new PrefixOperator("!", new Number(12))))),
            new BinaryOperator("%", new Number(-6227020800), new PostfixOperator("%", new Parentheses(
                new PrefixOperator("!", new Number(12))))),
            new BinaryOperator("%", new Number(-6227020800), new PostfixOperator("%", new Parentheses(
                new Number(176214841)))),
            new BinaryOperator("%", new Number(-6227020800), new PostfixOperator("%", new Number(176214841))),
            new BinaryOperator("%", new Number(-6227020800), new Number(1762148.41))),
        new TestCase("1+((2-τ)*(4 /-pi))^7&& abc_1||9⊕10==  11",
            [new NumberToken("1", 0), new SymbolToken('+', 1), new OpenBracketToken(Bracket.Parenthesis, 2),
                new OpenBracketToken(Bracket.Parenthesis, 3), new NumberToken("2", 4), new SymbolToken('-', 5), new WordToken("τ", 6),
                new CloseBracketToken(Bracket.Parenthesis, 7), new SymbolToken('*', 8), new OpenBracketToken(Bracket.Parenthesis, 9),
                new NumberToken("4", 10), new SymbolToken('/', 12), new SymbolToken('-', 13), new WordToken("pi", 14),
                new CloseBracketToken(Bracket.Parenthesis, 16), new CloseBracketToken(Bracket.Parenthesis, 17), new SymbolToken('^', 18),
                new NumberToken("7", 19), new SymbolToken('&', 20), new SymbolToken('&', 21), new WordToken("abc_1", 23), new SymbolToken('|', 28),
                new SymbolToken('|', 29), new NumberToken("9", 30), new SymbolToken('⊕', 31), new NumberToken("10", 32), new SymbolToken('=', 34),
                new SymbolToken('=', 35), new NumberToken("11", 37)],
            new BinaryOperator("||", new BinaryOperator("&&",
            new BinaryOperator("+", new Number(1), new BinaryOperator("^", new Parentheses(new BinaryOperator("*",
                new Parentheses(new BinaryOperator("-", new Number(2), new Constant("τ"))), new Parentheses(
                    new BinaryOperator("/", new Number(4), new PrefixOperator("-", new Constant("pi")))))),
                new Number(7))), new Variable("abc_1")), new BinaryOperator("⊕", new Number(9),
                    new BinaryOperator("==", new Number(10), new Number(11)))),
            Logical.TRUE, new BinaryOperator("||", new BinaryOperator("&&", new BinaryOperator("+", new Number(1),
                new BinaryOperator("^", new Parentheses(new BinaryOperator("*", new Parentheses(new BinaryOperator("-",
                    new Number(2), new Number(Math.Tau))), new Parentheses(new BinaryOperator("/", new Number(4),
                        new PrefixOperator("-", new Constant("pi")))))), new Number(7))), new Variable("abc_1")),
                new BinaryOperator("⊕", new Number(9), new BinaryOperator("==", new Number(10), new Number(11)))),
            new BinaryOperator("||", new BinaryOperator("&&", new BinaryOperator("+", new Number(1),
                    new BinaryOperator("^", new Parentheses(new BinaryOperator("*", new Parentheses(
                        new Number(2 - Math.Tau)), new Parentheses(new BinaryOperator("/", new Number(4),
                            new PrefixOperator("-", new Constant("pi")))))), new Number(7))),
                    new Variable("abc_1")),
                new BinaryOperator("⊕", new Number(9), new BinaryOperator("==", new Number(10), new Number(11)))),
            new BinaryOperator("||", new BinaryOperator("&&", new BinaryOperator("+", new Number(1),
                new BinaryOperator("^", new Parentheses(new BinaryOperator("*", new Number(2 - Math.Tau),
                    new Parentheses(new BinaryOperator("/", new Number(4), new PrefixOperator("-",
                        new Constant("pi")))))), new Number(7))), new Variable("abc_1")), new BinaryOperator("⊕",
                            new Number(9), new BinaryOperator("==", new Number(10), new Number(11)))),
            new BinaryOperator("||", new BinaryOperator("&&", new BinaryOperator("+", new Number(1),
                    new BinaryOperator("^", new Parentheses(new BinaryOperator("*", new Number(2 - Math.Tau),
                        new Parentheses(new BinaryOperator("/", new Number(4), new PrefixOperator("-",
                            new Number(Math.PI)))))), new Number(7))), new Variable("abc_1")),
                new BinaryOperator("⊕", new Number(9), new BinaryOperator("==", new Number(10), new Number(11)))),
            new BinaryOperator("||", new BinaryOperator("&&", new BinaryOperator("+", new Number(1),
                new BinaryOperator("^", new Parentheses(new BinaryOperator("*", new Number(2 - Math.Tau),
                    new Parentheses(new BinaryOperator("/", new Number(4), new Number(-Math.PI))))), new Number(7))),
                new Variable("abc_1")), new BinaryOperator("⊕", new Number(9), new BinaryOperator("==", new Number(10),
                    new Number(11)))),
            new BinaryOperator("||", new BinaryOperator("&&", new BinaryOperator("+", new Number(1),
                    new BinaryOperator("^", new Parentheses(new BinaryOperator("*", new Number(2 - Math.Tau),
                        new Parentheses(new Number(4 / -Math.PI)))), new Number(7))), new Variable("abc_1")),
                new BinaryOperator("⊕", new Number(9), new BinaryOperator("==", new Number(10), new Number(11)))),
            new BinaryOperator("||", new BinaryOperator("&&", new BinaryOperator("+", new Number(1),
                new BinaryOperator("^", new Parentheses(new BinaryOperator("*", new Number(2 - Math.Tau),
                    new Number(4 / -Math.PI))), new Number(7))), new Variable("abc_1")), new BinaryOperator("⊕",
                        new Number(9), new BinaryOperator("==", new Number(10), new Number(11)))),
            new BinaryOperator("||", new BinaryOperator("&&", new BinaryOperator("+", new Number(1),
                    new BinaryOperator("^", new Parentheses(new Number((8 - 4 * Math.Tau) / -Math.PI)), new Number(7))),
                new Variable("abc_1")), new BinaryOperator("⊕", new Number(9), new BinaryOperator("==", new Number(10),
                    new Number(11)))),
            new BinaryOperator("||", new BinaryOperator("&&", new BinaryOperator("+", new Number(1),
                    new BinaryOperator("^", new Number((8 - 4 * Math.Tau) / -Math.PI), new Number(7))),
                new Variable("abc_1")), new BinaryOperator("⊕", new Number(9), new BinaryOperator("==", new Number(10),
                    new Number(11)))),
            new BinaryOperator("||", new BinaryOperator("&&", new BinaryOperator("+", new Number(1),
                new Number(Math.Pow((8 - 4 * Math.Tau) / -Math.PI, 7))), new Variable("abc_1")), new BinaryOperator("⊕",
                    new Number(9), new BinaryOperator("==", new Number(10), new Number(11)))),
            new BinaryOperator("||", new BinaryOperator("&&",
                    new Number(1 + Math.Pow((8 - 4 * Math.Tau) / -Math.PI, 7)), new Variable("abc_1")),
                new BinaryOperator("⊕", new Number(9), new BinaryOperator("==", new Number(10), new Number(11)))),
            new BinaryOperator("||", new BinaryOperator("&&",
                new Number(1 + Math.Pow((8 - 4 * Math.Tau) / -Math.PI, 7)), new Number(1)), new BinaryOperator("⊕",
                    new Number(9), new BinaryOperator("==", new Number(10), new Number(11)))),
            new BinaryOperator("||", Logical.TRUE, new BinaryOperator("⊕", new Number(9), new BinaryOperator("==",
                new Number(10), new Number(11)))),
            new BinaryOperator("||", Logical.TRUE, new BinaryOperator("⊕", new Number(9), Logical.FALSE)),
            new BinaryOperator("||", Logical.TRUE, Logical.TRUE)),
        new TestCase("∞", [new SymbolToken('∞', 0)], new Infinity("∞")),
        new TestCase("inf", [new WordToken("inf", 0)], new Infinity("inf")),
        new TestCase("infinity ", [new WordToken("infinity", 0)], new Infinity("infinity")),
        new TestCase("-∞", [new SymbolToken('-', 0), new SymbolToken('∞', 1)],
            new PrefixOperator("-", new Infinity("∞")), new Infinity("∞", false)),
        new TestCase("-inf", [new SymbolToken('-', 0), new WordToken("inf", 1)],
            new PrefixOperator("-", new Infinity("inf")), new Infinity("inf", false)),
        new TestCase("-infinity ", [new SymbolToken('-', 0), new WordToken("infinity", 1)],
            new PrefixOperator("-", new Infinity("infinity")), new Infinity("infinity", false)),
        new TestCase("π", [new WordToken("π", 0)], new Constant("π"), new Number(Math.PI)),
        new TestCase("pi", [new WordToken("pi", 0)], new Constant("pi"), new Number(Math.PI)),
        new TestCase("τ", [new WordToken("τ", 0)], new Constant("τ"), new Number(Math.Tau)),
        new TestCase("tau", [new WordToken("tau", 0)], new Constant("tau"), new Number(Math.Tau)),
        new TestCase("e", [new WordToken("e", 0)], new Constant("e"), new Number(Math.E)),
        new TestCase("true", [new WordToken("true", 0)], new Logical(true)),
        new TestCase("false", [new WordToken("false", 0)], new Logical(false)),
        new TestCase("undefined", [new WordToken("undefined", 0)], Undefined.UNDEFINED),
        new TestCase("dne", [new WordToken("dne", 0)], Undefined.DNE),
        new TestCase("AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz ",
            [new WordToken("AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz", 0)],
            new Variable("AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"), new Number(2)),
        new TestCase("ΑαΒβΓγΔδΕεΖζΗηΘθΙιΚκΛλΜμΝνΞξΟοΠπΡρΣσςΤτΥυΦφΧχΨψΩω",
            [new WordToken("ΑαΒβΓγΔδΕεΖζΗηΘθΙιΚκΛλΜμΝνΞξΟοΠπΡρΣσςΤτΥυΦφΧχΨψΩω", 0)],
            new Variable("ΑαΒβΓγΔδΕεΖζΗηΘθΙιΚκΛλΜμΝνΞξΟοΠπΡρΣσςΤτΥυΦφΧχΨψΩω"), new Number(3)),
        new TestCase("abc_123", [new WordToken("abc_123", 0)], new Variable("abc_123"), new Number(4)),
        new TestCase("αβγ_123", [new WordToken("αβγ_123", 0)], new Variable("αβγ_123"), new Number(5)),
        new TestCase("abcd_αβγ_xyz", [new WordToken("abcd_αβγ_xyz", 0)], new Variable("abcd_αβγ_xyz"), new Number(6)),
        new TestCase("abcd_αβγ_xyz=3", [new WordToken("abcd_αβγ_xyz", 0), new SymbolToken('=', 12), new NumberToken("3", 13)],
            new AssignmentOperator(new Variable("abcd_αβγ_xyz"), new Number(3)), new Number(3)),
        new TestCase("abcd_αβγ_xyz=π", [new WordToken("abcd_αβγ_xyz", 0), new SymbolToken('=', 12), new WordToken("π", 13)],
            new AssignmentOperator(new Variable("abcd_αβγ_xyz"), new Constant("π")), new Number(Math.PI),
            new AssignmentOperator(new Variable("abcd_αβγ_xyz"), new Number(Math.PI))),
        new TestCase("abcd_αβγ_xyz=inf", [new WordToken("abcd_αβγ_xyz", 0), new SymbolToken('=', 12), new WordToken("inf", 13)],
            new AssignmentOperator(new Variable("abcd_αβγ_xyz"), new Infinity("inf")), new Infinity("inf")),
        new TestCase("--1", [new SymbolToken('-', 0), new SymbolToken('-', 1), new NumberToken("1", 2)],
            new PrefixOperator("--", new Number(1)), new Number(0)),
        new TestCase("++1", [new SymbolToken('+', 0), new SymbolToken('+', 1), new NumberToken("1", 2)],
            new PrefixOperator("++", new Number(1)), new Number(2)),
        new TestCase("1--", [new NumberToken("1", 0), new SymbolToken('-', 1), new SymbolToken('-', 2)],
            new PostfixOperator("--", new Number(1)), new Number(1)),
        new TestCase("1++", [new NumberToken("1", 0), new SymbolToken('+', 1), new SymbolToken('+', 2)],
            new PostfixOperator("++", new Number(1)), new Number(1)),
        new TestCase("---1", [new SymbolToken('-', 0), new SymbolToken('-', 1), new SymbolToken('-', 2), new NumberToken("1", 3)],
            new PrefixOperator("--", new PrefixOperator("-", new Number(1))), new Number(-2), new PrefixOperator("--", new Number(-1))),
        new TestCase("+++1", [new SymbolToken('+', 0), new SymbolToken('+', 1), new SymbolToken('+', 2), new NumberToken("1", 3)],
            new PrefixOperator("++", new PrefixOperator("+", new Number(1))), new Number(2), new PrefixOperator("++", new Number(1))),
        new TestCase("(x=3)-x", [new OpenBracketToken(Bracket.Parenthesis, 0), new WordToken("x", 1), new SymbolToken('=', 2),
                new NumberToken("3", 3), new CloseBracketToken(Bracket.Parenthesis, 4), new SymbolToken('-', 5), new WordToken("x", 6)],
            new BinaryOperator("-", new Parentheses(new AssignmentOperator(new Variable("x"), new Number(3))), new Variable("x")),
            new Number(0), new BinaryOperator("-", new Parentheses(new Number(3)), new Variable("x")),
            new BinaryOperator("-", new Number(3), new Variable("x")), new BinaryOperator("-", new Number(3), new Number(3))),
        new TestCase("p(3)", [new WordToken("p", 0), new OpenBracketToken(Bracket.Parenthesis, 1), new NumberToken("3", 2),
                new CloseBracketToken(Bracket.Parenthesis, 3)],
            new FunctionCall("p", [new Number(3)]), new Number(4)),
        new TestCase("f(3)", [new WordToken("f", 0), new OpenBracketToken(Bracket.Parenthesis, 1), new NumberToken("3", 2),
                new CloseBracketToken(Bracket.Parenthesis, 3)],
            new FunctionCall("f", [new Number(3)]), new Number(3)),
        new TestCase("g(1, 2, 3)",
            [new WordToken("g", 0), new OpenBracketToken(Bracket.Parenthesis, 1), new NumberToken("1", 2), new SymbolToken(',', 3),
                new NumberToken("2", 5), new SymbolToken(',', 6), new NumberToken("3", 8), new CloseBracketToken(Bracket.Parenthesis, 9)],
            new FunctionCall("g", [new Number(1), new Number(2), new Number(3)]), new Number(5)),
        new TestCase("g(abc_1, 2, 3+4*1)",
            [new WordToken("g", 0), new OpenBracketToken(Bracket.Parenthesis, 1), new WordToken("abc_1", 2), new SymbolToken(',', 7),
                new NumberToken("2", 9), new SymbolToken(',', 10), new NumberToken("3", 12), new SymbolToken('+', 13), new NumberToken("4", 14),
                new SymbolToken('*', 15), new NumberToken("1", 16), new CloseBracketToken(Bracket.Parenthesis, 17)],
            new FunctionCall("g", [new Variable("abc_1"), new Number(2),
                new BinaryOperator("+", new Number(3), new BinaryOperator("*", new Number(4), new Number(1)))]),
            new Number(9), new FunctionCall("g", [new Number(1), new Number(2),
                new BinaryOperator("+", new Number(3), new BinaryOperator("*", new Number(4), new Number(1)))]),
            new FunctionCall("g", [new Number(1), new Number(2), new BinaryOperator("+", new Number(3), new Number(4))]),
            new FunctionCall("g", [new Number(1), new Number(2), new Number(7)])),
        new TestCase("is_num(3)", [new WordToken("is_num", 0), new OpenBracketToken(Bracket.Parenthesis, 6), new NumberToken("3", 7),
                new CloseBracketToken(Bracket.Parenthesis, 8)],
            new FunctionCall("is_num", [new Number(3)]), Logical.TRUE),
        new TestCase("is_num(infinity)", [new WordToken("is_num", 0), new OpenBracketToken(Bracket.Parenthesis, 6), new WordToken("infinity", 7),
                new CloseBracketToken(Bracket.Parenthesis, 15)],
            new FunctionCall("is_num", [new Infinity("infinity")]), Logical.FALSE),
        new TestCase("is_num(3+4)", [new WordToken("is_num", 0), new OpenBracketToken(Bracket.Parenthesis, 6), new NumberToken("3", 7),
                new SymbolToken('+', 8), new NumberToken("4", 9), new CloseBracketToken(Bracket.Parenthesis, 10)],
            new FunctionCall("is_num", [new BinaryOperator("+", new Number(3), new Number(4))]), Logical.FALSE),
        new TestCase("l(1, 2, 3, 4)",
            [new WordToken("l", 0), new OpenBracketToken(Bracket.Parenthesis, 1), new NumberToken("1", 2), new SymbolToken(',', 3),
                new NumberToken("2", 5), new SymbolToken(',', 6), new NumberToken("3", 8), new SymbolToken(',', 9), new NumberToken("4", 11),
                new CloseBracketToken(Bracket.Parenthesis, 12)],
            new FunctionCall("l", [new Number(1), new Number(2), new Number(3), new Number(4)]), new Number(10)),
        new TestCase("triangle(4)", [new WordToken("triangle", 0), new OpenBracketToken(Bracket.Parenthesis, 8), new NumberToken("4", 9),
                new CloseBracketToken(Bracket.Parenthesis, 10)],
            new FunctionCall("triangle", [new Number(4)]), new Number(10)),
        new TestCase("dist = ([IsNumber]x, [NotUndefined  ]  y) => (((x - 0)^2)+((y)^2)) ^ (1/2)",
            [new WordToken("dist", 0), new SymbolToken('=', 5), new OpenBracketToken(Bracket.Parenthesis, 7),
                new OpenBracketToken(Bracket.Square, 8), new WordToken("IsNumber", 9), new CloseBracketToken(Bracket.Square, 17),
                new WordToken("x", 18), new SymbolToken(',', 19), new OpenBracketToken(Bracket.Square, 21), new WordToken("NotUndefined", 22),
                new CloseBracketToken(Bracket.Square, 36), new WordToken("y", 39), new CloseBracketToken(Bracket.Parenthesis, 40),
                new SymbolToken('=', 42), new SymbolToken('>', 43), new OpenBracketToken(Bracket.Parenthesis, 45),
                new OpenBracketToken(Bracket.Parenthesis, 46), new OpenBracketToken(Bracket.Parenthesis, 47), new WordToken("x", 48),
                new SymbolToken('-', 50), new NumberToken("0", 52), new CloseBracketToken(Bracket.Parenthesis, 53), new SymbolToken('^', 54),
                new NumberToken("2", 55), new CloseBracketToken(Bracket.Parenthesis, 56), new SymbolToken('+', 57),
                new OpenBracketToken(Bracket.Parenthesis, 58), new OpenBracketToken(Bracket.Parenthesis, 59), new WordToken("y", 60),
                new CloseBracketToken(Bracket.Parenthesis, 61), new SymbolToken('^', 62), new NumberToken("2", 63),
                new CloseBracketToken(Bracket.Parenthesis, 64), new CloseBracketToken(Bracket.Parenthesis, 65), new SymbolToken('^', 67),
                new OpenBracketToken(Bracket.Parenthesis, 69), new NumberToken("1", 70), new SymbolToken('/', 71), new NumberToken("2", 72),
                new CloseBracketToken(Bracket.Parenthesis, 73)],
            new AssignmentOperator(new Variable("dist"), new LambdaFunction([new Parameter("x", [new IsNumberAttribute()]),
                new Parameter("y", [new NotUndefinedAttribute()])],
                new BinaryOperator("^", new Parentheses(
                new BinaryOperator("+", new Parentheses(new BinaryOperator("^", new Parentheses(new BinaryOperator("-",
                        new Variable("x"), new Number(0))), new Number(2))), new Parentheses(new BinaryOperator("^",
                    new Parentheses(new Variable("y")), new Number(2))))), new Parentheses(new BinaryOperator("/",
                        new Number(1), new Number(2)))))), new LambdaFunction(["x", "y"],
            new BinaryOperator("^", new Parentheses(new BinaryOperator("+", new Parentheses(new BinaryOperator("^",
                    new Parentheses(new BinaryOperator("-", new Variable("x"), new Number(0))), new Number(2))),
                new Parentheses(new BinaryOperator("^", new Parentheses(new Variable("y")), new Number(2))))),
                    new Parentheses(new BinaryOperator("/", new Number(1), new Number(2)))))),
        new TestCase("get_pi = () => pi",
            [new WordToken("get_pi", 0), new SymbolToken('=', 7), new OpenBracketToken(Bracket.Parenthesis, 9),
                new CloseBracketToken(Bracket.Parenthesis, 10), new SymbolToken('=', 12), new SymbolToken('>', 13),
                new WordToken("pi", 15)],
            new AssignmentOperator(new Variable("get_pi"), new LambdaFunction([], new Constant("pi"))), new LambdaFunction([], new Constant("pi"))),
        new TestCase("trig = [IsNumber, Minimum(0)] n => triangle(n)",
            [new WordToken("trig", 0), new SymbolToken('=', 5), new OpenBracketToken(Bracket.Square, 7), new WordToken("IsNumber", 8),
                new SymbolToken(',', 16), new WordToken("Minimum", 18), new OpenBracketToken(Bracket.Parenthesis, 25), new NumberToken("0", 26),
                new CloseBracketToken(Bracket.Parenthesis, 27), new CloseBracketToken(Bracket.Square, 28), new WordToken("n", 30),
                new SymbolToken('=', 32), new SymbolToken('>', 33), new WordToken("triangle", 35),
                new OpenBracketToken(Bracket.Parenthesis, 43), new WordToken("n", 44), new CloseBracketToken(Bracket.Parenthesis, 45)],
            new AssignmentOperator(new Variable("trig"), new LambdaFunction([new Parameter("n", [new IsNumberAttribute(), new MaximumAttribute(0)])],
                new FunctionCall("triangle", [new Variable("n")]))),
            new LambdaFunction(["n"], new FunctionCall("triangle", [new Variable("n")]))),
        new TestCase("inc(1)+n",
            [new WordToken("inc", 0), new OpenBracketToken(Bracket.Parenthesis, 3), new NumberToken("1", 4),
                new CloseBracketToken(Bracket.Parenthesis, 5), new SymbolToken('+', 6), new WordToken("n", 7)],
            new BinaryOperator("+", new FunctionCall("inc", [new Number(1)]),
                new Variable("n")), new Number(7), new BinaryOperator("+", new Number(2), new Variable("n")),
            new BinaryOperator("+", new Number(2), new Number(5))),
        new TestCase("and(1, 2)",
            [new WordToken("and", 0), new OpenBracketToken(Bracket.Parenthesis, 3), new NumberToken("1", 4), new SymbolToken(',', 5),
                new NumberToken("2", 7), new CloseBracketToken(Bracket.Parenthesis, 8)],
            new FunctionCall("and", [new Number(1), new Number(2)]), Logical.TRUE),
        new TestCase("or(1, 2)",
            [new WordToken("or", 0), new OpenBracketToken(Bracket.Parenthesis, 2), new NumberToken("1", 3), new SymbolToken(',', 4),
                new NumberToken("2", 6), new CloseBracketToken(Bracket.Parenthesis, 7)],
            new FunctionCall("or", [new Number(1), new Number(2)]), Logical.TRUE),
        new TestCase("xor(1, 2)",
            [new WordToken("xor", 0), new OpenBracketToken(Bracket.Parenthesis, 3), new NumberToken("1", 4), new SymbolToken(',', 5),
                new NumberToken("2", 7), new CloseBracketToken(Bracket.Parenthesis, 8)],
            new FunctionCall("xor", [new Number(1), new Number(2)]), Logical.FALSE),
        new TestCase("sin([pi,pi/2])",
            [new WordToken("sin", 0), new OpenBracketToken(Bracket.Parenthesis, 3), new OpenBracketToken(Bracket.Square, 4), new WordToken("pi", 5),
                new SymbolToken(',', 7), new WordToken("pi", 8), new SymbolToken('/', 10), new NumberToken("2", 11),
                new CloseBracketToken(Bracket.Square, 12), new CloseBracketToken(Bracket.Parenthesis, 13)],
            new FunctionCall("sin", [new Vector([new Constant("pi"), new BinaryOperator("/", new Constant("pi"), (Number)2)])]),
            new Vector([(Number)0, (Number)1]),
            new FunctionCall("sin", [new Vector([(Number)Double.Pi, new BinaryOperator("/", new Constant("pi"), (Number)2)])]),
            new FunctionCall("sin", [new Vector([(Number)Double.Pi, new BinaryOperator("/", (Number)Double.Pi, (Number)2)])]),
            new FunctionCall("sin", [new Vector([(Number)Double.Pi, (Number)(Double.Pi / 2)])])),
        new TestCase("tan([0,pi])",
            [new WordToken("tan", 0), new OpenBracketToken(Bracket.Parenthesis, 3), new OpenBracketToken(Bracket.Square, 4), new NumberToken("0", 5),
                new SymbolToken(',', 6), new WordToken("pi", 7), new CloseBracketToken(Bracket.Square, 9),
                new CloseBracketToken(Bracket.Parenthesis, 10)],
            new FunctionCall("tan", [new Vector([(Number)0, new Constant("pi")])]), new Vector([(Number)0, (Number)0]),
            new FunctionCall("tan", [new Vector([(Number)0, (Number)Double.Pi])])),
        new TestCase("∅", [new SymbolToken('∅', 0)], new Constant("∅"), new Set()),
        new TestCase("empty", [new WordToken("empty", 0)], new Constant("empty"), new Set()),
        new TestCase("empty_set", [new WordToken("empty_set", 0)], new Constant("empty_set"), new Set()),
        new TestCase("[1] + [0] + 4",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new CloseBracketToken(Bracket.Square, 2), new SymbolToken('+', 4),
                new OpenBracketToken(Bracket.Square, 6), new NumberToken("0", 7), new CloseBracketToken(Bracket.Square, 8), new SymbolToken('+', 10),
                new NumberToken("4", 12)],
            new BinaryOperator("+", new BinaryOperator("+", new Vector([(Number)1]), new Vector([(Number)0])), (Number)4),
            new Vector([(Number)5]), new BinaryOperator("+", new Vector([(Number)1]), (Number)4)),
        new TestCase("[1] [0] + 4",
            [new OpenBracketToken(Bracket.Square, 0), new NumberToken("1", 1), new CloseBracketToken(Bracket.Square, 2),
                new OpenBracketToken(Bracket.Square, 4), new NumberToken("0", 5), new CloseBracketToken(Bracket.Square, 6), new SymbolToken('+', 8),
                new NumberToken("4", 10)],
            new BinaryOperator("+", new Indexer(new Vector([(Number)1]), (Number)0), (Number)4), (Number)5,
            new BinaryOperator("+", (Number)1, (Number)4)),
        new TestCase("3-infinity", [new NumberToken("3", 0), new SymbolToken('-', 1), new WordToken("infinity", 2)],
            new BinaryOperator("-", (Number)3, Infinity.POSITIVE), Infinity.NEGATIVE),
        new TestCase("true+true", [new WordToken("true", 0), new SymbolToken('+', 4), new WordToken("true", 5)],
            new BinaryOperator("+", Logical.TRUE, Logical.TRUE), (Number)2),
        new TestCase("false+true", [new WordToken("false", 0), new SymbolToken('+', 5), new WordToken("true", 6)],
            new BinaryOperator("+", Logical.FALSE, Logical.TRUE), Number.ONE),
        new TestCase("true-true", [new WordToken("true", 0), new SymbolToken('-', 4), new WordToken("true", 5)],
            new BinaryOperator("-", Logical.TRUE, Logical.TRUE), Number.ZERO),
        new TestCase("infinity^infinity", [new WordToken("infinity", 0), new SymbolToken('^', 8), new WordToken("infinity", 9)],
            new BinaryOperator("^", Infinity.POSITIVE, Infinity.POSITIVE), Undefined.UNDEFINED),
        new TestCase("infinity^-infinity",
            [new WordToken("infinity", 0), new SymbolToken('^', 8), new SymbolToken('-', 9), new WordToken("infinity", 10)],
            new BinaryOperator("^", Infinity.POSITIVE, new PrefixOperator("-", Infinity.POSITIVE)), Number.ZERO,
            new BinaryOperator("^", Infinity.POSITIVE, Infinity.NEGATIVE)),
        new TestCase("-infinity^infinity",
            [new SymbolToken('-', 0), new WordToken("infinity", 1), new SymbolToken('^', 9), new WordToken("infinity", 10)],
            new BinaryOperator("^", new PrefixOperator("-", Infinity.POSITIVE), Infinity.POSITIVE), Undefined.UNDEFINED,
            new BinaryOperator("^", Infinity.NEGATIVE, Infinity.POSITIVE)),
        new TestCase("-infinity^-infinity",
            [new SymbolToken('-', 0), new WordToken("infinity", 1), new SymbolToken('^', 9), new SymbolToken('-', 10), new WordToken("infinity", 11)],
            new BinaryOperator("^", new PrefixOperator("-", Infinity.POSITIVE), new PrefixOperator("-", Infinity.POSITIVE)), Number.ZERO,
            new BinaryOperator("^", Infinity.NEGATIVE, new PrefixOperator("-", Infinity.POSITIVE)),
            new BinaryOperator("^", Infinity.NEGATIVE, Infinity.NEGATIVE)),
    ];

    public readonly static Dictionary<string, Terminal> ContextVariables = new Dictionary<string, Terminal>()
    {
        { "abc_1", new Number(1) },
        { "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz", new Number(2) },
        { "ΑαΒβΓγΔδΕεΖζΗηΘθΙιΚκΛλΜμΝνΞξΟοΠπΡρΣσςΤτΥυΦφΧχΨψΩω", new Number(3) },
        { "abc_123", new Number(4) },
        { "αβγ_123", new Number(5) },
        { "abcd_αβγ_xyz", new Number(6) },
        { "p", new NativeFunction(TestValues.P) },
        { "n", new Number(5) }
    };

    public readonly static Dictionary<string, Function> ContextFunctions = new Dictionary<string, Function>
    {
        { "f", new NativeFunction(TestValues.F) },
        { "g", new NativeFunction(TestValues.G) },
        { "l", new LambdaFunction(["a", "b", "c", "d"], new BinaryOperator("+", new BinaryOperator("+",
            new BinaryOperator("+", new Variable("a"), new Variable("b")), new Variable("c")), new Variable("d"))) },
        { "triangle", new LambdaFunction(["n"], new BinaryOperator("/", new BinaryOperator("*",
            new Variable("n"), new Parentheses(new BinaryOperator("+", new Variable("n"), new Number(1)))),
            new Number(2))) },
        { "inc", new LambdaFunction(["n"], new AssignmentOperator(new Variable("n"),
            new BinaryOperator("+", new Variable("n"), new Number(1)))) }
    };
}
