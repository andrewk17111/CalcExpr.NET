using CalcExpr.Expressions;
using TestCalcExpr.TestUtils;

namespace TestCalcExpr.TestData;

public static partial class TestCases
{
    public readonly static FunctionTestCase[] LogicalFunctions =
    [
        new FunctionTestCase("and", new Dictionary<IExpression[], IExpression>
        {
            { [TestValues.UNDEFINED, Logical.TRUE], TestValues.UNDEFINED },
            { [TestValues.INFINITY, Logical.TRUE], Logical.TRUE },
            { [TestValues.NEGATIVE_INFINITY, Logical.TRUE], Logical.TRUE },
            { [TestValues.ZERO, Logical.TRUE], Logical.FALSE },
            { [TestValues.ONE, Logical.TRUE], Logical.TRUE },
            { [TestValues.NEGATIVE_ONE, Logical.TRUE], Logical.TRUE },
            { [TestValues.INTEGER, Logical.TRUE], Logical.TRUE },
            { [TestValues.NEGATIVE_INTEGER, Logical.TRUE], Logical.TRUE },
            { [TestValues.DECIMAL, Logical.TRUE], Logical.TRUE },
            { [TestValues.NEGATIVE_DECIMAL, Logical.TRUE], Logical.TRUE },
            { [TestValues.UNDEFINED, Logical.FALSE], TestValues.UNDEFINED },
            { [TestValues.INFINITY, Logical.FALSE], Logical.FALSE },
            { [TestValues.NEGATIVE_INFINITY, Logical.FALSE], Logical.FALSE },
            { [TestValues.ZERO, Logical.FALSE], Logical.FALSE },
            { [TestValues.ONE, Logical.FALSE], Logical.FALSE },
            { [TestValues.NEGATIVE_ONE, Logical.FALSE], Logical.FALSE },
            { [TestValues.INTEGER, Logical.FALSE], Logical.FALSE },
            { [TestValues.NEGATIVE_INTEGER, Logical.FALSE], Logical.FALSE },
            { [TestValues.DECIMAL, Logical.FALSE], Logical.FALSE },
            { [TestValues.NEGATIVE_DECIMAL, Logical.FALSE], Logical.FALSE },
        }),
        new FunctionTestCase("or", new Dictionary<IExpression[], IExpression>
        {
            { [TestValues.UNDEFINED, Logical.TRUE], TestValues.UNDEFINED },
            { [TestValues.INFINITY, Logical.TRUE], Logical.TRUE },
            { [TestValues.NEGATIVE_INFINITY, Logical.TRUE], Logical.TRUE },
            { [TestValues.ZERO, Logical.TRUE], Logical.TRUE },
            { [TestValues.ONE, Logical.TRUE], Logical.TRUE },
            { [TestValues.NEGATIVE_ONE, Logical.TRUE], Logical.TRUE },
            { [TestValues.INTEGER, Logical.TRUE], Logical.TRUE },
            { [TestValues.NEGATIVE_INTEGER, Logical.TRUE], Logical.TRUE },
            { [TestValues.DECIMAL, Logical.TRUE], Logical.TRUE },
            { [TestValues.NEGATIVE_DECIMAL, Logical.TRUE], Logical.TRUE },
            { [TestValues.UNDEFINED, Logical.FALSE], TestValues.UNDEFINED },
            { [TestValues.INFINITY, Logical.FALSE], Logical.TRUE },
            { [TestValues.NEGATIVE_INFINITY, Logical.FALSE], Logical.TRUE },
            { [TestValues.ZERO, Logical.FALSE], Logical.FALSE },
            { [TestValues.ONE, Logical.FALSE], Logical.TRUE },
            { [TestValues.NEGATIVE_ONE, Logical.FALSE], Logical.TRUE },
            { [TestValues.INTEGER, Logical.FALSE], Logical.TRUE },
            { [TestValues.NEGATIVE_INTEGER, Logical.FALSE], Logical.TRUE },
            { [TestValues.DECIMAL, Logical.FALSE], Logical.TRUE },
            { [TestValues.NEGATIVE_DECIMAL, Logical.FALSE], Logical.TRUE },
        }),
        new FunctionTestCase("xor", new Dictionary<IExpression[], IExpression>
        {
            { [TestValues.UNDEFINED, Logical.TRUE], TestValues.UNDEFINED },
            { [TestValues.INFINITY, Logical.TRUE], Logical.FALSE },
            { [TestValues.NEGATIVE_INFINITY, Logical.TRUE], Logical.FALSE },
            { [TestValues.ZERO, Logical.TRUE], Logical.TRUE },
            { [TestValues.ONE, Logical.TRUE], Logical.FALSE },
            { [TestValues.NEGATIVE_ONE, Logical.TRUE], Logical.FALSE },
            { [TestValues.INTEGER, Logical.TRUE], Logical.FALSE },
            { [TestValues.NEGATIVE_INTEGER, Logical.TRUE], Logical.FALSE },
            { [TestValues.DECIMAL, Logical.TRUE], Logical.FALSE },
            { [TestValues.NEGATIVE_DECIMAL, Logical.TRUE], Logical.FALSE },
            { [TestValues.UNDEFINED, Logical.FALSE], TestValues.UNDEFINED },
            { [TestValues.INFINITY, Logical.FALSE], Logical.TRUE },
            { [TestValues.NEGATIVE_INFINITY, Logical.FALSE], Logical.TRUE },
            { [TestValues.ZERO, Logical.FALSE], Logical.FALSE },
            { [TestValues.ONE, Logical.FALSE], Logical.TRUE },
            { [TestValues.NEGATIVE_ONE, Logical.FALSE], Logical.TRUE },
            { [TestValues.INTEGER, Logical.FALSE], Logical.TRUE },
            { [TestValues.NEGATIVE_INTEGER, Logical.FALSE], Logical.TRUE },
            { [TestValues.DECIMAL, Logical.FALSE], Logical.TRUE },
            { [TestValues.NEGATIVE_DECIMAL, Logical.FALSE], Logical.TRUE },
        }),
        new FunctionTestCase("not", new Dictionary<IExpression, IExpression>
        {
            { TestValues.UNDEFINED, TestValues.UNDEFINED },
            { TestValues.INFINITY, Logical.FALSE },
            { TestValues.NEGATIVE_INFINITY, Logical.FALSE },
            { TestValues.ZERO, Logical.TRUE },
            { TestValues.ONE, Logical.FALSE },
            { TestValues.NEGATIVE_ONE, Logical.FALSE },
            { TestValues.INTEGER, Logical.FALSE },
            { TestValues.NEGATIVE_INTEGER, Logical.FALSE },
            { TestValues.SMALL_DECIMAL, Logical.FALSE },
            { TestValues.NEGATIVE_SMALL_DECIMAL, Logical.FALSE },
            { TestValues.DECIMAL, Logical.FALSE },
            { TestValues.NEGATIVE_DECIMAL, Logical.FALSE },
        }),
        new FunctionTestCase("bool", new Dictionary<IExpression, IExpression>
        {
            { TestValues.UNDEFINED, TestValues.UNDEFINED },
            { TestValues.INFINITY, Logical.TRUE },
            { TestValues.NEGATIVE_INFINITY, Logical.TRUE },
            { TestValues.ZERO, Logical.FALSE },
            { TestValues.ONE, Logical.TRUE },
            { TestValues.NEGATIVE_ONE, Logical.TRUE },
            { TestValues.INTEGER, Logical.TRUE },
            { TestValues.NEGATIVE_INTEGER, Logical.TRUE },
            { TestValues.SMALL_DECIMAL, Logical.TRUE },
            { TestValues.NEGATIVE_SMALL_DECIMAL, Logical.TRUE },
            { TestValues.DECIMAL, Logical.TRUE },
            { TestValues.NEGATIVE_DECIMAL, Logical.TRUE },
        }),
        new FunctionTestCase("if", new Dictionary<IExpression[], IExpression>
        {
            { [TestValues.UNDEFINED, TestValues.DECIMAL, TestValues.INTEGER], TestValues.UNDEFINED },
            { [TestValues.ONE, TestValues.DECIMAL, TestValues.INTEGER], TestValues.DECIMAL },
            { [TestValues.ZERO, TestValues.DECIMAL, TestValues.INTEGER], TestValues.INTEGER },
        }),
        new FunctionTestCase("is_na", new Dictionary<IExpression, IExpression>
        {
            { TestValues.UNDEFINED, Logical.TRUE },
            { TestValues.INFINITY, Logical.FALSE },
            { TestValues.NEGATIVE_INFINITY, Logical.FALSE },
            { TestValues.ZERO, Logical.FALSE },
            { TestValues.ONE, Logical.FALSE },
            { TestValues.NEGATIVE_ONE, Logical.FALSE },
            { TestValues.INTEGER, Logical.FALSE },
            { TestValues.NEGATIVE_INTEGER, Logical.FALSE },
            { TestValues.DECIMAL, Logical.FALSE },
            { TestValues.NEGATIVE_DECIMAL, Logical.FALSE },
        }),
        new FunctionTestCase(["is_num", "is_number"], new Dictionary<IExpression, IExpression>
        {
            { TestValues.UNDEFINED, Logical.FALSE },
            { TestValues.INFINITY, Logical.FALSE },
            { TestValues.NEGATIVE_INFINITY, Logical.FALSE },
            { TestValues.ZERO, Logical.TRUE },
            { TestValues.ONE, Logical.TRUE },
            { Logical.TRUE, Logical.FALSE },
            { Logical.FALSE, Logical.FALSE },
        }),
        new FunctionTestCase(["is_int", "is_integer"], new Dictionary<IExpression, IExpression>
        {
            { TestValues.UNDEFINED, Logical.FALSE },
            { TestValues.INFINITY, Logical.FALSE },
            { TestValues.NEGATIVE_INFINITY, Logical.FALSE },
            { TestValues.ZERO, Logical.TRUE },
            { TestValues.ONE, Logical.TRUE },
            { TestValues.NEGATIVE_ONE, Logical.TRUE },
            { TestValues.INTEGER, Logical.TRUE },
            { TestValues.NEGATIVE_INTEGER, Logical.TRUE },
            { TestValues.DECIMAL, Logical.FALSE },
            { TestValues.NEGATIVE_DECIMAL, Logical.FALSE },
        }),
        new FunctionTestCase("is_logical", new Dictionary<IExpression, IExpression>
        {
            { TestValues.UNDEFINED, Logical.FALSE },
            { TestValues.INFINITY, Logical.FALSE },
            { TestValues.NEGATIVE_INFINITY, Logical.FALSE },
            { TestValues.ZERO, Logical.FALSE },
            { TestValues.ONE, Logical.FALSE },
            { TestValues.NEGATIVE_ONE, Logical.FALSE },
            { TestValues.INTEGER, Logical.FALSE },
            { TestValues.NEGATIVE_INTEGER, Logical.FALSE },
            { TestValues.DECIMAL, Logical.FALSE },
            { TestValues.NEGATIVE_DECIMAL, Logical.FALSE },
            { Logical.TRUE, Logical.TRUE },
            { Logical.FALSE, Logical.TRUE },
        }),
        new FunctionTestCase("is_even", new Dictionary<IExpression, IExpression>
        {
            { TestValues.UNDEFINED, TestValues.UNDEFINED },
            { TestValues.INFINITY, TestValues.UNDEFINED },
            { TestValues.NEGATIVE_INFINITY, TestValues.UNDEFINED },
            { TestValues.ZERO, Logical.TRUE },
            { TestValues.ONE, Logical.FALSE },
            { TestValues.NEGATIVE_ONE, Logical.FALSE },
            { TestValues.INTEGER, Logical.TRUE },
            { TestValues.NEGATIVE_INTEGER, Logical.TRUE },
            { TestValues.DECIMAL, Logical.FALSE },
            { TestValues.NEGATIVE_DECIMAL, Logical.FALSE },
        }),
        new FunctionTestCase("is_odd", new Dictionary<IExpression, IExpression>
        {
            { TestValues.UNDEFINED, TestValues.UNDEFINED },
            { TestValues.INFINITY, TestValues.UNDEFINED },
            { TestValues.NEGATIVE_INFINITY, TestValues.UNDEFINED },
            { TestValues.ZERO, Logical.FALSE },
            { TestValues.ONE, Logical.TRUE },
            { TestValues.NEGATIVE_ONE, Logical.TRUE },
            { TestValues.INTEGER, Logical.FALSE },
            { TestValues.NEGATIVE_INTEGER, Logical.FALSE },
            { TestValues.DECIMAL, Logical.FALSE },
            { TestValues.NEGATIVE_DECIMAL, Logical.FALSE },
        }),
        new FunctionTestCase("is_positive", new Dictionary<IExpression, IExpression>
        {
            { TestValues.UNDEFINED, TestValues.UNDEFINED },
            { TestValues.INFINITY, Logical.TRUE },
            { TestValues.NEGATIVE_INFINITY, Logical.FALSE },
            { TestValues.ZERO, Logical.FALSE },
            { TestValues.ONE, Logical.TRUE },
            { TestValues.NEGATIVE_ONE, Logical.FALSE },
            { TestValues.INTEGER, Logical.TRUE },
            { TestValues.NEGATIVE_INTEGER, Logical.FALSE },
            { TestValues.DECIMAL, Logical.TRUE },
            { TestValues.NEGATIVE_DECIMAL, Logical.FALSE },
        }),
        new FunctionTestCase("is_negative", new Dictionary<IExpression, IExpression>
        {
            { TestValues.UNDEFINED, TestValues.UNDEFINED },
            { TestValues.INFINITY, Logical.FALSE },
            { TestValues.NEGATIVE_INFINITY, Logical.TRUE },
            { TestValues.ZERO, Logical.FALSE },
            { TestValues.ONE, Logical.FALSE },
            { TestValues.NEGATIVE_ONE, Logical.TRUE },
            { TestValues.INTEGER, Logical.FALSE },
            { TestValues.NEGATIVE_INTEGER, Logical.TRUE },
            { TestValues.DECIMAL, Logical.FALSE },
            { TestValues.NEGATIVE_DECIMAL, Logical.TRUE },
        }),
    ];
}
